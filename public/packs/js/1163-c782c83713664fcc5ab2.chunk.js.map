{"version":3,"sources":["webpack://prsdigg/./app/packs/apps/dashboard/components/ListComponent/ListComponent.tsx","webpack://prsdigg/./app/packs/apps/dashboard/pages/SettingsPage/components/AccessTokensComponent.tsx","webpack://prsdigg/./app/packs/apps/dashboard/pages/SettingsPage/components/NotificationSettingComponent.tsx","webpack://prsdigg/./app/packs/apps/dashboard/pages/SettingsPage/SettingsPage.tsx"],"names":["ListComponent","props","isMobile","useUserAgent","t","useTranslation","dataSource","hasNextPage","loading","fetchMore","renderItem","size","itemLayout","phone","loadMore","style","textAlign","marginTop","height","lineHeight","onClick","AccessTokensComponent","useState","newAccessToken","setNewAccessToken","modalVisible","setModalVisible","memo","setMemo","useMyAccessTokenConnectionQuery","data","refetch","createAccessToken","useCreateAccessTokenMutation","update","_","deleteAccessToken","useDeleteAccessTokenMutation","res","message","LoadingComponent","myAccessTokenConnection","accessTokens","nodes","pageInfo","endCursor","className","type","showIcon","closable","description","code","value","copy","title","onConfirm","href","target","QuestionCircleOutlined","visible","onCancel","onOk","variables","input","okButtonProps","disabled","Boolean","placeholder","onChange","e","currentTarget","after","accessToken","key","id","actions","desensitizedValue","lastRequestAt","content","lastRequestIp","CheckCircleTwoTone","twoToneColor","ExclamationCircleOutlined","Paragraph","NotificationSettingComponent","useMyNotificationSettingQuery","useUpdateNotificationSettingMutation","updateNotificationSetting","updating","myNotificationSetting","gutter","checked","articlePublishedWeb","articlePublishedMixinBot","articlePublishedWebhook","articleBoughtWeb","articleBoughtMixinBot","articleBoughtWebhook","articleRewardedWeb","articleRewardedMixinBot","articleRewardedWebhook","taggingCreatedWeb","taggingCreatedMixinBot","taggingCreatedWebhook","commentCreatedWeb","commentCreatedMixinBot","commentCreatedWebhook","transferProcessedWeb","transferProcessedMixinBot","transferProcessedWebhook","SettingsPage","location","useLocation","history","useHistory","state","activeKey","setActiveKey","replace","tab"],"mappings":"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","file":"js/1163-c782c83713664fcc5ab2.chunk.js","sourcesContent":["import { Button, List } from 'antd';\nimport { useUserAgent } from 'apps/shared';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport default function ListComponent(props: {\n  dataSource: any;\n  hasNextPage: boolean;\n  loading: boolean;\n  fetchMore: () => any;\n  renderItem: any;\n}) {\n  const { isMobile } = useUserAgent();\n  const { t } = useTranslation();\n  const { dataSource, hasNextPage, loading, fetchMore, renderItem } = props;\n  return (\n    <List\n      size='small'\n      dataSource={dataSource}\n      itemLayout={isMobile.phone ? 'vertical' : 'horizontal'}\n      loadMore={\n        hasNextPage && (\n          <div\n            style={{\n              textAlign: 'center',\n              marginTop: 12,\n              height: 32,\n              lineHeight: '32px',\n            }}\n          >\n            <Button loading={loading} onClick={fetchMore}>\n              {t('load_more')}\n            </Button>\n          </div>\n        )\n      }\n      renderItem={renderItem}\n    />\n  );\n}\n","import {\n  CheckCircleTwoTone,\n  ExclamationCircleOutlined,\n  QuestionCircleOutlined,\n} from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Input,\n  List,\n  message,\n  Modal,\n  Popconfirm,\n  Popover,\n  Typography,\n} from 'antd';\nimport ListComponent from 'apps/dashboard/components/ListComponent/ListComponent';\nimport LoadingComponent from 'apps/dashboard/components/LoadingComponent/LoadingComponent';\nimport copy from 'copy-to-clipboard';\nimport {\n  AccessToken,\n  useCreateAccessTokenMutation,\n  useDeleteAccessTokenMutation,\n  useMyAccessTokenConnectionQuery,\n} from 'graphqlTypes';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport default function AccessTokensComponent() {\n  const { t } = useTranslation();\n  const [newAccessToken, setNewAccessToken] =\n    useState<Partial<AccessToken>>(null);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [memo, setMemo] = useState('');\n  const { loading, data, refetch, fetchMore } =\n    useMyAccessTokenConnectionQuery();\n  const [createAccessToken] = useCreateAccessTokenMutation({\n    update(_, { data: { createAccessToken } }) {\n      setMemo('');\n      setModalVisible(false);\n      setNewAccessToken(createAccessToken);\n      refetch();\n    },\n  });\n  const [deleteAccessToken] = useDeleteAccessTokenMutation({\n    update(_, { data: { deleteAccessToken: res } }) {\n      refetch();\n      if (res) {\n        message.success(t('success_deleted'));\n      }\n    },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    myAccessTokenConnection: {\n      nodes: accessTokens,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  return (\n    <>\n      {newAccessToken && (\n        <div className='mb-4'>\n          <Alert\n            type='success'\n            showIcon\n            closable\n            message={t('token_generated_tips')}\n            description={\n              <>\n                <Typography.Text className='block mb-2' type='danger'>\n                  {t('token_security_tips')}\n                </Typography.Text>\n                <div className='flex'>\n                  <Typography.Text code>{newAccessToken.value}</Typography.Text>\n                  <Button\n                    className='ml-2'\n                    size='small'\n                    onClick={() => {\n                      copy(newAccessToken.value);\n                      message.success(t('success_copied'));\n                    }}\n                  >\n                    {t('copy')}\n                  </Button>\n                </div>\n              </>\n            }\n          />\n        </div>\n      )}\n      <div className='mb-4'>\n        <Popconfirm\n          title={t('confirm_to_generate_token')}\n          onConfirm={() => setModalVisible(true)}\n        >\n          <Button type='primary'>{t('generate_new_token')}</Button>\n        </Popconfirm>\n        <a\n          className='ml-2'\n          href='https://github.com/baizhiheizi/prsdigg#api'\n          target='_blank'\n        >\n          <QuestionCircleOutlined />\n        </a>\n        <Modal\n          title={t('generate_new_token')}\n          visible={modalVisible}\n          onCancel={() => setModalVisible(false)}\n          onOk={() => createAccessToken({ variables: { input: { memo } } })}\n          okButtonProps={{ disabled: !Boolean(memo) }}\n        >\n          <Input\n            value={memo}\n            placeholder={t('token_memo_placeholader')}\n            onChange={(e) => setMemo(e.currentTarget.value)}\n          />\n        </Modal>\n      </div>\n      <ListComponent\n        loading={loading}\n        hasNextPage={hasNextPage}\n        fetchMore={() => fetchMore({ variables: { after: endCursor } })}\n        dataSource={accessTokens}\n        renderItem={(accessToken: Partial<AccessToken>) => (\n          <List.Item\n            key={accessToken.id}\n            actions={[\n              <Popconfirm\n                title={t('confirm_to_delete_token')}\n                onConfirm={() =>\n                  deleteAccessToken({\n                    variables: { input: { id: accessToken.id } },\n                  })\n                }\n              >\n                <Button size='small'>{t('delete')}</Button>\n              </Popconfirm>,\n            ]}\n          >\n            <div className='flex-1 line-clamp-1'>{accessToken.memo}</div>\n            <div className='flex-1 '>\n              <Typography.Text code>\n                {accessToken.desensitizedValue}\n              </Typography.Text>\n            </div>\n            {accessToken.lastRequestAt ? (\n              <Popover\n                title='Last Request'\n                content={\n                  <>\n                    <p>IP: {accessToken.lastRequestIp}</p>\n                    <p>Time: {accessToken.lastRequestAt}</p>\n                  </>\n                }\n              >\n                <CheckCircleTwoTone twoToneColor='#52c41a' />\n              </Popover>\n            ) : (\n              <Popover title='Last Request' content='Never requested'>\n                <ExclamationCircleOutlined />\n              </Popover>\n            )}\n          </List.Item>\n        )}\n      />\n    </>\n  );\n}\n","import {\n  Alert,\n  Col,\n  Divider,\n  message,\n  Row,\n  Space,\n  Switch,\n  Typography,\n} from 'antd';\nimport LoadingComponent from 'apps/dashboard/components/LoadingComponent/LoadingComponent';\nimport {\n  useMyNotificationSettingQuery,\n  useUpdateNotificationSettingMutation,\n} from 'graphqlTypes';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nconst { Paragraph } = Typography;\n\nexport default function NotificationSettingComponent() {\n  const { t } = useTranslation();\n  const { loading, data } = useMyNotificationSettingQuery();\n  const [updateNotificationSetting, { loading: updating }] =\n    useUpdateNotificationSettingMutation({\n      update() {\n        message.success(t('success_updated'));\n      },\n    });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n  const { myNotificationSetting } = data;\n\n  return (\n    <div>\n      <Typography>\n        <Paragraph>\n          <Alert message={t('tips_of_general_notifications')} />\n        </Paragraph>\n      </Typography>\n      <br />\n      <Typography>\n        <Paragraph>{t('tips_of_article_published_notifications')}</Paragraph>\n      </Typography>\n      <Row gutter={16}>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.articlePublishedWeb}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: { input: { articlePublishedWeb: value } },\n                })\n              }\n            />\n            Web\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.articlePublishedMixinBot}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { articlePublishedMixinBot: value },\n                  },\n                })\n              }\n            />\n            Mixin Bot\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              disabled\n              loading={updating}\n              checked={myNotificationSetting.articlePublishedWebhook}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { articlePublishedWebhook: value },\n                  },\n                })\n              }\n            />\n            Webhook\n          </Space>\n        </Col>\n      </Row>\n      <Divider />\n      <Typography>\n        <Paragraph>{t('tips_of_article_bought_notifications')}</Paragraph>\n      </Typography>\n      <Row gutter={16}>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.articleBoughtWeb}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: { input: { articleBoughtWeb: value } },\n                })\n              }\n            />\n            Web\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.articleBoughtMixinBot}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { articleBoughtMixinBot: value },\n                  },\n                })\n              }\n            />\n            Mixin Bot\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              disabled\n              loading={updating}\n              checked={myNotificationSetting.articleBoughtWebhook}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { articleBoughtWebhook: value },\n                  },\n                })\n              }\n            />\n            Webhook\n          </Space>\n        </Col>\n      </Row>\n      <Divider />\n      <Typography>\n        <Paragraph>{t('tips_of_article_rewarded_notifications')}</Paragraph>\n      </Typography>\n      <Row gutter={16}>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.articleRewardedWeb}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: { input: { articleRewardedWeb: value } },\n                })\n              }\n            />\n            Web\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.articleRewardedMixinBot}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { articleRewardedMixinBot: value },\n                  },\n                })\n              }\n            />\n            Mixin Bot\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              disabled\n              loading={updating}\n              checked={myNotificationSetting.articleRewardedWebhook}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { articleRewardedWebhook: value },\n                  },\n                })\n              }\n            />\n            Webhook\n          </Space>\n        </Col>\n      </Row>\n      <Divider />\n      <Typography>\n        <Paragraph>{t('tips_of_tagging_created_notifications')}</Paragraph>\n      </Typography>\n      <Row gutter={16}>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.taggingCreatedWeb}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: { input: { taggingCreatedWeb: value } },\n                })\n              }\n            />\n            Web\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.taggingCreatedMixinBot}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { taggingCreatedMixinBot: value },\n                  },\n                })\n              }\n            />\n            Mixin Bot\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              disabled\n              loading={updating}\n              checked={myNotificationSetting.taggingCreatedWebhook}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { taggingCreatedWebhook: value },\n                  },\n                })\n              }\n            />\n            Webhook\n          </Space>\n        </Col>\n      </Row>\n      <Divider />\n      <Typography>\n        <Paragraph>{t('tips_of_comment_created_notifications')}</Paragraph>\n      </Typography>\n      <Row gutter={16}>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.commentCreatedWeb}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: { input: { commentCreatedWeb: value } },\n                })\n              }\n            />\n            Web\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.commentCreatedMixinBot}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { commentCreatedMixinBot: value },\n                  },\n                })\n              }\n            />\n            Mixin Bot\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              disabled\n              loading={updating}\n              checked={myNotificationSetting.commentCreatedWebhook}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { commentCreatedWebhook: value },\n                  },\n                })\n              }\n            />\n            Webhook\n          </Space>\n        </Col>\n      </Row>\n      <Divider />\n      <Typography>\n        <Paragraph>{t('tips_of_transfer_processed_notifications')}</Paragraph>\n      </Typography>\n      <Row gutter={16}>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.transferProcessedWeb}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: { input: { transferProcessedWeb: value } },\n                })\n              }\n            />\n            Web\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              loading={updating}\n              checked={myNotificationSetting.transferProcessedMixinBot}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { transferProcessedMixinBot: value },\n                  },\n                })\n              }\n            />\n            Mixin Bot\n          </Space>\n        </Col>\n        <Col>\n          <Space>\n            <Switch\n              disabled\n              loading={updating}\n              checked={myNotificationSetting.transferProcessedWebhook}\n              onChange={(value) =>\n                updateNotificationSetting({\n                  variables: {\n                    input: { transferProcessedWebhook: value },\n                  },\n                })\n              }\n            />\n            Webhook\n          </Space>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { PageHeader, Tabs } from 'antd';\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport AccessTokensComponent from './components/AccessTokensComponent';\nimport NotificationSettingComponent from './components/NotificationSettingComponent';\n\nexport default function SettingsPage() {\n  const location = useLocation<{ activeKey: string }>();\n  const history = useHistory();\n  const { t } = useTranslation();\n  const [activeKey, setActiveKey] = useState(\n    location.state?.activeKey || 'notification',\n  );\n\n  return (\n    <>\n      <PageHeader title={t('settings')} />\n      <Tabs\n        activeKey={activeKey}\n        onChange={(value) => {\n          setActiveKey(value);\n          history.replace({\n            ...location,\n            state: {\n              ...location.state,\n              activeKey: value,\n            },\n          });\n        }}\n      >\n        <Tabs.TabPane key='notification' tab={t('notification')}>\n          <NotificationSettingComponent />\n        </Tabs.TabPane>\n        <Tabs.TabPane key='accessToken' tab={t('access_token')}>\n          <AccessTokensComponent />\n        </Tabs.TabPane>\n      </Tabs>\n    </>\n  );\n}\n"],"sourceRoot":""}