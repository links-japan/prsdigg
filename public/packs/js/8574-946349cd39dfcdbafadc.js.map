{"version":3,"sources":["webpack://prsdigg//home/runner/work/prsdigg/prsdigg/app/packs/images|sync|/^\\.\\/.*$/","webpack://prsdigg/./app/packs/apps/shared/utils/apolloClient.tsx","webpack://prsdigg/./app/packs/apps/shared/utils/hideLoader.ts","webpack://prsdigg/./app/packs/apps/shared/utils/mixinContext.ts","webpack://prsdigg/./app/packs/apps/shared/utils/reactMarkdownConfig.tsx","webpack://prsdigg/./app/packs/apps/shared/utils/uploader.ts","webpack://prsdigg/./app/packs/apps/shared/components/MarkdownRendererComponent.tsx","webpack://prsdigg/./app/packs/apps/shared/constants/index.tsx","webpack://prsdigg/./app/packs/apps/shared/contexts/CurrentUserContext.tsx","webpack://prsdigg/./app/packs/apps/shared/contexts/PrsdiggContext.tsx","webpack://prsdigg/./app/packs/apps/shared/contexts/UserAgentContext.tsx","webpack://prsdigg/./app/packs/apps/shared/index.ts","webpack://prsdigg/./app/packs/graphqlTypes/documents.tsx","webpack://prsdigg//home/runner/work/prsdigg/prsdigg/node_modules/moment-mini/locale|sync|/^\\.\\/.*$/"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","customizedConnectionMergeFunction","keyArgs","merge","existing","incoming","args","after","pageInfo","endCursor","nodes","apolloClient","uri","csrfToken","cache","InMemoryCache","typePolicies","Query","fields","adminAnnouncementConnection","adminArticleConnection","adminArticleSnapshotConnection","adminBonusConnection","adminMixinMessageConnection","adminMixinNetworkSnapshotConnection","adminOrderConnection","adminPaymentConnection","adminPrsAccountConnection","adminPrsTransactionConnection","adminSwapOrderConnection","adminTransferConnection","adminUserConnection","articleConnection","commentConnection","myAccessTokenConnection","myAuthoringSubscriptionConnection","myReadingSubscriptionConnection","myCommentingSubscriptionConnection","myNotificationConnection","myTransferConnection","myArticleOrderConnection","mySwapOrderConnection","myPaymentConnection","myArticleConnection","userArticleConnection","tagConnection","transferConnection","ApolloClient","credentials","headers","document","querySelector","content","hideLoader","ele","Boolean","style","display","ctx","mixinContext","window","webkit","messageHandlers","MixinContext","JSON","parse","prompt","platform","getContext","appVersion","app_version","conversationId","conversation_id","markdownPlugins","footnotes","inlineNotes","markdownRenderers","image","src","alt","wrapperClassName","className","preview","paragraph","node","otherProps","children","footnote","footnoteReference","label","identifier","href","footnoteDefinition","language","value","toLocaleLowerCase","createElement","svg","mermaid","dangerouslySetInnerHTML","__html","err","console","log","html","katex","throwOnError","props","uploadCommand","name","keyCommand","buttonProps","icon","CloudUploadOutlined","execute","getElementById","click","upload","file","callback","DirectUpload","create","error","blob","key","signed_id","signedId","filename","url","toString","MarkdownRendererComponent","source","transformLinkUri","protocols","trim","first","charAt","colon","indexOf","length","index","protocol","slice","toLowerCase","plugins","renderers","FOXSWAP_APP_ID","FOXSWAP_CODE_ID","CurrentUserContext","React","useCurrentUser","useContext","PrsdiggContext","usePrsdigg","UserAgentContext","useUserAgent","imagePath","require","defaultOptions","AdminBanUserDocument","gql","useAdminBanUserMutation","baseOptions","options","Apollo","AdminBlockArticleDocument","useAdminBlockArticleMutation","AdminCreateAnouncementDocument","useAdminCreateAnouncementMutation","AdminCreateBonusDocument","useAdminCreateBonusMutation","AdminDeleteAnouncementDocument","useAdminDeleteAnouncementMutation","AdminDeleteCommentDocument","useAdminDeleteCommentMutation","AdminDeliverAnouncementDocument","useAdminDeliverAnouncementMutation","AdminDeliverBonusDocument","useAdminDeliverBonusMutation","AdminLoginDocument","useAdminLoginMutation","AdminPreviewAnouncementDocument","useAdminPreviewAnouncementMutation","AdminRecoverCommentDocument","useAdminRecoverCommentMutation","AdminSignArticleSnapshotDocument","useAdminSignArticleSnapshotMutation","AdminUnbanUserDocument","useAdminUnbanUserMutation","AdminUnblockArticleDocument","useAdminUnblockArticleMutation","AdminUpdateAnouncementDocument","useAdminUpdateAnouncementMutation","AdminUpdateBonusDocument","useAdminUpdateBonusMutation","AdminAnnouncementConnectionDocument","useAdminAnnouncementConnectionQuery","ArticleChartDocument","useArticleChartQuery","AdminArticleConnectionDocument","useAdminArticleConnectionQuery","AdminArticleSnapshotConnectionDocument","useAdminArticleSnapshotConnectionQuery","AdminArticleDocument","useAdminArticleQuery","AdminBonusConnectionDocument","useAdminBonusConnectionQuery","AdminMixinMessageConnectionDocument","useAdminMixinMessageConnectionQuery","AdminMixinNetworkSnapshotConnectionDocument","useAdminMixinNetworkSnapshotConnectionQuery","AdminOrderConnectionDocument","useAdminOrderConnectionQuery","AdminPaymentConnectionDocument","useAdminPaymentConnectionQuery","AdminPrsAccountConnectionDocument","useAdminPrsAccountConnectionQuery","AdminPrsTransactionConnectionDocument","useAdminPrsTransactionConnectionQuery","RevenueChartDocument","useRevenueChartQuery","AdminSwapOrderConnectionDocument","useAdminSwapOrderConnectionQuery","AdminTransferConnectionDocument","useAdminTransferConnectionQuery","UserChartDocument","useUserChartQuery","AdminUserConnectionDocument","useAdminUserConnectionQuery","AdminUserDocument","useAdminUserQuery","AdminWalletBalanceDocument","useAdminWalletBalanceQuery","CreateCommentDocument","useCreateCommentMutation","DownvoteArticleDocument","useDownvoteArticleMutation","DownvoteCommentDocument","useDownvoteCommentMutation","ToggleAuthoringSubscribeUserActionDocument","useToggleAuthoringSubscribeUserActionMutation","ToggleCommentingSubscribeArticleActionDocument","useToggleCommentingSubscribeArticleActionMutation","ToggleReadingSubscribeUserActionDocument","useToggleReadingSubscribeUserActionMutation","ToggleSubscribeTagActionDocument","useToggleSubscribeTagActionMutation","UpvoteArticleDocument","useUpvoteArticleMutation","UpvoteCommentDocument","useUpvoteCommentMutation","ArticleConnectionDocument","useArticleConnectionQuery","ArticleDocument","useArticleQuery","CommentConnectionDocument","useCommentConnectionQuery","PaymentDocument","usePaymentLazyQuery","StatisticsDocument","useStatisticsQuery","SwapPreOrderDocument","useSwapPreOrderQuery","TagConnectionDocument","useTagConnectionQuery","TaggedArticleConnectionDocument","useTaggedArticleConnectionQuery","TransferConnectionDocument","useTransferConnectionQuery","UserArticleConnectionDocument","useUserArticleConnectionQuery","UserDocument","useUserQuery","ClearNotificationsDocument","useClearNotificationsMutation","CreateAccessTokenDocument","useCreateAccessTokenMutation","CreateArticleDocument","useCreateArticleMutation","DeleteAccessTokenDocument","useDeleteAccessTokenMutation","HideArticleDocument","useHideArticleMutation","PublishArticleDocument","usePublishArticleMutation","ReadNotificationDocument","useReadNotificationMutation","ReadNotificationsDocument","useReadNotificationsMutation","SwitchLocaleDocument","useSwitchLocaleMutation","UpdateArticleDocument","useUpdateArticleMutation","UpdateNotificationSettingDocument","useUpdateNotificationSettingMutation","MyAccessTokenConnectionDocument","useMyAccessTokenConnectionQuery","MyArticleConnectionDocument","useMyArticleConnectionQuery","MyArticleOrderConnectionDocument","useMyArticleOrderConnectionQuery","MyArticleDocument","useMyArticleQuery","MyAuthoringSubscriptionConnectionDocument","useMyAuthoringSubscriptionConnectionQuery","MyCommentingSubscriptionConnectionDocument","useMyCommentingSubscriptionConnectionQuery","MyNotificationConnectionDocument","useMyNotificationConnectionQuery","MyNotificationSettingDocument","useMyNotificationSettingQuery","MyPaymentConnectionDocument","useMyPaymentConnectionQuery","MyReadingSubscriptionConnectionDocument","useMyReadingSubscriptionConnectionQuery","MyStatisticsDocument","useMyStatisticsQuery","MySwapOrderConnectionDocument","useMySwapOrderConnectionQuery","MyTagSubscriptionConnectionDocument","useMyTagSubscriptionConnectionQuery","MyTransferConnectionDocument","useMyTransferConnectionQuery","PricableCurrenciesDocument","usePricableCurrenciesQuery"],"mappings":"+QAAA,IAAIA,EAAM,CACT,aAAc,KACd,aAAc,OAIf,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,O,gqCCrBpB,IAAMY,EAAoC,SACxCC,GAKA,YADG,IAJHA,OAA4B,GAKrB,CACLA,UACAC,MAFK,SAECC,EAAeC,EAFhB,GAE0C,IAAD,EAARC,EAAQ,EAARA,KACpC,IAAQ,MAAJA,OAAA,EAAAA,EAAMC,UAAN,MAAgBH,GAAhB,SAAgBA,EAAUI,eAA1B,EAAgB,EAAoBC,WAAW,CACjD,IAAMC,EAAQN,EAAQ,UAAOA,EAASM,OAAS,GAC/C,OAAO,EAAP,KACKL,GADL,IAEEK,MAAM,GAAD,OAAMA,EAAUL,EAASK,SAGhC,OAAOL,KAMFM,EAAe,SAACC,EAAaC,GACxC,IAAMC,EAAQ,IAAIC,KAAc,CAC9BC,aAAc,CACZC,MAAO,CACLC,OAAQ,CACNC,4BAA6BlB,IAC7BmB,uBAAwBnB,EAAkC,CACxD,QACA,UAEFoB,+BAAgCpB,EAAkC,CAChE,gBAEFqB,qBAAsBrB,IACtBsB,4BAA6BtB,IAC7BuB,oCACEvB,EAAkC,CAAC,SAAU,WAC/CwB,qBAAsBxB,EAAkC,CACtD,SACA,aAEFyB,uBAAwBzB,IACxB0B,0BAA2B1B,EAAkC,CAC3D,QACA,WAEF2B,8BAA+B3B,EAAkC,CAC/D,SAEF4B,yBAA0B5B,IAC1B6B,wBAAyB7B,EAAkC,CACzD,SACA,WACA,WACA,eAEF8B,oBAAqB9B,EAAkC,CACrD,SACA,QACA,YAEF+B,kBAAmB/B,EAAkC,CACnD,QACA,QACA,UAEFgC,kBAAmBhC,EAAkC,CACnD,gBACA,kBACA,gBACA,YAEFiC,wBAAyBjC,IACzBkC,kCACElC,IACFmC,gCAAiCnC,IACjCoC,mCACEpC,IACFqC,yBAA0BrC,IAC1BsC,qBAAsBtC,EAAkC,CACtD,iBAEFuC,yBAA0BvC,EAAkC,CAC1D,OACA,cAEFwC,sBAAuBxC,IACvByC,oBAAqBzC,IACrB0C,oBAAqB1C,EAAkC,CACrD,OACA,UAEF2C,sBAAuB3C,EAAkC,CACvD,OACA,YAEF4C,cAAe5C,IACf6C,mBAAoB7C,SAM5B,OAAO,IAAI8C,KAAa,CACtBnC,MACAE,QACAkC,YAAa,cACbC,QAAS,CACP,eAAgB,mBAChB,eACEpC,IACEqC,SAASC,cAAc,4BAAsC,IAC5DC,YCpHJ,SAASC,IACd,IAAMC,EAAWJ,SAASC,cAAc,mBACpCI,QAAQD,KACVA,EAAIE,MAAMC,QAAU,QCHxB,IAmBMC,EAoBOC,GApBPD,EAAW,GAEZE,OAAeC,QACfD,OAAeC,OAAOC,iBACtBF,OAAeC,OAAOC,gBAAgBC,cAEvCL,EAAMM,KAAKC,MAAMC,OAAO,+BACpBC,SAAWT,EAAIS,UAAY,MAE9BP,OAAeG,cACmC,oBAA3CH,OAAeG,aAAaK,cAEpCV,EAAMM,KAAKC,MAAOL,OAAeG,aAAaK,eAC1CD,SAAWT,EAAIS,UAAY,WAEjCT,EAAIW,WAAaX,EAAIY,YACrBZ,EAAIa,eAAiBb,EAAIc,gBAClBd,G,ucC3BF,IAAMe,EAAkB,CAAC,C,MAACC,GAAW,CAAEC,aAAa,KAC9CC,EAAoB,CAC/BC,MAAO,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAR,OACL,qBACEC,iBAAiB,SACjBC,UAAU,2BACVC,SAAS,EACTH,IAAKA,EACLD,IAAKA,KAGTK,UAAW,cAAGC,KAAH,IAAYC,EAAZ,qBACT,uBAAKJ,UAAU,QAAQI,EAAWC,WAEpCC,SAAU,YAAmB,IAAhBD,EAAe,EAAfA,SACX,OAAO,uBAAKL,UAAU,UAAUK,IAElCE,kBAAmB,YAA4B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC3B,OACE,uBAAKrG,GAAI,OAASqG,GAChB,qBAAGC,KAAM,QAAUD,GAAaD,KAItCG,mBAAoB,YAAsC,IAAnCF,EAAkC,EAAlCA,WAAYD,EAAsB,EAAtBA,MAAOH,EAAe,EAAfA,SACxC,OACE,uBAAKL,UAAU,OAAO5F,GAAI,OAASqG,GACjC,qBAAGT,UAAU,OAAOU,KAAM,QAAUD,GACjCD,EADH,KAGA,wBAAMR,UAAU,UAAUK,KAIhC3F,KAAM,YAAoC,IAAjC2F,EAAgC,EAAhCA,SAAUO,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC3B,GAAsC,aAA1B,MAARD,OAAA,EAAAA,EAAUE,qBACZ,IACc7C,SAAS8C,cAAc,OAC/B3G,GAAK,OACT,IAAM4G,EAAMC,WAAe,OAAQJ,GACnC,OACE,2BACE,wBAAMK,wBAAyB,CAAEC,OAAQH,MAG7C,MAAOI,GAEP,OADAC,QAAQC,IAAIF,GACLf,GAAYQ,OAEhB,GAAsC,WAA1B,MAARD,OAAA,EAAAA,EAAUE,qBAAiC,CACpD,IAAMS,EAAOC,mBAAqBX,EAAO,CACvCY,cAAc,IAEhB,OACE,2BACE,wBAAMP,wBAAyB,CAAEC,OAAQI,MAI/C,IAAMG,EAAQ,CACZ1B,UAAWY,EAAQ,YAAeA,EAAa,IAEjD,OACE,sBAASc,EACP,uBAAUA,EAAQb,MAMbc,EAA0B,CACrCC,KAAM,SACNC,WAAY,SACZC,YAAa,CAAE,aAAc,gBAC7BC,KAAM,gBAACC,EAAA,EAAD,MACNC,QAAS,WACPhE,SAASiE,eAAe,sBAAsBC,U,WC/E3C,SAASC,EAAOC,EAAWC,GACf,IAAIC,eAAaF,EAPH,wCAQtBG,QAAO,SAACC,EAAOC,GACtB,IAAID,EAGF,OAAOH,EAAS,CACdK,IAAKD,EAAKE,UACVC,SAAUH,EAAKE,UACfE,SAAUJ,EAAKI,SACfC,IAdN,+CAcqCL,EAAKC,MANtCtB,QAAQoB,MAAMA,EAAMO,eCNnB,SAASC,EAA0BvB,GACxC,OACE,gBAAC,cAAD,CACEwB,OAAQxB,EAAMwB,OACdC,iBAAkB,SAACxH,GAGjB,IAAMyH,EAAY,CAAC,OAAQ,QAAS,SAAU,MAAO,SAC/CL,GAAOpH,GAAO,IAAI0H,OAClBC,EAAQP,EAAIQ,OAAO,GAEzB,GAAc,MAAVD,GAA2B,MAAVA,EACnB,OAAOP,EAGT,IAAMS,EAAQT,EAAIU,QAAQ,KAC1B,IAAe,IAAXD,EACF,OAAOT,EAMT,IAHA,IAAMW,EAASN,EAAUM,OACrBC,GAAS,IAEJA,EAAQD,GAAQ,CACvB,IAAME,EAAWR,EAAUO,GAE3B,GACEH,IAAUI,EAASF,QACnBX,EAAIc,MAAM,EAAGD,EAASF,QAAQI,gBAAkBF,EAEhD,OAAOb,EAKX,OAAe,KADfY,EAAQZ,EAAIU,QAAQ,OACAD,EAAQG,IAKb,KADfA,EAAQZ,EAAIU,QAAQ,OACAD,EAAQG,EAJnBZ,EAQF,sBAETgB,QAASvE,EACTwE,UAAWrE,ICnDV,IAAMsE,EAAiB,uCACjBC,EAAkB,uCCCxB,IAAMC,EAAqBC,gBAAoB,MAC/C,SAASC,IACd,OAAOC,gBAAWH,GCFb,IAAMI,EAAiBH,gBAAoB,MAC3C,SAASI,IACd,OAAOF,gBAAWC,GCFb,IAAME,EAAmBL,gBAAoB,MAC7C,SAASM,IACd,OAAOJ,gBAAWG,GCCb,IAAME,EAAY,SAAC/C,GAAD,OAAkBgD,SAAQ,KAAYhD,K,ijGCC/D,IAAMiD,GAAkB,GAs5DXC,IAAuBC,SAAH,uJA2B1B,SAASC,GAAwBC,GAChC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAwEL,GAAsBI,GAKtG,IAAME,IAA4BL,SAAH,6KA4B/B,SAASM,GAA6BJ,GACrC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAkFC,GAA2BF,GAKrH,IAAMI,IAAiCP,SAAH,yLA2BpC,SAASQ,GAAkCN,GAC1C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA4FG,GAAgCJ,GAKpI,IAAMM,IAA2BT,SAAH,wJA0B9B,SAASU,GAA4BR,GACpC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAgFK,GAA0BN,GAKlH,IAAMQ,IAAiCX,SAAH,yLA2BpC,SAASY,GAAkCV,GAC1C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA4FO,GAAgCR,GAKpI,IAAMU,IAA6Bb,SAAH,2KA2BhC,SAASc,GAA8BZ,GACtC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAoFS,GAA4BV,GAKxH,IAAMY,IAAkCf,SAAH,4LA2BrC,SAASgB,GAAmCd,GAC3C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA8FW,GAAiCZ,GAKvI,IAAMc,IAA4BjB,SAAH,mKA2B/B,SAASkB,GAA6BhB,GACrC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAkFa,GAA2Bd,GAKrH,IAAMgB,IAAqBnB,SAAH,mJA2BxB,SAASoB,GAAsBlB,GAC9B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAoEe,GAAoBhB,GAKhG,IAAMkB,IAAkCrB,SAAH,4LA2BrC,SAASsB,GAAmCpB,GAC3C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA8FiB,GAAiClB,GAKvI,IAAMoB,IAA8BvB,SAAH,8KA2BjC,SAASwB,GAA+BtB,GACvC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAsFmB,GAA6BpB,GAK3H,IAAMsB,IAAmCzB,SAAH,uNA6BtC,SAAS0B,GAAoCxB,GAC5C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAgGqB,GAAkCtB,GAK1I,IAAMwB,IAAyB3B,SAAH,6JA2B5B,SAAS4B,GAA0B1B,GAClC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA4EuB,GAAwBxB,GAK5G,IAAM0B,IAA8B7B,SAAH,mLA4BjC,SAAS8B,GAA+B5B,GACvC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAsFyB,GAA6B1B,GAK3H,IAAM4B,IAAiC/B,SAAH,yLA2BpC,SAASgC,GAAkC9B,GAC1C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA4F2B,GAAgC5B,GAKpI,IAAM8B,IAA2BjC,SAAH,wJA0B9B,SAASkC,GAA4BhC,GACpC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAgF6B,GAA0B9B,GAKlH,IAAMgC,IAAsCnC,SAAH,oTAmCzC,SAASoC,GAAoClC,GAC5C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA6F+B,GAAqChC,GAS1I,IAAMkC,IAAuBrC,SAAH,oEAqB1B,SAASsC,GAAqBpC,GAC7B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA+DiC,GAAsBlC,GAS7F,IAAMoC,IAAiCvC,SAAH,ylBAsDpC,SAASwC,GAA+BtC,GACvC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAmFmC,GAAgCpC,GAS3H,IAAMsC,IAAyCzC,SAAH,ggBA8C5C,SAAS0C,GAAuCxC,GAC/C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAmGqC,GAAwCtC,GASnJ,IAAMwC,IAAuB3C,SAAH,kSAsC1B,SAAS4C,GAAqB1C,GAC7B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA+DuC,GAAsBxC,GAS7F,IAAM0C,IAA+B7C,SAAH,kbA6ClC,SAAS8C,GAA6B5C,GACrC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA+EyC,GAA8B1C,GASrH,IAAM4C,IAAsC/C,SAAH,wXAwCzC,SAASgD,GAAoC9C,GAC5C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA6F2C,GAAqC5C,GAS1I,IAAM8C,IAA8CjD,SAAH,qmBAuDjD,SAASkD,GAA4ChD,GACpD,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA6G6C,GAA6C9C,GASlK,IAAMgD,IAA+BnD,SAAH,omBAsDlC,SAASoD,GAA6BlD,GACrC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA+E+C,GAA8BhD,GASrH,IAAMkD,IAAiCrD,SAAH,2eAgDpC,SAASsD,GAA+BpD,GACvC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAmFiD,GAAgClD,GAS3H,IAAMoD,IAAoCvD,SAAH,qZAwCvC,SAASwD,GAAkCtD,GAC1C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAyFmD,GAAmCpD,GASpI,IAAMsD,IAAwCzD,SAAH,mhBAgD3C,SAAS0D,GAAsCxD,GAC9C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAiGqD,GAAuCtD,GAShJ,IAAMwD,IAAuB3D,SAAH,oEAqB1B,SAAS4D,GAAqB1D,GAC7B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA+DuD,GAAsBxD,GAS7F,IAAM0D,IAAmC7D,SAAH,kqBA2DtC,SAAS8D,GAAiC5D,GACzC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAuFyD,GAAkC1D,GASjI,IAAM4D,IAAkC/D,SAAH,4rBA2DrC,SAASgE,GAAgC9D,GACxC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAqF2D,GAAiC5D,GAS9H,IAAM8D,IAAoBjE,SAAH,8DAqBvB,SAASkE,GAAkBhE,GAC1B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAyD6D,GAAmB9D,GASpF,IAAMgE,IAA8BnE,SAAH,wiBAkDjC,SAASoE,GAA4BlE,GACpC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA6E+D,GAA6BhE,GASlH,IAAMkE,IAAoBrE,SAAH,mSAmCvB,SAASsE,GAAkBpE,GAC1B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAyDiE,GAAmBlE,GASpF,IAAMoE,IAA6BvE,SAAH,kNA8BhC,SAASwE,GAA2BtE,GACnC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA2EmE,GAA4BpE,GAS/G,IAAMsE,IAAwBzE,SAAH,+MA8B3B,SAAS0E,GAAyBxE,GACjC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA0EqE,GAAuBtE,GAKzG,IAAMwE,IAA0B3E,SAAH,8NA+B7B,SAAS4E,GAA2B1E,GACnC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA8EuE,GAAyBxE,GAK/G,IAAM0E,IAA0B7E,SAAH,oNA8B7B,SAAS8E,GAA2B5E,GACnC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA8EyE,GAAyB1E,GAK/G,IAAM4E,IAA6C/E,SAAH,8MA0BhD,SAASgF,GAA8C9E,GACtD,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAoH2E,GAA4C5E,GAKxK,IAAM8E,IAAiDjF,SAAH,2PA4BpD,SAASkF,GAAkDhF,GAC1D,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA4H6E,GAAgD9E,GAKpL,IAAMgF,IAA2CnF,SAAH,wMA0B9C,SAASoF,GAA4ClF,GACpD,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAgH+E,GAA0ChF,GAKlK,IAAMkF,IAAmCrF,SAAH,mNA4BtC,SAASsF,GAAoCpF,GAC5C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAgGiF,GAAkClF,GAK1I,IAAMoF,IAAwBvF,SAAH,wNA+B3B,SAASwF,GAAyBtF,GACjC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA0EmF,GAAuBpF,GAKzG,IAAMsF,IAAwBzF,SAAH,8MA8B3B,SAAS0F,GAAyBxF,GACjC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA0EqF,GAAuBtF,GAKzG,IAAMwF,IAA4B3F,SAAH,upBA0D/B,SAAS4F,GAA0B1F,GAClC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAyEuF,GAA2BxF,GAS5G,IAAM0F,IAAkB7F,SAAH,m+BAwFrB,SAAS8F,GAAgB5F,GACxB,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAqDyF,GAAiB1F,GAS9E,IAAM4F,IAA4B/F,SAAH,otBA0D/B,SAASgG,GAA0B9F,GAClC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAyE2F,GAA2B5F,GAS5G,IAAM8F,IAAkBjG,SAAH,oJA+BrB,SAASkG,GAAoBhG,GAC1B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,gBAAyD6F,GAAiB9F,GAKpF,IAAMgG,IAAqBnG,SAAH,0JA0BxB,SAASoG,GAAmBlG,GAC3B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA2D+F,GAAoBhG,GASvF,IAAMkG,IAAuBrG,SAAH,mVAqC1B,SAASsG,GAAqBpG,GAC7B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA+DiG,GAAsBlG,GAS7F,IAAMoG,IAAwBvG,SAAH,oQAkC3B,SAASwG,GAAsBtG,GAC9B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAiEmG,GAAuBpG,GAShG,IAAMsG,IAAkCzG,SAAH,2yBAmErC,SAAS0G,GAAgCxG,GACxC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAqFqG,GAAiCtG,GAS9H,IAAMwG,IAA6B3G,SAAH,uXAwChC,SAAS4G,GAA2B1G,GACnC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA2EuG,GAA4BxG,GAS/G,IAAM0G,IAAgC7G,SAAH,ybA2CnC,SAAS8G,GAA8B5G,GACtC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAiFyG,GAA+B1G,GASxH,IAAM4G,IAAe/G,SAAH,6TAoClB,SAASgH,GAAa9G,GACrB,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA+C2G,GAAc5G,GASrE,IAAM8G,IAA6BjH,SAAH,8IAwBhC,SAASkH,GAA8BhH,GACtC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAoF6G,GAA4B9G,GAKxH,IAAMgH,IAA4BnH,SAAH,+KA4B/B,SAASoH,GAA6BlH,GACrC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAkF+G,GAA2BhH,GAKrH,IAAMkH,IAAwBrH,SAAH,iJA0B3B,SAASsH,GAAyBpH,GACjC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA0EiH,GAAuBlH,GAKzG,IAAMoH,IAA4BvH,SAAH,2IAwB/B,SAASwH,GAA6BtH,GACrC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAkFmH,GAA2BpH,GAKrH,IAAMsH,IAAsBzH,SAAH,wJA2BzB,SAAS0H,GAAuBxH,GAC/B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAsEqH,GAAqBtH,GAKnG,IAAMwH,IAAyB3H,SAAH,iKA2B5B,SAAS4H,GAA0B1H,GAClC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA4EuH,GAAwBxH,GAK5G,IAAM0H,IAA2B7H,SAAH,mKA2B9B,SAAS8H,GAA4B5H,GACpC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAgFyH,GAA0B1H,GAKlH,IAAM4H,IAA4B/H,SAAH,2IAwB/B,SAASgI,GAA6B9H,GACrC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAkF2H,GAA2B5H,GAKrH,IAAM8H,IAAuBjI,SAAH,4HAwB1B,SAASkI,GAAwBhI,GAChC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAwE6H,GAAsB9H,GAKtG,IAAMgI,IAAwBnI,SAAH,iJA0B3B,SAASoI,GAAyBlI,GACjC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAA0E+H,GAAuBhI,GAKzG,IAAMkI,IAAoCrI,SAAH,qqBA6CvC,SAASsI,GAAqCpI,GAC7C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,eAAkGiI,GAAmClI,GAK7I,IAAMoI,IAAkCvI,SAAH,0SAkCrC,SAASwI,GAAgCtI,GACxC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAqFmI,GAAiCpI,GAS9H,IAAMsI,IAA8BzI,SAAH,kbA2CjC,SAAS0I,GAA4BxI,GACpC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA6EqI,GAA6BtI,GASlH,IAAMwI,IAAmC3I,SAAH,yeA6CtC,SAAS4I,GAAiC1I,GACzC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAuFuI,GAAkCxI,GASjI,IAAM0I,IAAoB7I,SAAH,wtBAkEvB,SAAS8I,GAAkB5I,GAC1B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAyDyI,GAAmB1I,GASpF,IAAM4I,IAA4C/I,SAAH,yXAsC/C,SAASgJ,GAA0C9I,GAClD,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAyG2I,GAA2C5I,GAS5J,IAAM8I,IAA6CjJ,SAAH,kWAsChD,SAASkJ,GAA2ChJ,GACnD,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA2G6I,GAA4C9I,GAS/J,IAAMgJ,IAAmCnJ,SAAH,8TAoCtC,SAASoJ,GAAiClJ,GACzC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAuF+I,GAAkChJ,GASjI,IAAMkJ,IAAgCrJ,SAAH,0lBA0CnC,SAASsJ,GAA8BpJ,GACtC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAiFiJ,GAA+BlJ,GASxH,IAAMoJ,IAA8BvJ,SAAH,mfAgDjC,SAASwJ,GAA4BtJ,GACpC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA6EmJ,GAA6BpJ,GASlH,IAAMsJ,IAA0CzJ,SAAH,2XAsC7C,SAAS0J,GAAwCxJ,GAChD,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAqGqJ,GAAyCtJ,GAStJ,IAAMwJ,IAAuB3J,SAAH,gTA+B1B,SAAS4J,GAAqB1J,GAC7B,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA+DuJ,GAAsBxJ,GAS7F,IAAM0J,IAAgC7J,SAAH,qiBAoDnC,SAAS8J,GAA8B5J,GACtC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAAiFyJ,GAA+B1J,GASxH,IAAM4J,IAAsC/J,SAAH,ySAkCzC,SAASgK,GAAoC9J,GAC5C,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA6F2J,GAAqC5J,GAS1I,IAAM8J,IAA+BjK,SAAH,seA6ClC,SAASkK,GAA6BhK,GACrC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA+E6J,GAA8B9J,GASrH,IAAMgK,IAA6BnK,SAAH,6KA6BhC,SAASoK,GAA2BlK,GACnC,IAAMC,EAAO,SAAOL,IAAmBI,GACvC,OAAOE,YAA2E+J,GAA4BhK,K,sBC9+KtH,IAAIjL,EAAM,CACT,WAAY,MACZ,cAAe,OAIhB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK","file":"js/8574-946349cd39dfcdbafadc.js","sourcesContent":["var map = {\n\t\"./logo.png\": 3247,\n\t\"./logo.svg\": 60051\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 48999;","import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst customizedConnectionMergeFunction = (\n  keyArgs: false | string[] = false,\n): {\n  keyArgs: any;\n  merge: (existing: any, incoming: any, options?: any) => any;\n} => {\n  return {\n    keyArgs,\n    merge(existing: any, incoming: any, { args }) {\n      if (args?.after === existing?.pageInfo?.endCursor) {\n        const nodes = existing ? [...existing.nodes] : [];\n        return {\n          ...incoming,\n          nodes: [...nodes, ...incoming.nodes],\n        };\n      } else {\n        return incoming;\n      }\n    },\n  };\n};\n\nexport const apolloClient = (uri: string, csrfToken?: string) => {\n  const cache = new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          adminAnnouncementConnection: customizedConnectionMergeFunction(),\n          adminArticleConnection: customizedConnectionMergeFunction([\n            'query',\n            'state',\n          ]),\n          adminArticleSnapshotConnection: customizedConnectionMergeFunction([\n            'articleUuid',\n          ]),\n          adminBonusConnection: customizedConnectionMergeFunction(),\n          adminMixinMessageConnection: customizedConnectionMergeFunction(),\n          adminMixinNetworkSnapshotConnection:\n            customizedConnectionMergeFunction(['filter', 'userId']),\n          adminOrderConnection: customizedConnectionMergeFunction([\n            'itemId',\n            'itemType',\n          ]),\n          adminPaymentConnection: customizedConnectionMergeFunction(),\n          adminPrsAccountConnection: customizedConnectionMergeFunction([\n            'query',\n            'status',\n          ]),\n          adminPrsTransactionConnection: customizedConnectionMergeFunction([\n            'type',\n          ]),\n          adminSwapOrderConnection: customizedConnectionMergeFunction(),\n          adminTransferConnection: customizedConnectionMergeFunction([\n            'itemId',\n            'itemType',\n            'sourceId',\n            'sourceType',\n          ]),\n          adminUserConnection: customizedConnectionMergeFunction([\n            'filter',\n            'query',\n            'orderBy',\n          ]),\n          articleConnection: customizedConnectionMergeFunction([\n            'tagId',\n            'order',\n            'query',\n          ]),\n          commentConnection: customizedConnectionMergeFunction([\n            'commentableId',\n            'commentableType',\n            'authorMixinId',\n            'orderBy',\n          ]),\n          myAccessTokenConnection: customizedConnectionMergeFunction(),\n          myAuthoringSubscriptionConnection:\n            customizedConnectionMergeFunction(),\n          myReadingSubscriptionConnection: customizedConnectionMergeFunction(),\n          myCommentingSubscriptionConnection:\n            customizedConnectionMergeFunction(),\n          myNotificationConnection: customizedConnectionMergeFunction(),\n          myTransferConnection: customizedConnectionMergeFunction([\n            'transferType',\n          ]),\n          myArticleOrderConnection: customizedConnectionMergeFunction([\n            'uuid',\n            'orderType',\n          ]),\n          mySwapOrderConnection: customizedConnectionMergeFunction(),\n          myPaymentConnection: customizedConnectionMergeFunction(),\n          myArticleConnection: customizedConnectionMergeFunction([\n            'type',\n            'state',\n          ]),\n          userArticleConnection: customizedConnectionMergeFunction([\n            'type',\n            'mixinId',\n          ]),\n          tagConnection: customizedConnectionMergeFunction(),\n          transferConnection: customizedConnectionMergeFunction(),\n        },\n      },\n    },\n  });\n\n  return new ApolloClient({\n    uri,\n    cache,\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRF-Token':\n        csrfToken ||\n        ((document.querySelector(\"meta[name='csrf-token']\") as any) || {})\n          .content,\n    },\n  });\n};\n","export function hideLoader() {\n  const ele: any = document.querySelector('.loader-wrapper');\n  if (Boolean(ele)) {\n    ele.style.display = 'none';\n  }\n}\n","const getMixinContext: () => {\n  appVersion?: string;\n  immersive?: boolean;\n  appearance?: 'dark' | 'light';\n  currency?:\n    | 'USD'\n    | 'CNY'\n    | 'JPY'\n    | 'EUR'\n    | 'KRW'\n    | 'HKD'\n    | 'GBP'\n    | 'AUD'\n    | 'SGD'\n    | 'MYR';\n  locale: string;\n  platform: 'iOS' | 'Android' | 'Desktop';\n  conversationId: string;\n} = () => {\n  let ctx: any = {};\n  if (\n    (window as any).webkit &&\n    (window as any).webkit.messageHandlers &&\n    (window as any).webkit.messageHandlers.MixinContext\n  ) {\n    ctx = JSON.parse(prompt('MixinContext.getContext()'));\n    ctx.platform = ctx.platform || 'iOS';\n  } else if (\n    (window as any).MixinContext &&\n    typeof (window as any).MixinContext.getContext === 'function'\n  ) {\n    ctx = JSON.parse((window as any).MixinContext.getContext());\n    ctx.platform = ctx.platform || 'Android';\n  }\n  ctx.appVersion = ctx.app_version;\n  ctx.conversationId = ctx.conversation_id;\n  return ctx;\n};\n\nexport const mixinContext = getMixinContext();\n","import { CloudUploadOutlined } from '@ant-design/icons';\nimport { ICommand } from '@uiw/react-md-editor';\nimport { Image } from 'antd';\nimport katex from 'katex';\nimport 'katex/dist/katex.css';\nimport mermaid from 'mermaid';\nimport React from 'react';\nimport footnotes from 'remark-footnotes';\n\nexport const markdownPlugins = [[footnotes, { inlineNotes: true }]];\nexport const markdownRenderers = {\n  image: ({ src, alt }) => (\n    <Image\n      wrapperClassName='w-full'\n      className='w-auto max-w-full m-auto'\n      preview={false}\n      alt={alt}\n      src={src}\n    />\n  ),\n  paragraph: ({ node, ...otherProps }) => (\n    <div className='mb-4'>{otherProps.children}</div>\n  ),\n  footnote: ({ children }) => {\n    return <sup className='italic'>{children}</sup>;\n  },\n  footnoteReference: ({ label, identifier }) => {\n    return (\n      <sup id={'ref-' + identifier}>\n        <a href={'#def-' + identifier}>{label}</a>\n      </sup>\n    );\n  },\n  footnoteDefinition: ({ identifier, label, children }) => {\n    return (\n      <div className='flex' id={'def-' + identifier}>\n        <a className='mr-2' href={'#ref-' + identifier}>\n          {label}:\n        </a>\n        <span className='italic'>{children}</span>\n      </div>\n    );\n  },\n  code: ({ children, language, value }) => {\n    if (language?.toLocaleLowerCase() === 'mermaid') {\n      try {\n        const Elm = document.createElement('div');\n        Elm.id = 'demo';\n        const svg = mermaid.render('demo', value);\n        return (\n          <pre>\n            <code dangerouslySetInnerHTML={{ __html: svg }} />\n          </pre>\n        );\n      } catch (err) {\n        console.log(err);\n        return children || value;\n      }\n    } else if (language?.toLocaleLowerCase() === 'katex') {\n      const html = katex.renderToString(value, {\n        throwOnError: false,\n      });\n      return (\n        <pre>\n          <code dangerouslySetInnerHTML={{ __html: html }} />\n        </pre>\n      );\n    }\n    const props = {\n      className: language ? `language-${language}` : '',\n    };\n    return (\n      <pre {...props}>\n        <code {...props}>{value}</code>\n      </pre>\n    );\n  },\n};\n\nexport const uploadCommand: ICommand = {\n  name: 'upload',\n  keyCommand: 'upload',\n  buttonProps: { 'aria-label': 'Upload Image' },\n  icon: <CloudUploadOutlined />,\n  execute: () => {\n    document.getElementById('upload-image-input').click();\n  },\n};\n","export const DIRECT_UPLOAD_URL = '/rails/active_storage/direct_uploads';\nexport const DIRECT_UPLOAD_END_POINT =\n  'https://prsdigg.oss-accelerate.aliyuncs.com/';\n\nimport { DirectUpload } from '@rails/activestorage';\n\nexport function upload(file: any, callback: (params: any) => any) {\n  const uploader = new DirectUpload(file, DIRECT_UPLOAD_URL);\n  uploader.create((error, blob) => {\n    if (error) {\n      console.error(error.toString());\n    } else {\n      return callback({\n        key: blob.signed_id,\n        signedId: blob.signed_id,\n        filename: blob.filename,\n        url: DIRECT_UPLOAD_END_POINT + blob.key,\n      });\n    }\n  });\n}\n","import MDEditor from '@uiw/react-md-editor';\nimport React from 'react';\nimport { markdownPlugins, markdownRenderers } from '../utils';\n\nexport function MarkdownRendererComponent(props: { source: string }) {\n  return (\n    <MDEditor.Markdown\n      source={props.source}\n      transformLinkUri={(uri: string) => {\n        // https://github.com/remarkjs/react-markdown/blob/main/src/uri-transformer.js\n        // add the 'mixin://' scheme\n        const protocols = ['http', 'https', 'mailto', 'tel', 'mixin'];\n        const url = (uri || '').trim();\n        const first = url.charAt(0);\n\n        if (first === '#' || first === '/') {\n          return url;\n        }\n\n        const colon = url.indexOf(':');\n        if (colon === -1) {\n          return url;\n        }\n\n        const length = protocols.length;\n        let index = -1;\n\n        while (++index < length) {\n          const protocol = protocols[index];\n\n          if (\n            colon === protocol.length &&\n            url.slice(0, protocol.length).toLowerCase() === protocol\n          ) {\n            return url;\n          }\n        }\n\n        index = url.indexOf('?');\n        if (index !== -1 && colon > index) {\n          return url;\n        }\n\n        index = url.indexOf('#');\n        if (index !== -1 && colon > index) {\n          return url;\n        }\n\n        return 'javascript:void(0)';\n      }}\n      plugins={markdownPlugins}\n      renderers={markdownRenderers}\n    />\n  );\n}\n","export const FOXSWAP_APP_ID = 'a753e0eb-3010-4c4a-a7b2-a7bda4063f62';\nexport const FOXSWAP_CODE_ID = '2140515d-b77f-4476-92f6-39d953c74cc5';\n","import React, { useContext } from 'react';\n\nexport const CurrentUserContext = React.createContext(null);\nexport function useCurrentUser() {\n  return useContext(CurrentUserContext);\n}\n","import React, { useContext } from 'react';\n\nexport const PrsdiggContext = React.createContext(null);\nexport function usePrsdigg() {\n  return useContext(PrsdiggContext);\n}\n","import React, { useContext } from 'react';\n\nexport const UserAgentContext = React.createContext(null);\nexport function useUserAgent() {\n  return useContext(UserAgentContext);\n}\n","export * from './components';\nexport * from './constants';\nexport * from './contexts';\nexport * from './utils';\n\nexport const imagePath = (name: string) => require('images/' + name);\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n};\n\nexport type AccessToken = {\n  __typename?: 'AccessToken';\n  createdAt: Scalars['ISO8601DateTime'];\n  desensitizedValue: Scalars['String'];\n  id: Scalars['ID'];\n  lastRequestAt?: Maybe<Scalars['ISO8601DateTime']>;\n  lastRequestIp?: Maybe<Scalars['String']>;\n  lastRequestMethod?: Maybe<Scalars['String']>;\n  lastRequestUrl?: Maybe<Scalars['String']>;\n  memo: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user: User;\n  value: Scalars['String'];\n};\n\n/** The connection type for AccessToken. */\nexport type AccessTokenConnection = {\n  __typename?: 'AccessTokenConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<AccessTokenEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<AccessToken>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type AccessTokenEdge = {\n  __typename?: 'AccessTokenEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<AccessToken>;\n};\n\n/** Autogenerated input type of AdminBanUserMutation */\nexport type AdminBanUserMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminBlockArticleMutation */\nexport type AdminBlockArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminCreateAnnouncementMutation */\nexport type AdminCreateAnnouncementMutationInput = {\n  content: Scalars['String'];\n  messageType: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminCreateAnnouncementMutation */\nexport type AdminCreateAnnouncementMutationPayload = {\n  __typename?: 'AdminCreateAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminCreateBonusMutation */\nexport type AdminCreateBonusMutationInput = {\n  userId: Scalars['ID'];\n  amount: Scalars['Float'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminCreateBonusMutation */\nexport type AdminCreateBonusMutationPayload = {\n  __typename?: 'AdminCreateBonusMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeleteAnnouncementMutation */\nexport type AdminDeleteAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminDeleteAnnouncementMutation */\nexport type AdminDeleteAnnouncementMutationPayload = {\n  __typename?: 'AdminDeleteAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeleteCommentMutation */\nexport type AdminDeleteCommentMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminDeleteCommentMutation */\nexport type AdminDeleteCommentMutationPayload = {\n  __typename?: 'AdminDeleteCommentMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeliverAnnouncementMutation */\nexport type AdminDeliverAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminDeliverAnnouncementMutation */\nexport type AdminDeliverAnnouncementMutationPayload = {\n  __typename?: 'AdminDeliverAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeliverBonusMutation */\nexport type AdminDeliverBonusMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminLoginMutation */\nexport type AdminLoginMutationInput = {\n  name: Scalars['String'];\n  password: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminLoginMutation */\nexport type AdminLoginMutationPayload = {\n  __typename?: 'AdminLoginMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminPreviewAnnouncementMutation */\nexport type AdminPreviewAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminPreviewAnnouncementMutation */\nexport type AdminPreviewAnnouncementMutationPayload = {\n  __typename?: 'AdminPreviewAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminRecoverCommentMutation */\nexport type AdminRecoverCommentMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminRecoverCommentMutation */\nexport type AdminRecoverCommentMutationPayload = {\n  __typename?: 'AdminRecoverCommentMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminSignArticleSnapshotMutation */\nexport type AdminSignArticleSnapshotMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminUnbanUserMutation */\nexport type AdminUnbanUserMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminUnblockArticleMutation */\nexport type AdminUnblockArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminUpdateAnnouncementMutation */\nexport type AdminUpdateAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  content: Scalars['String'];\n  messageType: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminUpdateAnnouncementMutation */\nexport type AdminUpdateAnnouncementMutationPayload = {\n  __typename?: 'AdminUpdateAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminUpdateBonusMutation */\nexport type AdminUpdateBonusMutationInput = {\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  amount: Scalars['Float'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminUpdateBonusMutation */\nexport type AdminUpdateBonusMutationPayload = {\n  __typename?: 'AdminUpdateBonusMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Announcement = {\n  __typename?: 'Announcement';\n  content: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  deliveredAt?: Maybe<Scalars['ISO8601DateTime']>;\n  id: Scalars['Int'];\n  messageType: Scalars['String'];\n  state: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for Announcement. */\nexport type AnnouncementConnection = {\n  __typename?: 'AnnouncementConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<AnnouncementEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Announcement>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type AnnouncementEdge = {\n  __typename?: 'AnnouncementEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Announcement>;\n};\n\nexport type Article = {\n  __typename?: 'Article';\n  assetId: Scalars['String'];\n  author: User;\n  authorRevenueTotal: Scalars['Float'];\n  authorized?: Maybe<Scalars['Boolean']>;\n  buyOrders: OrderConnection;\n  buyers: UserConnection;\n  commentingSubscribed?: Maybe<Scalars['Boolean']>;\n  comments: CommentConnection;\n  commentsCount: Scalars['Int'];\n  content?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  currency: Currency;\n  downvoted?: Maybe<Scalars['Boolean']>;\n  downvotesCount: Scalars['Int'];\n  id: Scalars['ID'];\n  intro: Scalars['String'];\n  myShare?: Maybe<Scalars['Float']>;\n  ordersCount: Scalars['Int'];\n  partialContent?: Maybe<Scalars['String']>;\n  paymentTraceId?: Maybe<Scalars['String']>;\n  price: Scalars['Float'];\n  priceUsd?: Maybe<Scalars['Float']>;\n  randomReaders: Array<User>;\n  readerRevenueTotal: Scalars['Float'];\n  readers: UserConnection;\n  revenue: Scalars['Float'];\n  revenueUsd: Scalars['Float'];\n  rewardOrders: OrderConnection;\n  rewarders: UserConnection;\n  signatureUrl?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  swappable?: Maybe<Scalars['Boolean']>;\n  tagNames?: Maybe<Array<Scalars['String']>>;\n  tags: Array<Tag>;\n  tagsCount: Scalars['Int'];\n  title: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  upvoteRatio?: Maybe<Scalars['Int']>;\n  upvoted?: Maybe<Scalars['Boolean']>;\n  upvotesCount: Scalars['Int'];\n  uuid: Scalars['ID'];\n  wallet?: Maybe<MixinNetworkUser>;\n  walletId?: Maybe<Scalars['String']>;\n  wordsCount: Scalars['Int'];\n};\n\n\nexport type ArticleBuyOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleBuyersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleCommentsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleReadersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleRewardOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleRewardersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Article. */\nexport type ArticleConnection = {\n  __typename?: 'ArticleConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ArticleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Article>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ArticleEdge = {\n  __typename?: 'ArticleEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Article>;\n};\n\nexport type ArticleSnapshot = {\n  __typename?: 'ArticleSnapshot';\n  article: Article;\n  articleUuid: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  fileHash: Scalars['String'];\n  id: Scalars['ID'];\n  requestedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  signatureUrl?: Maybe<Scalars['String']>;\n  signedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  state: Scalars['String'];\n  txId?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for ArticleSnapshot. */\nexport type ArticleSnapshotConnection = {\n  __typename?: 'ArticleSnapshotConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ArticleSnapshotEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ArticleSnapshot>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type ArticleSnapshotEdge = {\n  __typename?: 'ArticleSnapshotEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ArticleSnapshot>;\n};\n\nexport type Asset = {\n  __typename?: 'Asset';\n  assetId: Scalars['ID'];\n  balance?: Maybe<Scalars['String']>;\n  chainId?: Maybe<Scalars['ID']>;\n  changeBtc?: Maybe<Scalars['String']>;\n  changeUsd?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  iconUrl?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  priceBtc?: Maybe<Scalars['String']>;\n  priceUsd?: Maybe<Scalars['String']>;\n  symbol?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Bonus = {\n  __typename?: 'Bonus';\n  amount: Scalars['Float'];\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  state: Scalars['String'];\n  title: Scalars['String'];\n  traceId: Scalars['String'];\n  transfer?: Maybe<Transfer>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user: User;\n};\n\n/** The connection type for Bonus. */\nexport type BonusConnection = {\n  __typename?: 'BonusConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BonusEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Bonus>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type BonusEdge = {\n  __typename?: 'BonusEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Bonus>;\n};\n\n/** Autogenerated input type of ClearNotificationsMutation */\nexport type ClearNotificationsMutationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\nexport type Comment = {\n  __typename?: 'Comment';\n  author?: Maybe<User>;\n  commentable: Article;\n  content?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  deletedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  downvoted?: Maybe<Scalars['Boolean']>;\n  downvotesCount: Scalars['Int'];\n  id: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  upvoted?: Maybe<Scalars['Boolean']>;\n  upvotesCount: Scalars['Int'];\n};\n\n/** The connection type for Comment. */\nexport type CommentConnection = {\n  __typename?: 'CommentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Comment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CommentEdge = {\n  __typename?: 'CommentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Comment>;\n};\n\n/** Autogenerated input type of CreateAccessTokenMutation */\nexport type CreateAccessTokenMutationInput = {\n  memo: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of CreateArticleMutation */\nexport type CreateArticleMutationInput = {\n  title: Scalars['String'];\n  intro: Scalars['String'];\n  content: Scalars['String'];\n  price: Scalars['Float'];\n  state: Scalars['String'];\n  assetId: Scalars['String'];\n  tagNames?: Maybe<Array<Scalars['String']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateArticleMutation */\nexport type CreateArticleMutationPayload = {\n  __typename?: 'CreateArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of CreateCommentMutation */\nexport type CreateCommentMutationInput = {\n  commentableId: Scalars['ID'];\n  commentableType: Scalars['String'];\n  content: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateCommentMutation */\nexport type CreateCommentMutationPayload = {\n  __typename?: 'CreateCommentMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  commentable: Article;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Currency = {\n  __typename?: 'Currency';\n  assetId: Scalars['String'];\n  chainId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  iconUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  priceBtc?: Maybe<Scalars['Float']>;\n  priceUsd?: Maybe<Scalars['Float']>;\n  symbol: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of DeleteAccessTokenMutation */\nexport type DeleteAccessTokenMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DownvoteArticleMutation */\nexport type DownvoteArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DownvoteCommentMutation */\nexport type DownvoteCommentMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of HideArticleMutation */\nexport type HideArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of HideArticleMutation */\nexport type HideArticleMutationPayload = {\n  __typename?: 'HideArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n\nexport type MixinMessage = {\n  __typename?: 'MixinMessage';\n  action: Scalars['String'];\n  category: Scalars['String'];\n  content: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['Int'];\n  processedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user?: Maybe<User>;\n  userId?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for MixinMessage. */\nexport type MixinMessageConnection = {\n  __typename?: 'MixinMessageConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MixinMessageEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<MixinMessage>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type MixinMessageEdge = {\n  __typename?: 'MixinMessageEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<MixinMessage>;\n};\n\nexport type MixinNetworkSnapshot = {\n  __typename?: 'MixinNetworkSnapshot';\n  amount: Scalars['Float'];\n  article?: Maybe<Article>;\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  currency: Currency;\n  data?: Maybe<Scalars['String']>;\n  id: Scalars['Int'];\n  opponent?: Maybe<User>;\n  opponentId?: Maybe<Scalars['String']>;\n  processedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  snapshotId: Scalars['String'];\n  traceId: Scalars['ID'];\n  transferredAt: Scalars['ISO8601DateTime'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  userId: Scalars['String'];\n};\n\n/** The connection type for MixinNetworkSnapshot. */\nexport type MixinNetworkSnapshotConnection = {\n  __typename?: 'MixinNetworkSnapshotConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MixinNetworkSnapshotEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<MixinNetworkSnapshot>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type MixinNetworkSnapshotEdge = {\n  __typename?: 'MixinNetworkSnapshotEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<MixinNetworkSnapshot>;\n};\n\nexport type MixinNetworkUser = {\n  __typename?: 'MixinNetworkUser';\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  owner?: Maybe<MixinNetworkUserOwnerUnion>;\n  ownerId: Scalars['Int'];\n  ownerType: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  uuid: Scalars['ID'];\n};\n\n/** Mixin network user' owner */\nexport type MixinNetworkUserOwnerUnion = Article;\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  adminBanUser?: Maybe<User>;\n  adminBlockArticle?: Maybe<Article>;\n  adminCreateAnnouncement?: Maybe<AdminCreateAnnouncementMutationPayload>;\n  adminCreateBonus?: Maybe<AdminCreateBonusMutationPayload>;\n  adminDeleteAnnouncement?: Maybe<AdminDeleteAnnouncementMutationPayload>;\n  adminDeleteComment?: Maybe<AdminDeleteCommentMutationPayload>;\n  adminDeliverAnnouncement?: Maybe<AdminDeliverAnnouncementMutationPayload>;\n  adminDeliverBonus?: Maybe<Bonus>;\n  adminLogin?: Maybe<AdminLoginMutationPayload>;\n  adminPreviewAnnouncement?: Maybe<AdminPreviewAnnouncementMutationPayload>;\n  adminRecoverComment?: Maybe<AdminRecoverCommentMutationPayload>;\n  adminSignArticleSnapshot?: Maybe<ArticleSnapshot>;\n  adminUnbanUser?: Maybe<User>;\n  adminUnblockArticle?: Maybe<Article>;\n  adminUpdateAnnouncement?: Maybe<AdminUpdateAnnouncementMutationPayload>;\n  adminUpdateBonus?: Maybe<AdminUpdateBonusMutationPayload>;\n  clearNotifications?: Maybe<Scalars['Boolean']>;\n  createAccessToken?: Maybe<AccessToken>;\n  createArticle?: Maybe<CreateArticleMutationPayload>;\n  createComment?: Maybe<CreateCommentMutationPayload>;\n  createdAt: Scalars['ISO8601DateTime'];\n  deleteAccessToken?: Maybe<Scalars['Boolean']>;\n  downvoteArticle?: Maybe<Article>;\n  downvoteComment?: Maybe<Comment>;\n  hideArticle?: Maybe<HideArticleMutationPayload>;\n  publishArticle?: Maybe<PublishArticleMutationPayload>;\n  readNotification?: Maybe<Notification>;\n  readNotifications?: Maybe<Scalars['Boolean']>;\n  switchLocale?: Maybe<Scalars['Boolean']>;\n  toggleAuthoringSubscribeUserAction?: Maybe<ToggleAuthoringSubscribeUserActionMutationPayload>;\n  toggleCommentingSubscribeArticleAction?: Maybe<Article>;\n  toggleReadingSubscribeUserAction?: Maybe<ToggleReadingSubscribeUserActionMutationPayload>;\n  toggleSubscribeTagAction?: Maybe<Tag>;\n  updateArticle?: Maybe<UpdateArticleMutationPayload>;\n  updateNotificationSetting?: Maybe<NotificationSetting>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  upvoteArticle?: Maybe<Article>;\n  upvoteComment?: Maybe<Comment>;\n};\n\n\nexport type MutationAdminBanUserArgs = {\n  input: AdminBanUserMutationInput;\n};\n\n\nexport type MutationAdminBlockArticleArgs = {\n  input: AdminBlockArticleMutationInput;\n};\n\n\nexport type MutationAdminCreateAnnouncementArgs = {\n  input: AdminCreateAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminCreateBonusArgs = {\n  input: AdminCreateBonusMutationInput;\n};\n\n\nexport type MutationAdminDeleteAnnouncementArgs = {\n  input: AdminDeleteAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminDeleteCommentArgs = {\n  input: AdminDeleteCommentMutationInput;\n};\n\n\nexport type MutationAdminDeliverAnnouncementArgs = {\n  input: AdminDeliverAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminDeliverBonusArgs = {\n  input: AdminDeliverBonusMutationInput;\n};\n\n\nexport type MutationAdminLoginArgs = {\n  input: AdminLoginMutationInput;\n};\n\n\nexport type MutationAdminPreviewAnnouncementArgs = {\n  input: AdminPreviewAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminRecoverCommentArgs = {\n  input: AdminRecoverCommentMutationInput;\n};\n\n\nexport type MutationAdminSignArticleSnapshotArgs = {\n  input: AdminSignArticleSnapshotMutationInput;\n};\n\n\nexport type MutationAdminUnbanUserArgs = {\n  input: AdminUnbanUserMutationInput;\n};\n\n\nexport type MutationAdminUnblockArticleArgs = {\n  input: AdminUnblockArticleMutationInput;\n};\n\n\nexport type MutationAdminUpdateAnnouncementArgs = {\n  input: AdminUpdateAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminUpdateBonusArgs = {\n  input: AdminUpdateBonusMutationInput;\n};\n\n\nexport type MutationClearNotificationsArgs = {\n  input: ClearNotificationsMutationInput;\n};\n\n\nexport type MutationCreateAccessTokenArgs = {\n  input: CreateAccessTokenMutationInput;\n};\n\n\nexport type MutationCreateArticleArgs = {\n  input: CreateArticleMutationInput;\n};\n\n\nexport type MutationCreateCommentArgs = {\n  input: CreateCommentMutationInput;\n};\n\n\nexport type MutationDeleteAccessTokenArgs = {\n  input: DeleteAccessTokenMutationInput;\n};\n\n\nexport type MutationDownvoteArticleArgs = {\n  input: DownvoteArticleMutationInput;\n};\n\n\nexport type MutationDownvoteCommentArgs = {\n  input: DownvoteCommentMutationInput;\n};\n\n\nexport type MutationHideArticleArgs = {\n  input: HideArticleMutationInput;\n};\n\n\nexport type MutationPublishArticleArgs = {\n  input: PublishArticleMutationInput;\n};\n\n\nexport type MutationReadNotificationArgs = {\n  input: ReadNotificationMutationInput;\n};\n\n\nexport type MutationReadNotificationsArgs = {\n  input: ReadNotificationsMutationInput;\n};\n\n\nexport type MutationSwitchLocaleArgs = {\n  input: SwitchLocaleMutationInput;\n};\n\n\nexport type MutationToggleAuthoringSubscribeUserActionArgs = {\n  input: ToggleAuthoringSubscribeUserActionMutationInput;\n};\n\n\nexport type MutationToggleCommentingSubscribeArticleActionArgs = {\n  input: ToggleCommentingSubscribeArticleActionMutationInput;\n};\n\n\nexport type MutationToggleReadingSubscribeUserActionArgs = {\n  input: ToggleReadingSubscribeUserActionMutationInput;\n};\n\n\nexport type MutationToggleSubscribeTagActionArgs = {\n  input: ToggleSubscribeTagActionMutationInput;\n};\n\n\nexport type MutationUpdateArticleArgs = {\n  input: UpdateArticleMutationInput;\n};\n\n\nexport type MutationUpdateNotificationSettingArgs = {\n  input: UpdateNotificationSettingMutationInput;\n};\n\n\nexport type MutationUpvoteArticleArgs = {\n  input: UpvoteArticleMutationInput;\n};\n\n\nexport type MutationUpvoteCommentArgs = {\n  input: UpvoteCommentMutationInput;\n};\n\nexport type Notification = {\n  __typename?: 'Notification';\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  message?: Maybe<Scalars['String']>;\n  readAt?: Maybe<Scalars['ISO8601DateTime']>;\n  recipient: User;\n  type: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  url?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  __typename?: 'NotificationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  __typename?: 'NotificationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type NotificationSetting = {\n  __typename?: 'NotificationSetting';\n  articleBoughtMixinBot?: Maybe<Scalars['Boolean']>;\n  articleBoughtWeb?: Maybe<Scalars['Boolean']>;\n  articleBoughtWebhook?: Maybe<Scalars['Boolean']>;\n  articlePublishedMixinBot?: Maybe<Scalars['Boolean']>;\n  articlePublishedWeb?: Maybe<Scalars['Boolean']>;\n  articlePublishedWebhook?: Maybe<Scalars['Boolean']>;\n  articleRewardedMixinBot?: Maybe<Scalars['Boolean']>;\n  articleRewardedWeb?: Maybe<Scalars['Boolean']>;\n  articleRewardedWebhook?: Maybe<Scalars['Boolean']>;\n  commentCreatedMixinBot?: Maybe<Scalars['Boolean']>;\n  commentCreatedWeb?: Maybe<Scalars['Boolean']>;\n  commentCreatedWebhook?: Maybe<Scalars['Boolean']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  taggingCreatedMixinBot?: Maybe<Scalars['Boolean']>;\n  taggingCreatedWeb?: Maybe<Scalars['Boolean']>;\n  taggingCreatedWebhook?: Maybe<Scalars['Boolean']>;\n  transferProcessedMixinBot?: Maybe<Scalars['Boolean']>;\n  transferProcessedWeb?: Maybe<Scalars['Boolean']>;\n  transferProcessedWebhook?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user: User;\n  webhookUrl?: Maybe<Scalars['String']>;\n};\n\nexport type Order = {\n  __typename?: 'Order';\n  buyer: User;\n  createdAt: Scalars['ISO8601DateTime'];\n  currency: Currency;\n  id: Scalars['ID'];\n  item: OrderItemUnion;\n  itemId: Scalars['ID'];\n  itemType: Scalars['String'];\n  orderType: Scalars['String'];\n  seller: User;\n  state: Scalars['String'];\n  total: Scalars['Float'];\n  traceId: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for Order. */\nexport type OrderConnection = {\n  __typename?: 'OrderConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Order>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderEdge = {\n  __typename?: 'OrderEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Order>;\n};\n\n/** order' item */\nexport type OrderItemUnion = Article;\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type Payment = {\n  __typename?: 'Payment';\n  amount: Scalars['Float'];\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  currency?: Maybe<Currency>;\n  memo?: Maybe<Scalars['String']>;\n  order?: Maybe<Order>;\n  payer: User;\n  snapshotId: Scalars['String'];\n  state: Scalars['String'];\n  traceId: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for Payment. */\nexport type PaymentConnection = {\n  __typename?: 'PaymentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PaymentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Payment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PaymentEdge = {\n  __typename?: 'PaymentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Payment>;\n};\n\nexport type PrsAccount = {\n  __typename?: 'PrsAccount';\n  account?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  publicKey: Scalars['String'];\n  status: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user: User;\n};\n\n/** The connection type for PrsAccount. */\nexport type PrsAccountConnection = {\n  __typename?: 'PrsAccountConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PrsAccountEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PrsAccount>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type PrsAccountEdge = {\n  __typename?: 'PrsAccountEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PrsAccount>;\n};\n\nexport type PrsTransaction = {\n  __typename?: 'PrsTransaction';\n  blockNum: Scalars['Int'];\n  blockType: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  data?: Maybe<Scalars['String']>;\n  hashStr: Scalars['String'];\n  id: Scalars['ID'];\n  processedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  prsAccount?: Maybe<PrsAccount>;\n  signature: Scalars['String'];\n  transactionId: Scalars['String'];\n  txId: Scalars['String'];\n  type?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  userAddress: Scalars['String'];\n};\n\n/** The connection type for PrsTransaction. */\nexport type PrsTransactionConnection = {\n  __typename?: 'PrsTransactionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PrsTransactionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PrsTransaction>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type PrsTransactionEdge = {\n  __typename?: 'PrsTransactionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PrsTransaction>;\n};\n\n/** Autogenerated input type of PublishArticleMutation */\nexport type PublishArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of PublishArticleMutation */\nexport type PublishArticleMutationPayload = {\n  __typename?: 'PublishArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  adminAnnouncementConnection: AnnouncementConnection;\n  adminArticle: Article;\n  adminArticleConnection: ArticleConnection;\n  adminArticleSnapshotConnection: ArticleSnapshotConnection;\n  adminBonusConnection: BonusConnection;\n  adminCommentConnection: CommentConnection;\n  adminMixinMessageConnection: MixinMessageConnection;\n  adminMixinNetworkSnapshotConnection: MixinNetworkSnapshotConnection;\n  adminOrderConnection: OrderConnection;\n  adminPaymentConnection: PaymentConnection;\n  adminPrsAccountConnection: PrsAccountConnection;\n  adminPrsTransactionConnection: PrsTransactionConnection;\n  adminSwapOrderConnection: SwapOrderConnection;\n  adminTransferConnection: TransferConnection;\n  adminUser?: Maybe<User>;\n  adminUserConnection: UserConnection;\n  adminWalletBalance: Array<Asset>;\n  article?: Maybe<Article>;\n  articleChart: Scalars['String'];\n  articleConnection: ArticleConnection;\n  commentConnection: CommentConnection;\n  createdAt: Scalars['ISO8601DateTime'];\n  myAccessTokenConnection: AccessTokenConnection;\n  myArticle?: Maybe<Article>;\n  myArticleConnection: ArticleConnection;\n  myArticleOrderConnection?: Maybe<OrderConnection>;\n  myAuthoringSubscriptionConnection: UserConnection;\n  myCommentingSubscriptionConnection: ArticleConnection;\n  myNotificationConnection: NotificationConnection;\n  myNotificationSetting: NotificationSetting;\n  myPaymentConnection: PaymentConnection;\n  myReadingSubscriptionConnection: UserConnection;\n  myStatistics: UserStatistics;\n  mySwapOrderConnection: SwapOrderConnection;\n  myTagSubscriptionConnection: TagConnection;\n  myTransferConnection: TransferConnection;\n  payment?: Maybe<Payment>;\n  pricableCurrencies: Array<Currency>;\n  revenueChart: Scalars['String'];\n  statistics: Statistics;\n  swapPreOrder?: Maybe<SwapPreOrder>;\n  swappableCurrencies: Array<Currency>;\n  tag?: Maybe<Tag>;\n  tagConnection: TagConnection;\n  transferConnection: TransferConnection;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user?: Maybe<User>;\n  userArticleConnection: ArticleConnection;\n  userChart: Scalars['String'];\n};\n\n\nexport type QueryAdminAnnouncementConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminArticleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryAdminArticleConnectionArgs = {\n  query?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminArticleSnapshotConnectionArgs = {\n  articleUuid?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminBonusConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminCommentConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminMixinMessageConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminMixinNetworkSnapshotConnectionArgs = {\n  userId?: Maybe<Scalars['String']>;\n  filter?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminOrderConnectionArgs = {\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminPaymentConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminPrsAccountConnectionArgs = {\n  query?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminPrsTransactionConnectionArgs = {\n  type?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminSwapOrderConnectionArgs = {\n  userId?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminTransferConnectionArgs = {\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<Scalars['String']>;\n  sourceId?: Maybe<Scalars['ID']>;\n  sourceType?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminUserArgs = {\n  mixinId: Scalars['ID'];\n};\n\n\nexport type QueryAdminUserConnectionArgs = {\n  query?: Maybe<Scalars['String']>;\n  orderBy?: Maybe<Scalars['String']>;\n  filter?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminWalletBalanceArgs = {\n  userId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryArticleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryArticleConnectionArgs = {\n  query?: Maybe<Scalars['String']>;\n  tagId?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  order: Scalars['String'];\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryCommentConnectionArgs = {\n  commentableType?: Maybe<Scalars['String']>;\n  commentableId?: Maybe<Scalars['ID']>;\n  authorMixinId?: Maybe<Scalars['String']>;\n  orderBy?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyAccessTokenConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyArticleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryMyArticleConnectionArgs = {\n  type: Scalars['String'];\n  state?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyArticleOrderConnectionArgs = {\n  uuid: Scalars['ID'];\n  orderType: Scalars['String'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyAuthoringSubscriptionConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyCommentingSubscriptionConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyNotificationConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyPaymentConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyReadingSubscriptionConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMySwapOrderConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyTagSubscriptionConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyTransferConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  transferType?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPaymentArgs = {\n  traceId: Scalars['ID'];\n};\n\n\nexport type QuerySwapPreOrderArgs = {\n  payAssetId: Scalars['String'];\n  fillAssetId: Scalars['String'];\n  amount: Scalars['Float'];\n};\n\n\nexport type QueryTagArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryTagConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTransferConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryUserArgs = {\n  mixinId: Scalars['ID'];\n};\n\n\nexport type QueryUserArticleConnectionArgs = {\n  mixinId: Scalars['ID'];\n  type: Scalars['String'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** Autogenerated input type of ReadNotificationMutation */\nexport type ReadNotificationMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of ReadNotificationsMutation */\nexport type ReadNotificationsMutationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\nexport type Statistics = {\n  __typename?: 'Statistics';\n  articlesCount: Scalars['Int'];\n  authorRevenueTotal: Scalars['Float'];\n  createdAt: Scalars['ISO8601DateTime'];\n  readerRevenueTotal: Scalars['Float'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  usersCount: Scalars['Int'];\n};\n\nexport type SwapOrder = {\n  __typename?: 'SwapOrder';\n  amount?: Maybe<Scalars['Float']>;\n  article?: Maybe<Article>;\n  createdAt: Scalars['ISO8601DateTime'];\n  fillAsset: Currency;\n  fillAssetId: Scalars['String'];\n  funds?: Maybe<Scalars['Float']>;\n  id: Scalars['ID'];\n  minAmount?: Maybe<Scalars['Float']>;\n  payAsset: Currency;\n  payAssetId: Scalars['String'];\n  payer: User;\n  payment: Payment;\n  state: Scalars['String'];\n  traceId: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for SwapOrder. */\nexport type SwapOrderConnection = {\n  __typename?: 'SwapOrderConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SwapOrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SwapOrder>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SwapOrderEdge = {\n  __typename?: 'SwapOrderEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SwapOrder>;\n};\n\nexport type SwapPreOrder = {\n  __typename?: 'SwapPreOrder';\n  amount: Scalars['Float'];\n  createdAt: Scalars['ISO8601DateTime'];\n  fillAssetId: Scalars['String'];\n  funds: Scalars['Float'];\n  minAmount: Scalars['Float'];\n  payAssetId: Scalars['String'];\n  priceImpact?: Maybe<Scalars['Float']>;\n  routePrice?: Maybe<Scalars['Float']>;\n  state: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of SwitchLocaleMutation */\nexport type SwitchLocaleMutationInput = {\n  locale: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\nexport type Tag = {\n  __typename?: 'Tag';\n  articlesCount: Scalars['Int'];\n  color?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  subscribed?: Maybe<Scalars['Boolean']>;\n  subscribersCount: Scalars['Int'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for Tag. */\nexport type TagConnection = {\n  __typename?: 'TagConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TagEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Tag>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TagEdge = {\n  __typename?: 'TagEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Tag>;\n};\n\n/** Autogenerated input type of ToggleAuthoringSubscribeUserActionMutation */\nexport type ToggleAuthoringSubscribeUserActionMutationInput = {\n  mixinId: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ToggleAuthoringSubscribeUserActionMutation */\nexport type ToggleAuthoringSubscribeUserActionMutationPayload = {\n  __typename?: 'ToggleAuthoringSubscribeUserActionMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of ToggleCommentingSubscribeArticleActionMutation */\nexport type ToggleCommentingSubscribeArticleActionMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of ToggleReadingSubscribeUserActionMutation */\nexport type ToggleReadingSubscribeUserActionMutationInput = {\n  mixinId: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ToggleReadingSubscribeUserActionMutation */\nexport type ToggleReadingSubscribeUserActionMutationPayload = {\n  __typename?: 'ToggleReadingSubscribeUserActionMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of ToggleSubscribeTagActionMutation */\nexport type ToggleSubscribeTagActionMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\nexport type Transfer = {\n  __typename?: 'Transfer';\n  amount: Scalars['Float'];\n  article?: Maybe<Article>;\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  currency?: Maybe<Currency>;\n  memo?: Maybe<Scalars['String']>;\n  opponentId?: Maybe<Scalars['String']>;\n  processedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  recipient?: Maybe<User>;\n  snapshotId?: Maybe<Scalars['String']>;\n  traceId: Scalars['ID'];\n  transferType: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  walletId?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for Transfer. */\nexport type TransferConnection = {\n  __typename?: 'TransferConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TransferEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Transfer>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TransferEdge = {\n  __typename?: 'TransferEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Transfer>;\n};\n\n/** Autogenerated input type of UpdateArticleMutation */\nexport type UpdateArticleMutationInput = {\n  uuid: Scalars['ID'];\n  title?: Maybe<Scalars['String']>;\n  intro?: Maybe<Scalars['String']>;\n  content?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['Float']>;\n  tagNames?: Maybe<Array<Scalars['String']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateArticleMutation */\nexport type UpdateArticleMutationPayload = {\n  __typename?: 'UpdateArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of UpdateNotificationSettingMutation */\nexport type UpdateNotificationSettingMutationInput = {\n  webhookUrl?: Maybe<Scalars['String']>;\n  articlePublishedWeb?: Maybe<Scalars['Boolean']>;\n  articlePublishedMixinBot?: Maybe<Scalars['Boolean']>;\n  articlePublishedWebhook?: Maybe<Scalars['Boolean']>;\n  articleBoughtWeb?: Maybe<Scalars['Boolean']>;\n  articleBoughtMixinBot?: Maybe<Scalars['Boolean']>;\n  articleBoughtWebhook?: Maybe<Scalars['Boolean']>;\n  articleRewardedWeb?: Maybe<Scalars['Boolean']>;\n  articleRewardedMixinBot?: Maybe<Scalars['Boolean']>;\n  articleRewardedWebhook?: Maybe<Scalars['Boolean']>;\n  commentCreatedWeb?: Maybe<Scalars['Boolean']>;\n  commentCreatedMixinBot?: Maybe<Scalars['Boolean']>;\n  commentCreatedWebhook?: Maybe<Scalars['Boolean']>;\n  taggingCreatedWeb?: Maybe<Scalars['Boolean']>;\n  taggingCreatedMixinBot?: Maybe<Scalars['Boolean']>;\n  taggingCreatedWebhook?: Maybe<Scalars['Boolean']>;\n  transferProcessedWeb?: Maybe<Scalars['Boolean']>;\n  transferProcessedMixinBot?: Maybe<Scalars['Boolean']>;\n  transferProcessedWebhook?: Maybe<Scalars['Boolean']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpvoteArticleMutation */\nexport type UpvoteArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpvoteCommentMutation */\nexport type UpvoteCommentMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  articles: ArticleConnection;\n  authoringSubscribed?: Maybe<Scalars['Boolean']>;\n  avatarUrl: Scalars['String'];\n  bannedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  bio?: Maybe<Scalars['String']>;\n  comments: CommentConnection;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  locale?: Maybe<Scalars['String']>;\n  mixinId: Scalars['ID'];\n  mixinUuid: Scalars['String'];\n  name: Scalars['String'];\n  prsAccount?: Maybe<PrsAccount>;\n  readingSubscribed?: Maybe<Scalars['Boolean']>;\n  statistics: UserStatistics;\n  unreadNotificationsCount: Scalars['Int'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  walletId?: Maybe<Scalars['String']>;\n};\n\n\nexport type UserArticlesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type UserCommentsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for User. */\nexport type UserConnection = {\n  __typename?: 'UserConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type UserEdge = {\n  __typename?: 'UserEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n};\n\nexport type UserStatistics = {\n  __typename?: 'UserStatistics';\n  articlesCount?: Maybe<Scalars['Int']>;\n  authorRevenueTotalBtc?: Maybe<Scalars['Float']>;\n  authorRevenueTotalPrs?: Maybe<Scalars['Float']>;\n  authorRevenueTotalUsd?: Maybe<Scalars['Float']>;\n  boughtArticlesCount?: Maybe<Scalars['Int']>;\n  commentsCount?: Maybe<Scalars['Int']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  paymentTotalBtc?: Maybe<Scalars['Float']>;\n  paymentTotalPrs?: Maybe<Scalars['Float']>;\n  paymentTotalUsd?: Maybe<Scalars['Float']>;\n  readerRevenueTotalBtc?: Maybe<Scalars['Float']>;\n  readerRevenueTotalPrs?: Maybe<Scalars['Float']>;\n  readerRevenueTotalUsd?: Maybe<Scalars['Float']>;\n  revenueTotalBtc?: Maybe<Scalars['Float']>;\n  revenueTotalPrs?: Maybe<Scalars['Float']>;\n  revenueTotalUsd?: Maybe<Scalars['Float']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n\nexport const AdminBanUserDocument = gql`\n    mutation AdminBanUser($input: AdminBanUserMutationInput!) {\n  adminBanUser(input: $input) {\n    id\n    bannedAt\n  }\n}\n    `;\nexport type AdminBanUserMutationFn = Apollo.MutationFunction<AdminBanUserMutation, AdminBanUserMutationVariables>;\n\n/**\n * __useAdminBanUserMutation__\n *\n * To run a mutation, you first call `useAdminBanUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminBanUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminBanUserMutation, { data, loading, error }] = useAdminBanUserMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminBanUserMutation(baseOptions?: Apollo.MutationHookOptions<AdminBanUserMutation, AdminBanUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminBanUserMutation, AdminBanUserMutationVariables>(AdminBanUserDocument, options);\n      }\nexport type AdminBanUserMutationHookResult = ReturnType<typeof useAdminBanUserMutation>;\nexport type AdminBanUserMutationResult = Apollo.MutationResult<AdminBanUserMutation>;\nexport type AdminBanUserMutationOptions = Apollo.BaseMutationOptions<AdminBanUserMutation, AdminBanUserMutationVariables>;\nexport const AdminBlockArticleDocument = gql`\n    mutation AdminBlockArticle($input: AdminBlockArticleMutationInput!) {\n  adminBlockArticle(input: $input) {\n    id\n    uuid\n    state\n  }\n}\n    `;\nexport type AdminBlockArticleMutationFn = Apollo.MutationFunction<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>;\n\n/**\n * __useAdminBlockArticleMutation__\n *\n * To run a mutation, you first call `useAdminBlockArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminBlockArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminBlockArticleMutation, { data, loading, error }] = useAdminBlockArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminBlockArticleMutation(baseOptions?: Apollo.MutationHookOptions<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>(AdminBlockArticleDocument, options);\n      }\nexport type AdminBlockArticleMutationHookResult = ReturnType<typeof useAdminBlockArticleMutation>;\nexport type AdminBlockArticleMutationResult = Apollo.MutationResult<AdminBlockArticleMutation>;\nexport type AdminBlockArticleMutationOptions = Apollo.BaseMutationOptions<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>;\nexport const AdminCreateAnouncementDocument = gql`\n    mutation AdminCreateAnouncement($input: AdminCreateAnnouncementMutationInput!) {\n  adminCreateAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminCreateAnouncementMutationFn = Apollo.MutationFunction<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>;\n\n/**\n * __useAdminCreateAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminCreateAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminCreateAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminCreateAnouncementMutation, { data, loading, error }] = useAdminCreateAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminCreateAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>(AdminCreateAnouncementDocument, options);\n      }\nexport type AdminCreateAnouncementMutationHookResult = ReturnType<typeof useAdminCreateAnouncementMutation>;\nexport type AdminCreateAnouncementMutationResult = Apollo.MutationResult<AdminCreateAnouncementMutation>;\nexport type AdminCreateAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>;\nexport const AdminCreateBonusDocument = gql`\n    mutation AdminCreateBonus($input: AdminCreateBonusMutationInput!) {\n  adminCreateBonus(input: $input) {\n    error\n  }\n}\n    `;\nexport type AdminCreateBonusMutationFn = Apollo.MutationFunction<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>;\n\n/**\n * __useAdminCreateBonusMutation__\n *\n * To run a mutation, you first call `useAdminCreateBonusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminCreateBonusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminCreateBonusMutation, { data, loading, error }] = useAdminCreateBonusMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminCreateBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>(AdminCreateBonusDocument, options);\n      }\nexport type AdminCreateBonusMutationHookResult = ReturnType<typeof useAdminCreateBonusMutation>;\nexport type AdminCreateBonusMutationResult = Apollo.MutationResult<AdminCreateBonusMutation>;\nexport type AdminCreateBonusMutationOptions = Apollo.BaseMutationOptions<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>;\nexport const AdminDeleteAnouncementDocument = gql`\n    mutation AdminDeleteAnouncement($input: AdminDeleteAnnouncementMutationInput!) {\n  adminDeleteAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminDeleteAnouncementMutationFn = Apollo.MutationFunction<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>;\n\n/**\n * __useAdminDeleteAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminDeleteAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeleteAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeleteAnouncementMutation, { data, loading, error }] = useAdminDeleteAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeleteAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>(AdminDeleteAnouncementDocument, options);\n      }\nexport type AdminDeleteAnouncementMutationHookResult = ReturnType<typeof useAdminDeleteAnouncementMutation>;\nexport type AdminDeleteAnouncementMutationResult = Apollo.MutationResult<AdminDeleteAnouncementMutation>;\nexport type AdminDeleteAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>;\nexport const AdminDeleteCommentDocument = gql`\n    mutation AdminDeleteComment($input: AdminDeleteCommentMutationInput!) {\n  adminDeleteComment(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminDeleteCommentMutationFn = Apollo.MutationFunction<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>;\n\n/**\n * __useAdminDeleteCommentMutation__\n *\n * To run a mutation, you first call `useAdminDeleteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeleteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeleteCommentMutation, { data, loading, error }] = useAdminDeleteCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeleteCommentMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>(AdminDeleteCommentDocument, options);\n      }\nexport type AdminDeleteCommentMutationHookResult = ReturnType<typeof useAdminDeleteCommentMutation>;\nexport type AdminDeleteCommentMutationResult = Apollo.MutationResult<AdminDeleteCommentMutation>;\nexport type AdminDeleteCommentMutationOptions = Apollo.BaseMutationOptions<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>;\nexport const AdminDeliverAnouncementDocument = gql`\n    mutation AdminDeliverAnouncement($input: AdminDeliverAnnouncementMutationInput!) {\n  adminDeliverAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminDeliverAnouncementMutationFn = Apollo.MutationFunction<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>;\n\n/**\n * __useAdminDeliverAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminDeliverAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeliverAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeliverAnouncementMutation, { data, loading, error }] = useAdminDeliverAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeliverAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>(AdminDeliverAnouncementDocument, options);\n      }\nexport type AdminDeliverAnouncementMutationHookResult = ReturnType<typeof useAdminDeliverAnouncementMutation>;\nexport type AdminDeliverAnouncementMutationResult = Apollo.MutationResult<AdminDeliverAnouncementMutation>;\nexport type AdminDeliverAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>;\nexport const AdminDeliverBonusDocument = gql`\n    mutation AdminDeliverBonus($input: AdminDeliverBonusMutationInput!) {\n  adminDeliverBonus(input: $input) {\n    id\n    state\n  }\n}\n    `;\nexport type AdminDeliverBonusMutationFn = Apollo.MutationFunction<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>;\n\n/**\n * __useAdminDeliverBonusMutation__\n *\n * To run a mutation, you first call `useAdminDeliverBonusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeliverBonusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeliverBonusMutation, { data, loading, error }] = useAdminDeliverBonusMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeliverBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>(AdminDeliverBonusDocument, options);\n      }\nexport type AdminDeliverBonusMutationHookResult = ReturnType<typeof useAdminDeliverBonusMutation>;\nexport type AdminDeliverBonusMutationResult = Apollo.MutationResult<AdminDeliverBonusMutation>;\nexport type AdminDeliverBonusMutationOptions = Apollo.BaseMutationOptions<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>;\nexport const AdminLoginDocument = gql`\n    mutation AdminLogin($input: AdminLoginMutationInput!) {\n  adminLogin(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminLoginMutationFn = Apollo.MutationFunction<AdminLoginMutation, AdminLoginMutationVariables>;\n\n/**\n * __useAdminLoginMutation__\n *\n * To run a mutation, you first call `useAdminLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminLoginMutation, { data, loading, error }] = useAdminLoginMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminLoginMutation(baseOptions?: Apollo.MutationHookOptions<AdminLoginMutation, AdminLoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminLoginMutation, AdminLoginMutationVariables>(AdminLoginDocument, options);\n      }\nexport type AdminLoginMutationHookResult = ReturnType<typeof useAdminLoginMutation>;\nexport type AdminLoginMutationResult = Apollo.MutationResult<AdminLoginMutation>;\nexport type AdminLoginMutationOptions = Apollo.BaseMutationOptions<AdminLoginMutation, AdminLoginMutationVariables>;\nexport const AdminPreviewAnouncementDocument = gql`\n    mutation AdminPreviewAnouncement($input: AdminPreviewAnnouncementMutationInput!) {\n  adminPreviewAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminPreviewAnouncementMutationFn = Apollo.MutationFunction<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>;\n\n/**\n * __useAdminPreviewAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminPreviewAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminPreviewAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminPreviewAnouncementMutation, { data, loading, error }] = useAdminPreviewAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminPreviewAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>(AdminPreviewAnouncementDocument, options);\n      }\nexport type AdminPreviewAnouncementMutationHookResult = ReturnType<typeof useAdminPreviewAnouncementMutation>;\nexport type AdminPreviewAnouncementMutationResult = Apollo.MutationResult<AdminPreviewAnouncementMutation>;\nexport type AdminPreviewAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>;\nexport const AdminRecoverCommentDocument = gql`\n    mutation AdminRecoverComment($input: AdminRecoverCommentMutationInput!) {\n  adminRecoverComment(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminRecoverCommentMutationFn = Apollo.MutationFunction<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>;\n\n/**\n * __useAdminRecoverCommentMutation__\n *\n * To run a mutation, you first call `useAdminRecoverCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminRecoverCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminRecoverCommentMutation, { data, loading, error }] = useAdminRecoverCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminRecoverCommentMutation(baseOptions?: Apollo.MutationHookOptions<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>(AdminRecoverCommentDocument, options);\n      }\nexport type AdminRecoverCommentMutationHookResult = ReturnType<typeof useAdminRecoverCommentMutation>;\nexport type AdminRecoverCommentMutationResult = Apollo.MutationResult<AdminRecoverCommentMutation>;\nexport type AdminRecoverCommentMutationOptions = Apollo.BaseMutationOptions<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>;\nexport const AdminSignArticleSnapshotDocument = gql`\n    mutation AdminSignArticleSnapshot($input: AdminSignArticleSnapshotMutationInput!) {\n  adminSignArticleSnapshot(input: $input) {\n    id\n    state\n    requestedAt\n    signedAt\n  }\n}\n    `;\nexport type AdminSignArticleSnapshotMutationFn = Apollo.MutationFunction<AdminSignArticleSnapshotMutation, AdminSignArticleSnapshotMutationVariables>;\n\n/**\n * __useAdminSignArticleSnapshotMutation__\n *\n * To run a mutation, you first call `useAdminSignArticleSnapshotMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminSignArticleSnapshotMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminSignArticleSnapshotMutation, { data, loading, error }] = useAdminSignArticleSnapshotMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminSignArticleSnapshotMutation(baseOptions?: Apollo.MutationHookOptions<AdminSignArticleSnapshotMutation, AdminSignArticleSnapshotMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminSignArticleSnapshotMutation, AdminSignArticleSnapshotMutationVariables>(AdminSignArticleSnapshotDocument, options);\n      }\nexport type AdminSignArticleSnapshotMutationHookResult = ReturnType<typeof useAdminSignArticleSnapshotMutation>;\nexport type AdminSignArticleSnapshotMutationResult = Apollo.MutationResult<AdminSignArticleSnapshotMutation>;\nexport type AdminSignArticleSnapshotMutationOptions = Apollo.BaseMutationOptions<AdminSignArticleSnapshotMutation, AdminSignArticleSnapshotMutationVariables>;\nexport const AdminUnbanUserDocument = gql`\n    mutation AdminUnbanUser($input: AdminUnbanUserMutationInput!) {\n  adminUnbanUser(input: $input) {\n    id\n    bannedAt\n  }\n}\n    `;\nexport type AdminUnbanUserMutationFn = Apollo.MutationFunction<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>;\n\n/**\n * __useAdminUnbanUserMutation__\n *\n * To run a mutation, you first call `useAdminUnbanUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUnbanUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUnbanUserMutation, { data, loading, error }] = useAdminUnbanUserMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUnbanUserMutation(baseOptions?: Apollo.MutationHookOptions<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>(AdminUnbanUserDocument, options);\n      }\nexport type AdminUnbanUserMutationHookResult = ReturnType<typeof useAdminUnbanUserMutation>;\nexport type AdminUnbanUserMutationResult = Apollo.MutationResult<AdminUnbanUserMutation>;\nexport type AdminUnbanUserMutationOptions = Apollo.BaseMutationOptions<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>;\nexport const AdminUnblockArticleDocument = gql`\n    mutation AdminUnblockArticle($input: AdminUnblockArticleMutationInput!) {\n  adminUnblockArticle(input: $input) {\n    id\n    uuid\n    state\n  }\n}\n    `;\nexport type AdminUnblockArticleMutationFn = Apollo.MutationFunction<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>;\n\n/**\n * __useAdminUnblockArticleMutation__\n *\n * To run a mutation, you first call `useAdminUnblockArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUnblockArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUnblockArticleMutation, { data, loading, error }] = useAdminUnblockArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUnblockArticleMutation(baseOptions?: Apollo.MutationHookOptions<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>(AdminUnblockArticleDocument, options);\n      }\nexport type AdminUnblockArticleMutationHookResult = ReturnType<typeof useAdminUnblockArticleMutation>;\nexport type AdminUnblockArticleMutationResult = Apollo.MutationResult<AdminUnblockArticleMutation>;\nexport type AdminUnblockArticleMutationOptions = Apollo.BaseMutationOptions<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>;\nexport const AdminUpdateAnouncementDocument = gql`\n    mutation AdminUpdateAnouncement($input: AdminUpdateAnnouncementMutationInput!) {\n  adminUpdateAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminUpdateAnouncementMutationFn = Apollo.MutationFunction<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>;\n\n/**\n * __useAdminUpdateAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminUpdateAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUpdateAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUpdateAnouncementMutation, { data, loading, error }] = useAdminUpdateAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUpdateAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>(AdminUpdateAnouncementDocument, options);\n      }\nexport type AdminUpdateAnouncementMutationHookResult = ReturnType<typeof useAdminUpdateAnouncementMutation>;\nexport type AdminUpdateAnouncementMutationResult = Apollo.MutationResult<AdminUpdateAnouncementMutation>;\nexport type AdminUpdateAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>;\nexport const AdminUpdateBonusDocument = gql`\n    mutation AdminUpdateBonus($input: AdminUpdateBonusMutationInput!) {\n  adminUpdateBonus(input: $input) {\n    error\n  }\n}\n    `;\nexport type AdminUpdateBonusMutationFn = Apollo.MutationFunction<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>;\n\n/**\n * __useAdminUpdateBonusMutation__\n *\n * To run a mutation, you first call `useAdminUpdateBonusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUpdateBonusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUpdateBonusMutation, { data, loading, error }] = useAdminUpdateBonusMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUpdateBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>(AdminUpdateBonusDocument, options);\n      }\nexport type AdminUpdateBonusMutationHookResult = ReturnType<typeof useAdminUpdateBonusMutation>;\nexport type AdminUpdateBonusMutationResult = Apollo.MutationResult<AdminUpdateBonusMutation>;\nexport type AdminUpdateBonusMutationOptions = Apollo.BaseMutationOptions<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>;\nexport const AdminAnnouncementConnectionDocument = gql`\n    query AdminAnnouncementConnection($after: String) {\n  adminAnnouncementConnection(after: $after) {\n    nodes {\n      id\n      content\n      state\n      messageType\n      createdAt\n      deliveredAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminAnnouncementConnectionQuery__\n *\n * To run a query within a React component, call `useAdminAnnouncementConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminAnnouncementConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminAnnouncementConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminAnnouncementConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>(AdminAnnouncementConnectionDocument, options);\n      }\nexport function useAdminAnnouncementConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>(AdminAnnouncementConnectionDocument, options);\n        }\nexport type AdminAnnouncementConnectionQueryHookResult = ReturnType<typeof useAdminAnnouncementConnectionQuery>;\nexport type AdminAnnouncementConnectionLazyQueryHookResult = ReturnType<typeof useAdminAnnouncementConnectionLazyQuery>;\nexport type AdminAnnouncementConnectionQueryResult = Apollo.QueryResult<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>;\nexport const ArticleChartDocument = gql`\n    query ArticleChart {\n  articleChart\n}\n    `;\n\n/**\n * __useArticleChartQuery__\n *\n * To run a query within a React component, call `useArticleChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useArticleChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArticleChartQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useArticleChartQuery(baseOptions?: Apollo.QueryHookOptions<ArticleChartQuery, ArticleChartQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ArticleChartQuery, ArticleChartQueryVariables>(ArticleChartDocument, options);\n      }\nexport function useArticleChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleChartQuery, ArticleChartQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ArticleChartQuery, ArticleChartQueryVariables>(ArticleChartDocument, options);\n        }\nexport type ArticleChartQueryHookResult = ReturnType<typeof useArticleChartQuery>;\nexport type ArticleChartLazyQueryHookResult = ReturnType<typeof useArticleChartLazyQuery>;\nexport type ArticleChartQueryResult = Apollo.QueryResult<ArticleChartQuery, ArticleChartQueryVariables>;\nexport const AdminArticleConnectionDocument = gql`\n    query AdminArticleConnection($query: String, $state: String, $after: String) {\n  adminArticleConnection(query: $query, state: $state, after: $after) {\n    nodes {\n      id\n      uuid\n      title\n      intro\n      price\n      revenue\n      ordersCount\n      commentsCount\n      state\n      wallet {\n        name\n        uuid\n      }\n      author {\n        name\n        avatarUrl\n      }\n      currency {\n        assetId\n        symbol\n        iconUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminArticleConnectionQuery__\n *\n * To run a query within a React component, call `useAdminArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminArticleConnectionQuery({\n *   variables: {\n *      query: // value for 'query'\n *      state: // value for 'state'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminArticleConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>(AdminArticleConnectionDocument, options);\n      }\nexport function useAdminArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>(AdminArticleConnectionDocument, options);\n        }\nexport type AdminArticleConnectionQueryHookResult = ReturnType<typeof useAdminArticleConnectionQuery>;\nexport type AdminArticleConnectionLazyQueryHookResult = ReturnType<typeof useAdminArticleConnectionLazyQuery>;\nexport type AdminArticleConnectionQueryResult = Apollo.QueryResult<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>;\nexport const AdminArticleSnapshotConnectionDocument = gql`\n    query AdminArticleSnapshotConnection($articleUuid: String, $after: String) {\n  adminArticleSnapshotConnection(articleUuid: $articleUuid, after: $after) {\n    nodes {\n      id\n      state\n      articleUuid\n      fileHash\n      txId\n      signatureUrl\n      article {\n        uuid\n        title\n        author {\n          name\n        }\n      }\n      requestedAt\n      signedAt\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminArticleSnapshotConnectionQuery__\n *\n * To run a query within a React component, call `useAdminArticleSnapshotConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminArticleSnapshotConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminArticleSnapshotConnectionQuery({\n *   variables: {\n *      articleUuid: // value for 'articleUuid'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminArticleSnapshotConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminArticleSnapshotConnectionQuery, AdminArticleSnapshotConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminArticleSnapshotConnectionQuery, AdminArticleSnapshotConnectionQueryVariables>(AdminArticleSnapshotConnectionDocument, options);\n      }\nexport function useAdminArticleSnapshotConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArticleSnapshotConnectionQuery, AdminArticleSnapshotConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminArticleSnapshotConnectionQuery, AdminArticleSnapshotConnectionQueryVariables>(AdminArticleSnapshotConnectionDocument, options);\n        }\nexport type AdminArticleSnapshotConnectionQueryHookResult = ReturnType<typeof useAdminArticleSnapshotConnectionQuery>;\nexport type AdminArticleSnapshotConnectionLazyQueryHookResult = ReturnType<typeof useAdminArticleSnapshotConnectionLazyQuery>;\nexport type AdminArticleSnapshotConnectionQueryResult = Apollo.QueryResult<AdminArticleSnapshotConnectionQuery, AdminArticleSnapshotConnectionQueryVariables>;\nexport const AdminArticleDocument = gql`\n    query AdminArticle($uuid: ID!) {\n  adminArticle(uuid: $uuid) {\n    id\n    uuid\n    title\n    intro\n    price\n    revenue\n    ordersCount\n    commentsCount\n    state\n    walletId\n    author {\n      name\n      avatarUrl\n    }\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useAdminArticleQuery__\n *\n * To run a query within a React component, call `useAdminArticleQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminArticleQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useAdminArticleQuery(baseOptions: Apollo.QueryHookOptions<AdminArticleQuery, AdminArticleQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminArticleQuery, AdminArticleQueryVariables>(AdminArticleDocument, options);\n      }\nexport function useAdminArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArticleQuery, AdminArticleQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminArticleQuery, AdminArticleQueryVariables>(AdminArticleDocument, options);\n        }\nexport type AdminArticleQueryHookResult = ReturnType<typeof useAdminArticleQuery>;\nexport type AdminArticleLazyQueryHookResult = ReturnType<typeof useAdminArticleLazyQuery>;\nexport type AdminArticleQueryResult = Apollo.QueryResult<AdminArticleQuery, AdminArticleQueryVariables>;\nexport const AdminBonusConnectionDocument = gql`\n    query AdminBonusConnection($after: String) {\n  adminBonusConnection(after: $after) {\n    nodes {\n      id\n      title\n      description\n      amount\n      assetId\n      state\n      createdAt\n      user {\n        id\n        avatarUrl\n        name\n        mixinId\n      }\n      transfer {\n        snapshotId\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminBonusConnectionQuery__\n *\n * To run a query within a React component, call `useAdminBonusConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminBonusConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminBonusConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminBonusConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>(AdminBonusConnectionDocument, options);\n      }\nexport function useAdminBonusConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>(AdminBonusConnectionDocument, options);\n        }\nexport type AdminBonusConnectionQueryHookResult = ReturnType<typeof useAdminBonusConnectionQuery>;\nexport type AdminBonusConnectionLazyQueryHookResult = ReturnType<typeof useAdminBonusConnectionLazyQuery>;\nexport type AdminBonusConnectionQueryResult = Apollo.QueryResult<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>;\nexport const AdminMixinMessageConnectionDocument = gql`\n    query AdminMixinMessageConnection($after: String) {\n  adminMixinMessageConnection(after: $after) {\n    nodes {\n      id\n      action\n      category\n      content\n      userId\n      user {\n        name\n        avatarUrl\n      }\n      createdAt\n      processedAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminMixinMessageConnectionQuery__\n *\n * To run a query within a React component, call `useAdminMixinMessageConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminMixinMessageConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminMixinMessageConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminMixinMessageConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, options);\n      }\nexport function useAdminMixinMessageConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, options);\n        }\nexport type AdminMixinMessageConnectionQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionQuery>;\nexport type AdminMixinMessageConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionLazyQuery>;\nexport type AdminMixinMessageConnectionQueryResult = Apollo.QueryResult<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>;\nexport const AdminMixinNetworkSnapshotConnectionDocument = gql`\n    query AdminMixinNetworkSnapshotConnection($filter: String, $userId: String, $after: String) {\n  adminMixinNetworkSnapshotConnection(\n    filter: $filter\n    userId: $userId\n    after: $after\n  ) {\n    nodes {\n      id\n      traceId\n      snapshotId\n      assetId\n      userId\n      amount\n      data\n      opponentId\n      opponent {\n        name\n        avatarUrl\n        mixinId\n      }\n      article {\n        id\n        uuid\n        title\n      }\n      createdAt\n      processedAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminMixinNetworkSnapshotConnectionQuery__\n *\n * To run a query within a React component, call `useAdminMixinNetworkSnapshotConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminMixinNetworkSnapshotConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminMixinNetworkSnapshotConnectionQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      userId: // value for 'userId'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminMixinNetworkSnapshotConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, options);\n      }\nexport function useAdminMixinNetworkSnapshotConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, options);\n        }\nexport type AdminMixinNetworkSnapshotConnectionQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionQuery>;\nexport type AdminMixinNetworkSnapshotConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionLazyQuery>;\nexport type AdminMixinNetworkSnapshotConnectionQueryResult = Apollo.QueryResult<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>;\nexport const AdminOrderConnectionDocument = gql`\n    query AdminOrderConnection($itemId: ID, $itemType: String, $after: String) {\n  adminOrderConnection(itemId: $itemId, itemType: $itemType, after: $after) {\n    nodes {\n      id\n      traceId\n      orderType\n      itemId\n      itemType\n      state\n      total\n      seller {\n        name\n        avatarUrl\n        mixinId\n      }\n      buyer {\n        name\n        avatarUrl\n        mixinId\n      }\n      currency {\n        assetId\n        iconUrl\n        symbol\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminOrderConnectionQuery__\n *\n * To run a query within a React component, call `useAdminOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminOrderConnectionQuery({\n *   variables: {\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>(AdminOrderConnectionDocument, options);\n      }\nexport function useAdminOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>(AdminOrderConnectionDocument, options);\n        }\nexport type AdminOrderConnectionQueryHookResult = ReturnType<typeof useAdminOrderConnectionQuery>;\nexport type AdminOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminOrderConnectionLazyQuery>;\nexport type AdminOrderConnectionQueryResult = Apollo.QueryResult<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>;\nexport const AdminPaymentConnectionDocument = gql`\n    query AdminPaymentConnection($after: String) {\n  adminPaymentConnection(after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      state\n      assetId\n      payer {\n        name\n        mixinId\n        avatarUrl\n      }\n      order {\n        orderType\n      }\n      currency {\n        assetId\n        iconUrl\n        symbol\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminPaymentConnectionQuery__\n *\n * To run a query within a React component, call `useAdminPaymentConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminPaymentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminPaymentConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminPaymentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>(AdminPaymentConnectionDocument, options);\n      }\nexport function useAdminPaymentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>(AdminPaymentConnectionDocument, options);\n        }\nexport type AdminPaymentConnectionQueryHookResult = ReturnType<typeof useAdminPaymentConnectionQuery>;\nexport type AdminPaymentConnectionLazyQueryHookResult = ReturnType<typeof useAdminPaymentConnectionLazyQuery>;\nexport type AdminPaymentConnectionQueryResult = Apollo.QueryResult<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>;\nexport const AdminPrsAccountConnectionDocument = gql`\n    query AdminPrsAccountConnection($query: String, $status: String, $after: String) {\n  adminPrsAccountConnection(query: $query, status: $status, after: $after) {\n    nodes {\n      id\n      account\n      status\n      user {\n        name\n        avatarUrl\n        mixinId\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminPrsAccountConnectionQuery__\n *\n * To run a query within a React component, call `useAdminPrsAccountConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminPrsAccountConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminPrsAccountConnectionQuery({\n *   variables: {\n *      query: // value for 'query'\n *      status: // value for 'status'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminPrsAccountConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminPrsAccountConnectionQuery, AdminPrsAccountConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminPrsAccountConnectionQuery, AdminPrsAccountConnectionQueryVariables>(AdminPrsAccountConnectionDocument, options);\n      }\nexport function useAdminPrsAccountConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminPrsAccountConnectionQuery, AdminPrsAccountConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminPrsAccountConnectionQuery, AdminPrsAccountConnectionQueryVariables>(AdminPrsAccountConnectionDocument, options);\n        }\nexport type AdminPrsAccountConnectionQueryHookResult = ReturnType<typeof useAdminPrsAccountConnectionQuery>;\nexport type AdminPrsAccountConnectionLazyQueryHookResult = ReturnType<typeof useAdminPrsAccountConnectionLazyQuery>;\nexport type AdminPrsAccountConnectionQueryResult = Apollo.QueryResult<AdminPrsAccountConnectionQuery, AdminPrsAccountConnectionQueryVariables>;\nexport const AdminPrsTransactionConnectionDocument = gql`\n    query AdminPrsTransactionConnection($type: String, $after: String) {\n  adminPrsTransactionConnection(type: $type, after: $after) {\n    nodes {\n      id\n      type\n      blockNum\n      blockType\n      signature\n      userAddress\n      transactionId\n      data\n      prsAccount {\n        account\n        status\n        user {\n          mixinId\n          name\n        }\n      }\n      processedAt\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminPrsTransactionConnectionQuery__\n *\n * To run a query within a React component, call `useAdminPrsTransactionConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminPrsTransactionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminPrsTransactionConnectionQuery({\n *   variables: {\n *      type: // value for 'type'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminPrsTransactionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminPrsTransactionConnectionQuery, AdminPrsTransactionConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminPrsTransactionConnectionQuery, AdminPrsTransactionConnectionQueryVariables>(AdminPrsTransactionConnectionDocument, options);\n      }\nexport function useAdminPrsTransactionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminPrsTransactionConnectionQuery, AdminPrsTransactionConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminPrsTransactionConnectionQuery, AdminPrsTransactionConnectionQueryVariables>(AdminPrsTransactionConnectionDocument, options);\n        }\nexport type AdminPrsTransactionConnectionQueryHookResult = ReturnType<typeof useAdminPrsTransactionConnectionQuery>;\nexport type AdminPrsTransactionConnectionLazyQueryHookResult = ReturnType<typeof useAdminPrsTransactionConnectionLazyQuery>;\nexport type AdminPrsTransactionConnectionQueryResult = Apollo.QueryResult<AdminPrsTransactionConnectionQuery, AdminPrsTransactionConnectionQueryVariables>;\nexport const RevenueChartDocument = gql`\n    query RevenueChart {\n  revenueChart\n}\n    `;\n\n/**\n * __useRevenueChartQuery__\n *\n * To run a query within a React component, call `useRevenueChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useRevenueChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRevenueChartQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useRevenueChartQuery(baseOptions?: Apollo.QueryHookOptions<RevenueChartQuery, RevenueChartQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<RevenueChartQuery, RevenueChartQueryVariables>(RevenueChartDocument, options);\n      }\nexport function useRevenueChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RevenueChartQuery, RevenueChartQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<RevenueChartQuery, RevenueChartQueryVariables>(RevenueChartDocument, options);\n        }\nexport type RevenueChartQueryHookResult = ReturnType<typeof useRevenueChartQuery>;\nexport type RevenueChartLazyQueryHookResult = ReturnType<typeof useRevenueChartLazyQuery>;\nexport type RevenueChartQueryResult = Apollo.QueryResult<RevenueChartQuery, RevenueChartQueryVariables>;\nexport const AdminSwapOrderConnectionDocument = gql`\n    query AdminSwapOrderConnection($userId: ID, $after: String) {\n  adminSwapOrderConnection(userId: $userId, after: $after) {\n    nodes {\n      id\n      traceId\n      state\n      funds\n      amount\n      minAmount\n      fillAssetId\n      payAssetId\n      article {\n        uuid\n        title\n        price\n      }\n      payer {\n        name\n        avatarUrl\n        mixinId\n      }\n      payAsset {\n        assetId\n        iconUrl\n        symbol\n      }\n      fillAsset {\n        assetId\n        iconUrl\n        symbol\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminSwapOrderConnectionQuery__\n *\n * To run a query within a React component, call `useAdminSwapOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminSwapOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminSwapOrderConnectionQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminSwapOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>(AdminSwapOrderConnectionDocument, options);\n      }\nexport function useAdminSwapOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>(AdminSwapOrderConnectionDocument, options);\n        }\nexport type AdminSwapOrderConnectionQueryHookResult = ReturnType<typeof useAdminSwapOrderConnectionQuery>;\nexport type AdminSwapOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminSwapOrderConnectionLazyQuery>;\nexport type AdminSwapOrderConnectionQueryResult = Apollo.QueryResult<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>;\nexport const AdminTransferConnectionDocument = gql`\n    query AdminTransferConnection($itemId: ID, $itemType: String, $souceId: ID, $souceType: String, $after: String) {\n  adminTransferConnection(\n    itemId: $itemId\n    itemType: $itemType\n    sourceId: $souceId\n    sourceType: $souceType\n    after: $after\n  ) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      memo\n      transferType\n      assetId\n      opponentId\n      walletId\n      recipient {\n        name\n        avatarUrl\n        mixinId\n      }\n      currency {\n        assetId\n        iconUrl\n        symbol\n      }\n      processedAt\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminTransferConnectionQuery__\n *\n * To run a query within a React component, call `useAdminTransferConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminTransferConnectionQuery({\n *   variables: {\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      souceId: // value for 'souceId'\n *      souceType: // value for 'souceType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>(AdminTransferConnectionDocument, options);\n      }\nexport function useAdminTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>(AdminTransferConnectionDocument, options);\n        }\nexport type AdminTransferConnectionQueryHookResult = ReturnType<typeof useAdminTransferConnectionQuery>;\nexport type AdminTransferConnectionLazyQueryHookResult = ReturnType<typeof useAdminTransferConnectionLazyQuery>;\nexport type AdminTransferConnectionQueryResult = Apollo.QueryResult<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>;\nexport const UserChartDocument = gql`\n    query UserChart {\n  userChart\n}\n    `;\n\n/**\n * __useUserChartQuery__\n *\n * To run a query within a React component, call `useUserChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserChartQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUserChartQuery(baseOptions?: Apollo.QueryHookOptions<UserChartQuery, UserChartQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UserChartQuery, UserChartQueryVariables>(UserChartDocument, options);\n      }\nexport function useUserChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserChartQuery, UserChartQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UserChartQuery, UserChartQueryVariables>(UserChartDocument, options);\n        }\nexport type UserChartQueryHookResult = ReturnType<typeof useUserChartQuery>;\nexport type UserChartLazyQueryHookResult = ReturnType<typeof useUserChartLazyQuery>;\nexport type UserChartQueryResult = Apollo.QueryResult<UserChartQuery, UserChartQueryVariables>;\nexport const AdminUserConnectionDocument = gql`\n    query AdminUserConnection($query: String, $orderBy: String, $filter: String, $after: String) {\n  adminUserConnection(\n    query: $query\n    orderBy: $orderBy\n    filter: $filter\n    after: $after\n  ) {\n    nodes {\n      id\n      name\n      mixinId\n      mixinUuid\n      avatarUrl\n      statistics {\n        articlesCount\n        commentsCount\n        revenueTotalUsd\n        paymentTotalUsd\n      }\n      createdAt\n      bannedAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminUserConnectionQuery__\n *\n * To run a query within a React component, call `useAdminUserConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminUserConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminUserConnectionQuery({\n *   variables: {\n *      query: // value for 'query'\n *      orderBy: // value for 'orderBy'\n *      filter: // value for 'filter'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminUserConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, options);\n      }\nexport function useAdminUserConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, options);\n        }\nexport type AdminUserConnectionQueryHookResult = ReturnType<typeof useAdminUserConnectionQuery>;\nexport type AdminUserConnectionLazyQueryHookResult = ReturnType<typeof useAdminUserConnectionLazyQuery>;\nexport type AdminUserConnectionQueryResult = Apollo.QueryResult<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>;\nexport const AdminUserDocument = gql`\n    query AdminUser($mixinId: ID!) {\n  adminUser(mixinId: $mixinId) {\n    id\n    name\n    mixinId\n    mixinUuid\n    avatarUrl\n    bio\n    walletId\n    statistics {\n      articlesCount\n      authorRevenueTotalUsd\n      readerRevenueTotalUsd\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminUserQuery__\n *\n * To run a query within a React component, call `useAdminUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminUserQuery({\n *   variables: {\n *      mixinId: // value for 'mixinId'\n *   },\n * });\n */\nexport function useAdminUserQuery(baseOptions: Apollo.QueryHookOptions<AdminUserQuery, AdminUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminUserQuery, AdminUserQueryVariables>(AdminUserDocument, options);\n      }\nexport function useAdminUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserQuery, AdminUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminUserQuery, AdminUserQueryVariables>(AdminUserDocument, options);\n        }\nexport type AdminUserQueryHookResult = ReturnType<typeof useAdminUserQuery>;\nexport type AdminUserLazyQueryHookResult = ReturnType<typeof useAdminUserLazyQuery>;\nexport type AdminUserQueryResult = Apollo.QueryResult<AdminUserQuery, AdminUserQueryVariables>;\nexport const AdminWalletBalanceDocument = gql`\n    query AdminWalletBalance($userId: String) {\n  adminWalletBalance(userId: $userId) {\n    assetId\n    name\n    symbol\n    iconUrl\n    balance\n    priceUsd\n    priceBtc\n  }\n}\n    `;\n\n/**\n * __useAdminWalletBalanceQuery__\n *\n * To run a query within a React component, call `useAdminWalletBalanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminWalletBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminWalletBalanceQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useAdminWalletBalanceQuery(baseOptions?: Apollo.QueryHookOptions<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>(AdminWalletBalanceDocument, options);\n      }\nexport function useAdminWalletBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>(AdminWalletBalanceDocument, options);\n        }\nexport type AdminWalletBalanceQueryHookResult = ReturnType<typeof useAdminWalletBalanceQuery>;\nexport type AdminWalletBalanceLazyQueryHookResult = ReturnType<typeof useAdminWalletBalanceLazyQuery>;\nexport type AdminWalletBalanceQueryResult = Apollo.QueryResult<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>;\nexport const CreateCommentDocument = gql`\n    mutation CreateComment($input: CreateCommentMutationInput!) {\n  createComment(input: $input) {\n    error\n    commentable {\n      id\n      commentingSubscribed\n    }\n  }\n}\n    `;\nexport type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, options);\n      }\nexport type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;\nexport type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;\nexport const DownvoteArticleDocument = gql`\n    mutation DownvoteArticle($input: DownvoteArticleMutationInput!) {\n  downvoteArticle(input: $input) {\n    id\n    uuid\n    upvotesCount\n    downvotesCount\n    upvoted\n    downvoted\n  }\n}\n    `;\nexport type DownvoteArticleMutationFn = Apollo.MutationFunction<DownvoteArticleMutation, DownvoteArticleMutationVariables>;\n\n/**\n * __useDownvoteArticleMutation__\n *\n * To run a mutation, you first call `useDownvoteArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDownvoteArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [downvoteArticleMutation, { data, loading, error }] = useDownvoteArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useDownvoteArticleMutation(baseOptions?: Apollo.MutationHookOptions<DownvoteArticleMutation, DownvoteArticleMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DownvoteArticleMutation, DownvoteArticleMutationVariables>(DownvoteArticleDocument, options);\n      }\nexport type DownvoteArticleMutationHookResult = ReturnType<typeof useDownvoteArticleMutation>;\nexport type DownvoteArticleMutationResult = Apollo.MutationResult<DownvoteArticleMutation>;\nexport type DownvoteArticleMutationOptions = Apollo.BaseMutationOptions<DownvoteArticleMutation, DownvoteArticleMutationVariables>;\nexport const DownvoteCommentDocument = gql`\n    mutation DownvoteComment($input: DownvoteCommentMutationInput!) {\n  downvoteComment(input: $input) {\n    id\n    upvoted\n    downvoted\n    upvotesCount\n    downvotesCount\n  }\n}\n    `;\nexport type DownvoteCommentMutationFn = Apollo.MutationFunction<DownvoteCommentMutation, DownvoteCommentMutationVariables>;\n\n/**\n * __useDownvoteCommentMutation__\n *\n * To run a mutation, you first call `useDownvoteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDownvoteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [downvoteCommentMutation, { data, loading, error }] = useDownvoteCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useDownvoteCommentMutation(baseOptions?: Apollo.MutationHookOptions<DownvoteCommentMutation, DownvoteCommentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DownvoteCommentMutation, DownvoteCommentMutationVariables>(DownvoteCommentDocument, options);\n      }\nexport type DownvoteCommentMutationHookResult = ReturnType<typeof useDownvoteCommentMutation>;\nexport type DownvoteCommentMutationResult = Apollo.MutationResult<DownvoteCommentMutation>;\nexport type DownvoteCommentMutationOptions = Apollo.BaseMutationOptions<DownvoteCommentMutation, DownvoteCommentMutationVariables>;\nexport const ToggleAuthoringSubscribeUserActionDocument = gql`\n    mutation ToggleAuthoringSubscribeUserAction($input: ToggleAuthoringSubscribeUserActionMutationInput!) {\n  toggleAuthoringSubscribeUserAction(input: $input) {\n    error\n  }\n}\n    `;\nexport type ToggleAuthoringSubscribeUserActionMutationFn = Apollo.MutationFunction<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>;\n\n/**\n * __useToggleAuthoringSubscribeUserActionMutation__\n *\n * To run a mutation, you first call `useToggleAuthoringSubscribeUserActionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleAuthoringSubscribeUserActionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleAuthoringSubscribeUserActionMutation, { data, loading, error }] = useToggleAuthoringSubscribeUserActionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useToggleAuthoringSubscribeUserActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>(ToggleAuthoringSubscribeUserActionDocument, options);\n      }\nexport type ToggleAuthoringSubscribeUserActionMutationHookResult = ReturnType<typeof useToggleAuthoringSubscribeUserActionMutation>;\nexport type ToggleAuthoringSubscribeUserActionMutationResult = Apollo.MutationResult<ToggleAuthoringSubscribeUserActionMutation>;\nexport type ToggleAuthoringSubscribeUserActionMutationOptions = Apollo.BaseMutationOptions<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>;\nexport const ToggleCommentingSubscribeArticleActionDocument = gql`\n    mutation ToggleCommentingSubscribeArticleAction($input: ToggleCommentingSubscribeArticleActionMutationInput!) {\n  toggleCommentingSubscribeArticleAction(input: $input) {\n    id\n    uuid\n    commentingSubscribed\n  }\n}\n    `;\nexport type ToggleCommentingSubscribeArticleActionMutationFn = Apollo.MutationFunction<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>;\n\n/**\n * __useToggleCommentingSubscribeArticleActionMutation__\n *\n * To run a mutation, you first call `useToggleCommentingSubscribeArticleActionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleCommentingSubscribeArticleActionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleCommentingSubscribeArticleActionMutation, { data, loading, error }] = useToggleCommentingSubscribeArticleActionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useToggleCommentingSubscribeArticleActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>(ToggleCommentingSubscribeArticleActionDocument, options);\n      }\nexport type ToggleCommentingSubscribeArticleActionMutationHookResult = ReturnType<typeof useToggleCommentingSubscribeArticleActionMutation>;\nexport type ToggleCommentingSubscribeArticleActionMutationResult = Apollo.MutationResult<ToggleCommentingSubscribeArticleActionMutation>;\nexport type ToggleCommentingSubscribeArticleActionMutationOptions = Apollo.BaseMutationOptions<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>;\nexport const ToggleReadingSubscribeUserActionDocument = gql`\n    mutation ToggleReadingSubscribeUserAction($input: ToggleReadingSubscribeUserActionMutationInput!) {\n  toggleReadingSubscribeUserAction(input: $input) {\n    error\n  }\n}\n    `;\nexport type ToggleReadingSubscribeUserActionMutationFn = Apollo.MutationFunction<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>;\n\n/**\n * __useToggleReadingSubscribeUserActionMutation__\n *\n * To run a mutation, you first call `useToggleReadingSubscribeUserActionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleReadingSubscribeUserActionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleReadingSubscribeUserActionMutation, { data, loading, error }] = useToggleReadingSubscribeUserActionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useToggleReadingSubscribeUserActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>(ToggleReadingSubscribeUserActionDocument, options);\n      }\nexport type ToggleReadingSubscribeUserActionMutationHookResult = ReturnType<typeof useToggleReadingSubscribeUserActionMutation>;\nexport type ToggleReadingSubscribeUserActionMutationResult = Apollo.MutationResult<ToggleReadingSubscribeUserActionMutation>;\nexport type ToggleReadingSubscribeUserActionMutationOptions = Apollo.BaseMutationOptions<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>;\nexport const ToggleSubscribeTagActionDocument = gql`\n    mutation ToggleSubscribeTagAction($input: ToggleSubscribeTagActionMutationInput!) {\n  toggleSubscribeTagAction(input: $input) {\n    id\n    subscribed\n    subscribersCount\n  }\n}\n    `;\nexport type ToggleSubscribeTagActionMutationFn = Apollo.MutationFunction<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>;\n\n/**\n * __useToggleSubscribeTagActionMutation__\n *\n * To run a mutation, you first call `useToggleSubscribeTagActionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleSubscribeTagActionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleSubscribeTagActionMutation, { data, loading, error }] = useToggleSubscribeTagActionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useToggleSubscribeTagActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>(ToggleSubscribeTagActionDocument, options);\n      }\nexport type ToggleSubscribeTagActionMutationHookResult = ReturnType<typeof useToggleSubscribeTagActionMutation>;\nexport type ToggleSubscribeTagActionMutationResult = Apollo.MutationResult<ToggleSubscribeTagActionMutation>;\nexport type ToggleSubscribeTagActionMutationOptions = Apollo.BaseMutationOptions<ToggleSubscribeTagActionMutation, ToggleSubscribeTagActionMutationVariables>;\nexport const UpvoteArticleDocument = gql`\n    mutation UpvoteArticle($input: UpvoteArticleMutationInput!) {\n  upvoteArticle(input: $input) {\n    id\n    uuid\n    upvotesCount\n    downvotesCount\n    upvoted\n    downvoted\n  }\n}\n    `;\nexport type UpvoteArticleMutationFn = Apollo.MutationFunction<UpvoteArticleMutation, UpvoteArticleMutationVariables>;\n\n/**\n * __useUpvoteArticleMutation__\n *\n * To run a mutation, you first call `useUpvoteArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpvoteArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [upvoteArticleMutation, { data, loading, error }] = useUpvoteArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpvoteArticleMutation(baseOptions?: Apollo.MutationHookOptions<UpvoteArticleMutation, UpvoteArticleMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpvoteArticleMutation, UpvoteArticleMutationVariables>(UpvoteArticleDocument, options);\n      }\nexport type UpvoteArticleMutationHookResult = ReturnType<typeof useUpvoteArticleMutation>;\nexport type UpvoteArticleMutationResult = Apollo.MutationResult<UpvoteArticleMutation>;\nexport type UpvoteArticleMutationOptions = Apollo.BaseMutationOptions<UpvoteArticleMutation, UpvoteArticleMutationVariables>;\nexport const UpvoteCommentDocument = gql`\n    mutation UpvoteComment($input: UpvoteCommentMutationInput!) {\n  upvoteComment(input: $input) {\n    id\n    upvoted\n    downvoted\n    upvotesCount\n    downvotesCount\n  }\n}\n    `;\nexport type UpvoteCommentMutationFn = Apollo.MutationFunction<UpvoteCommentMutation, UpvoteCommentMutationVariables>;\n\n/**\n * __useUpvoteCommentMutation__\n *\n * To run a mutation, you first call `useUpvoteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpvoteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [upvoteCommentMutation, { data, loading, error }] = useUpvoteCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpvoteCommentMutation(baseOptions?: Apollo.MutationHookOptions<UpvoteCommentMutation, UpvoteCommentMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpvoteCommentMutation, UpvoteCommentMutationVariables>(UpvoteCommentDocument, options);\n      }\nexport type UpvoteCommentMutationHookResult = ReturnType<typeof useUpvoteCommentMutation>;\nexport type UpvoteCommentMutationResult = Apollo.MutationResult<UpvoteCommentMutation>;\nexport type UpvoteCommentMutationOptions = Apollo.BaseMutationOptions<UpvoteCommentMutation, UpvoteCommentMutationVariables>;\nexport const ArticleConnectionDocument = gql`\n    query ArticleConnection($order: String!, $query: String, $after: String) {\n  articleConnection(order: $order, query: $query, after: $after) {\n    nodes {\n      uuid\n      title\n      intro\n      price\n      priceUsd\n      revenue\n      revenueUsd\n      ordersCount\n      commentsCount\n      upvoteRatio\n      tags {\n        id\n        name\n        color\n      }\n      author {\n        name\n        avatarUrl\n        mixinId\n        bio\n      }\n      currency {\n        assetId\n        symbol\n        iconUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useArticleConnectionQuery__\n *\n * To run a query within a React component, call `useArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArticleConnectionQuery({\n *   variables: {\n *      order: // value for 'order'\n *      query: // value for 'query'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<ArticleConnectionQuery, ArticleConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ArticleConnectionQuery, ArticleConnectionQueryVariables>(ArticleConnectionDocument, options);\n      }\nexport function useArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleConnectionQuery, ArticleConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ArticleConnectionQuery, ArticleConnectionQueryVariables>(ArticleConnectionDocument, options);\n        }\nexport type ArticleConnectionQueryHookResult = ReturnType<typeof useArticleConnectionQuery>;\nexport type ArticleConnectionLazyQueryHookResult = ReturnType<typeof useArticleConnectionLazyQuery>;\nexport type ArticleConnectionQueryResult = Apollo.QueryResult<ArticleConnectionQuery, ArticleConnectionQueryVariables>;\nexport const ArticleDocument = gql`\n    query Article($uuid: ID!) {\n  article(uuid: $uuid) {\n    id\n    uuid\n    title\n    intro\n    content\n    price\n    priceUsd\n    assetId\n    authorized\n    ordersCount\n    commentsCount\n    myShare\n    revenue\n    commentingSubscribed\n    paymentTraceId\n    upvoted\n    downvoted\n    upvotesCount\n    downvotesCount\n    wordsCount\n    partialContent\n    walletId\n    swappable\n    signatureUrl\n    tags {\n      id\n      name\n      color\n    }\n    author {\n      name\n      avatarUrl\n      mixinId\n      bio\n    }\n    randomReaders {\n      name\n      avatarUrl\n      mixinId\n    }\n    readers {\n      totalCount\n    }\n    buyOrders {\n      totalCount\n    }\n    rewardOrders {\n      totalCount\n    }\n    currency {\n      assetId\n      symbol\n      iconUrl\n      priceUsd\n    }\n    createdAt\n  }\n  swappableCurrencies {\n    id\n    assetId\n    name\n    symbol\n    iconUrl\n    priceUsd\n    priceBtc\n  }\n}\n    `;\n\n/**\n * __useArticleQuery__\n *\n * To run a query within a React component, call `useArticleQuery` and pass it any options that fit your needs.\n * When your component renders, `useArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArticleQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useArticleQuery(baseOptions: Apollo.QueryHookOptions<ArticleQuery, ArticleQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ArticleQuery, ArticleQueryVariables>(ArticleDocument, options);\n      }\nexport function useArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleQuery, ArticleQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ArticleQuery, ArticleQueryVariables>(ArticleDocument, options);\n        }\nexport type ArticleQueryHookResult = ReturnType<typeof useArticleQuery>;\nexport type ArticleLazyQueryHookResult = ReturnType<typeof useArticleLazyQuery>;\nexport type ArticleQueryResult = Apollo.QueryResult<ArticleQuery, ArticleQueryVariables>;\nexport const CommentConnectionDocument = gql`\n    query CommentConnection($commentableType: String, $commentableId: ID, $authorMixinId: String, $orderBy: String, $after: String) {\n  commentConnection(\n    commentableType: $commentableType\n    commentableId: $commentableId\n    authorMixinId: $authorMixinId\n    orderBy: $orderBy\n    after: $after\n  ) {\n    nodes {\n      id\n      content\n      deletedAt\n      upvotesCount\n      downvotesCount\n      upvoted\n      downvoted\n      author {\n        name\n        avatarUrl\n        mixinId\n        bio\n        createdAt\n      }\n      commentable {\n        uuid\n        title\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useCommentConnectionQuery__\n *\n * To run a query within a React component, call `useCommentConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommentConnectionQuery({\n *   variables: {\n *      commentableType: // value for 'commentableType'\n *      commentableId: // value for 'commentableId'\n *      authorMixinId: // value for 'authorMixinId'\n *      orderBy: // value for 'orderBy'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useCommentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<CommentConnectionQuery, CommentConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CommentConnectionQuery, CommentConnectionQueryVariables>(CommentConnectionDocument, options);\n      }\nexport function useCommentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CommentConnectionQuery, CommentConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CommentConnectionQuery, CommentConnectionQueryVariables>(CommentConnectionDocument, options);\n        }\nexport type CommentConnectionQueryHookResult = ReturnType<typeof useCommentConnectionQuery>;\nexport type CommentConnectionLazyQueryHookResult = ReturnType<typeof useCommentConnectionLazyQuery>;\nexport type CommentConnectionQueryResult = Apollo.QueryResult<CommentConnectionQuery, CommentConnectionQueryVariables>;\nexport const PaymentDocument = gql`\n    query Payment($traceId: ID!) {\n  payment(traceId: $traceId) {\n    traceId\n    amount\n    assetId\n    state\n  }\n}\n    `;\n\n/**\n * __usePaymentQuery__\n *\n * To run a query within a React component, call `usePaymentQuery` and pass it any options that fit your needs.\n * When your component renders, `usePaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePaymentQuery({\n *   variables: {\n *      traceId: // value for 'traceId'\n *   },\n * });\n */\nexport function usePaymentQuery(baseOptions: Apollo.QueryHookOptions<PaymentQuery, PaymentQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PaymentQuery, PaymentQueryVariables>(PaymentDocument, options);\n      }\nexport function usePaymentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PaymentQuery, PaymentQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PaymentQuery, PaymentQueryVariables>(PaymentDocument, options);\n        }\nexport type PaymentQueryHookResult = ReturnType<typeof usePaymentQuery>;\nexport type PaymentLazyQueryHookResult = ReturnType<typeof usePaymentLazyQuery>;\nexport type PaymentQueryResult = Apollo.QueryResult<PaymentQuery, PaymentQueryVariables>;\nexport const StatisticsDocument = gql`\n    query Statistics {\n  statistics {\n    usersCount\n    articlesCount\n    authorRevenueTotal\n    readerRevenueTotal\n  }\n}\n    `;\n\n/**\n * __useStatisticsQuery__\n *\n * To run a query within a React component, call `useStatisticsQuery` and pass it any options that fit your needs.\n * When your component renders, `useStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useStatisticsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useStatisticsQuery(baseOptions?: Apollo.QueryHookOptions<StatisticsQuery, StatisticsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<StatisticsQuery, StatisticsQueryVariables>(StatisticsDocument, options);\n      }\nexport function useStatisticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StatisticsQuery, StatisticsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<StatisticsQuery, StatisticsQueryVariables>(StatisticsDocument, options);\n        }\nexport type StatisticsQueryHookResult = ReturnType<typeof useStatisticsQuery>;\nexport type StatisticsLazyQueryHookResult = ReturnType<typeof useStatisticsLazyQuery>;\nexport type StatisticsQueryResult = Apollo.QueryResult<StatisticsQuery, StatisticsQueryVariables>;\nexport const SwapPreOrderDocument = gql`\n    query SwapPreOrder($payAssetId: String!, $fillAssetId: String!, $amount: Float!) {\n  swapPreOrder(\n    payAssetId: $payAssetId\n    fillAssetId: $fillAssetId\n    amount: $amount\n  ) {\n    state\n    funds\n    amount\n    minAmount\n    fillAssetId\n    payAssetId\n    priceImpact\n    routePrice\n  }\n}\n    `;\n\n/**\n * __useSwapPreOrderQuery__\n *\n * To run a query within a React component, call `useSwapPreOrderQuery` and pass it any options that fit your needs.\n * When your component renders, `useSwapPreOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSwapPreOrderQuery({\n *   variables: {\n *      payAssetId: // value for 'payAssetId'\n *      fillAssetId: // value for 'fillAssetId'\n *      amount: // value for 'amount'\n *   },\n * });\n */\nexport function useSwapPreOrderQuery(baseOptions: Apollo.QueryHookOptions<SwapPreOrderQuery, SwapPreOrderQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SwapPreOrderQuery, SwapPreOrderQueryVariables>(SwapPreOrderDocument, options);\n      }\nexport function useSwapPreOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SwapPreOrderQuery, SwapPreOrderQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SwapPreOrderQuery, SwapPreOrderQueryVariables>(SwapPreOrderDocument, options);\n        }\nexport type SwapPreOrderQueryHookResult = ReturnType<typeof useSwapPreOrderQuery>;\nexport type SwapPreOrderLazyQueryHookResult = ReturnType<typeof useSwapPreOrderLazyQuery>;\nexport type SwapPreOrderQueryResult = Apollo.QueryResult<SwapPreOrderQuery, SwapPreOrderQueryVariables>;\nexport const TagConnectionDocument = gql`\n    query TagConnection($after: String) {\n  tagConnection(after: $after) {\n    nodes {\n      id\n      name\n      color\n      articlesCount\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useTagConnectionQuery__\n *\n * To run a query within a React component, call `useTagConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useTagConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTagConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useTagConnectionQuery(baseOptions?: Apollo.QueryHookOptions<TagConnectionQuery, TagConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TagConnectionQuery, TagConnectionQueryVariables>(TagConnectionDocument, options);\n      }\nexport function useTagConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TagConnectionQuery, TagConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TagConnectionQuery, TagConnectionQueryVariables>(TagConnectionDocument, options);\n        }\nexport type TagConnectionQueryHookResult = ReturnType<typeof useTagConnectionQuery>;\nexport type TagConnectionLazyQueryHookResult = ReturnType<typeof useTagConnectionLazyQuery>;\nexport type TagConnectionQueryResult = Apollo.QueryResult<TagConnectionQuery, TagConnectionQueryVariables>;\nexport const TaggedArticleConnectionDocument = gql`\n    query TaggedArticleConnection($tagId: ID!, $order: String!, $query: String, $after: String) {\n  tag(id: $tagId) {\n    id\n    name\n    color\n    articlesCount\n    subscribersCount\n    subscribed\n  }\n  articleConnection(order: $order, query: $query, tagId: $tagId, after: $after) {\n    nodes {\n      uuid\n      title\n      intro\n      price\n      priceUsd\n      revenue\n      revenueUsd\n      ordersCount\n      commentsCount\n      upvoteRatio\n      tags {\n        id\n        name\n        color\n      }\n      author {\n        name\n        avatarUrl\n        mixinId\n        bio\n      }\n      currency {\n        assetId\n        symbol\n        iconUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useTaggedArticleConnectionQuery__\n *\n * To run a query within a React component, call `useTaggedArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useTaggedArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTaggedArticleConnectionQuery({\n *   variables: {\n *      tagId: // value for 'tagId'\n *      order: // value for 'order'\n *      query: // value for 'query'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useTaggedArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>(TaggedArticleConnectionDocument, options);\n      }\nexport function useTaggedArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>(TaggedArticleConnectionDocument, options);\n        }\nexport type TaggedArticleConnectionQueryHookResult = ReturnType<typeof useTaggedArticleConnectionQuery>;\nexport type TaggedArticleConnectionLazyQueryHookResult = ReturnType<typeof useTaggedArticleConnectionLazyQuery>;\nexport type TaggedArticleConnectionQueryResult = Apollo.QueryResult<TaggedArticleConnectionQuery, TaggedArticleConnectionQueryVariables>;\nexport const TransferConnectionDocument = gql`\n    query TransferConnection($after: String) {\n  transferConnection(after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      assetId\n      transferType\n      createdAt\n      currency {\n        assetId\n        symbol\n        iconUrl\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useTransferConnectionQuery__\n *\n * To run a query within a React component, call `useTransferConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransferConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<TransferConnectionQuery, TransferConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TransferConnectionQuery, TransferConnectionQueryVariables>(TransferConnectionDocument, options);\n      }\nexport function useTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TransferConnectionQuery, TransferConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TransferConnectionQuery, TransferConnectionQueryVariables>(TransferConnectionDocument, options);\n        }\nexport type TransferConnectionQueryHookResult = ReturnType<typeof useTransferConnectionQuery>;\nexport type TransferConnectionLazyQueryHookResult = ReturnType<typeof useTransferConnectionLazyQuery>;\nexport type TransferConnectionQueryResult = Apollo.QueryResult<TransferConnectionQuery, TransferConnectionQueryVariables>;\nexport const UserArticleConnectionDocument = gql`\n    query UserArticleConnection($mixinId: ID!, $type: String!, $after: String) {\n  userArticleConnection(mixinId: $mixinId, type: $type, after: $after) {\n    nodes {\n      uuid\n      title\n      intro\n      price\n      revenue\n      ordersCount\n      state\n      author {\n        name\n        avatarUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useUserArticleConnectionQuery__\n *\n * To run a query within a React component, call `useUserArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserArticleConnectionQuery({\n *   variables: {\n *      mixinId: // value for 'mixinId'\n *      type: // value for 'type'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useUserArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>(UserArticleConnectionDocument, options);\n      }\nexport function useUserArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>(UserArticleConnectionDocument, options);\n        }\nexport type UserArticleConnectionQueryHookResult = ReturnType<typeof useUserArticleConnectionQuery>;\nexport type UserArticleConnectionLazyQueryHookResult = ReturnType<typeof useUserArticleConnectionLazyQuery>;\nexport type UserArticleConnectionQueryResult = Apollo.QueryResult<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>;\nexport const UserDocument = gql`\n    query User($mixinId: ID!) {\n  user(mixinId: $mixinId) {\n    id\n    name\n    mixinId\n    mixinUuid\n    avatarUrl\n    bio\n    authoringSubscribed\n    readingSubscribed\n    statistics {\n      articlesCount\n      authorRevenueTotalUsd\n      readerRevenueTotalUsd\n    }\n  }\n}\n    `;\n\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      mixinId: // value for 'mixinId'\n *   },\n * });\n */\nexport function useUserQuery(baseOptions: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, options);\n      }\nexport function useUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(UserDocument, options);\n        }\nexport type UserQueryHookResult = ReturnType<typeof useUserQuery>;\nexport type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;\nexport type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;\nexport const ClearNotificationsDocument = gql`\n    mutation ClearNotifications($input: ClearNotificationsMutationInput!) {\n  clearNotifications(input: $input)\n}\n    `;\nexport type ClearNotificationsMutationFn = Apollo.MutationFunction<ClearNotificationsMutation, ClearNotificationsMutationVariables>;\n\n/**\n * __useClearNotificationsMutation__\n *\n * To run a mutation, you first call `useClearNotificationsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useClearNotificationsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [clearNotificationsMutation, { data, loading, error }] = useClearNotificationsMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useClearNotificationsMutation(baseOptions?: Apollo.MutationHookOptions<ClearNotificationsMutation, ClearNotificationsMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ClearNotificationsMutation, ClearNotificationsMutationVariables>(ClearNotificationsDocument, options);\n      }\nexport type ClearNotificationsMutationHookResult = ReturnType<typeof useClearNotificationsMutation>;\nexport type ClearNotificationsMutationResult = Apollo.MutationResult<ClearNotificationsMutation>;\nexport type ClearNotificationsMutationOptions = Apollo.BaseMutationOptions<ClearNotificationsMutation, ClearNotificationsMutationVariables>;\nexport const CreateAccessTokenDocument = gql`\n    mutation CreateAccessToken($input: CreateAccessTokenMutationInput!) {\n  createAccessToken(input: $input) {\n    id\n    value\n    memo\n  }\n}\n    `;\nexport type CreateAccessTokenMutationFn = Apollo.MutationFunction<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>;\n\n/**\n * __useCreateAccessTokenMutation__\n *\n * To run a mutation, you first call `useCreateAccessTokenMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAccessTokenMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAccessTokenMutation, { data, loading, error }] = useCreateAccessTokenMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateAccessTokenMutation(baseOptions?: Apollo.MutationHookOptions<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>(CreateAccessTokenDocument, options);\n      }\nexport type CreateAccessTokenMutationHookResult = ReturnType<typeof useCreateAccessTokenMutation>;\nexport type CreateAccessTokenMutationResult = Apollo.MutationResult<CreateAccessTokenMutation>;\nexport type CreateAccessTokenMutationOptions = Apollo.BaseMutationOptions<CreateAccessTokenMutation, CreateAccessTokenMutationVariables>;\nexport const CreateArticleDocument = gql`\n    mutation CreateArticle($input: CreateArticleMutationInput!) {\n  createArticle(input: $input) {\n    error\n  }\n}\n    `;\nexport type CreateArticleMutationFn = Apollo.MutationFunction<CreateArticleMutation, CreateArticleMutationVariables>;\n\n/**\n * __useCreateArticleMutation__\n *\n * To run a mutation, you first call `useCreateArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createArticleMutation, { data, loading, error }] = useCreateArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateArticleMutation(baseOptions?: Apollo.MutationHookOptions<CreateArticleMutation, CreateArticleMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreateArticleMutation, CreateArticleMutationVariables>(CreateArticleDocument, options);\n      }\nexport type CreateArticleMutationHookResult = ReturnType<typeof useCreateArticleMutation>;\nexport type CreateArticleMutationResult = Apollo.MutationResult<CreateArticleMutation>;\nexport type CreateArticleMutationOptions = Apollo.BaseMutationOptions<CreateArticleMutation, CreateArticleMutationVariables>;\nexport const DeleteAccessTokenDocument = gql`\n    mutation DeleteAccessToken($input: DeleteAccessTokenMutationInput!) {\n  deleteAccessToken(input: $input)\n}\n    `;\nexport type DeleteAccessTokenMutationFn = Apollo.MutationFunction<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>;\n\n/**\n * __useDeleteAccessTokenMutation__\n *\n * To run a mutation, you first call `useDeleteAccessTokenMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAccessTokenMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAccessTokenMutation, { data, loading, error }] = useDeleteAccessTokenMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useDeleteAccessTokenMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>(DeleteAccessTokenDocument, options);\n      }\nexport type DeleteAccessTokenMutationHookResult = ReturnType<typeof useDeleteAccessTokenMutation>;\nexport type DeleteAccessTokenMutationResult = Apollo.MutationResult<DeleteAccessTokenMutation>;\nexport type DeleteAccessTokenMutationOptions = Apollo.BaseMutationOptions<DeleteAccessTokenMutation, DeleteAccessTokenMutationVariables>;\nexport const HideArticleDocument = gql`\n    mutation HideArticle($input: HideArticleMutationInput!) {\n  hideArticle(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type HideArticleMutationFn = Apollo.MutationFunction<HideArticleMutation, HideArticleMutationVariables>;\n\n/**\n * __useHideArticleMutation__\n *\n * To run a mutation, you first call `useHideArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useHideArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [hideArticleMutation, { data, loading, error }] = useHideArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useHideArticleMutation(baseOptions?: Apollo.MutationHookOptions<HideArticleMutation, HideArticleMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<HideArticleMutation, HideArticleMutationVariables>(HideArticleDocument, options);\n      }\nexport type HideArticleMutationHookResult = ReturnType<typeof useHideArticleMutation>;\nexport type HideArticleMutationResult = Apollo.MutationResult<HideArticleMutation>;\nexport type HideArticleMutationOptions = Apollo.BaseMutationOptions<HideArticleMutation, HideArticleMutationVariables>;\nexport const PublishArticleDocument = gql`\n    mutation PublishArticle($input: PublishArticleMutationInput!) {\n  publishArticle(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type PublishArticleMutationFn = Apollo.MutationFunction<PublishArticleMutation, PublishArticleMutationVariables>;\n\n/**\n * __usePublishArticleMutation__\n *\n * To run a mutation, you first call `usePublishArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePublishArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [publishArticleMutation, { data, loading, error }] = usePublishArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function usePublishArticleMutation(baseOptions?: Apollo.MutationHookOptions<PublishArticleMutation, PublishArticleMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<PublishArticleMutation, PublishArticleMutationVariables>(PublishArticleDocument, options);\n      }\nexport type PublishArticleMutationHookResult = ReturnType<typeof usePublishArticleMutation>;\nexport type PublishArticleMutationResult = Apollo.MutationResult<PublishArticleMutation>;\nexport type PublishArticleMutationOptions = Apollo.BaseMutationOptions<PublishArticleMutation, PublishArticleMutationVariables>;\nexport const ReadNotificationDocument = gql`\n    mutation ReadNotification($input: ReadNotificationMutationInput!) {\n  readNotification(input: $input) {\n    id\n    readAt\n  }\n}\n    `;\nexport type ReadNotificationMutationFn = Apollo.MutationFunction<ReadNotificationMutation, ReadNotificationMutationVariables>;\n\n/**\n * __useReadNotificationMutation__\n *\n * To run a mutation, you first call `useReadNotificationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReadNotificationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [readNotificationMutation, { data, loading, error }] = useReadNotificationMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useReadNotificationMutation(baseOptions?: Apollo.MutationHookOptions<ReadNotificationMutation, ReadNotificationMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ReadNotificationMutation, ReadNotificationMutationVariables>(ReadNotificationDocument, options);\n      }\nexport type ReadNotificationMutationHookResult = ReturnType<typeof useReadNotificationMutation>;\nexport type ReadNotificationMutationResult = Apollo.MutationResult<ReadNotificationMutation>;\nexport type ReadNotificationMutationOptions = Apollo.BaseMutationOptions<ReadNotificationMutation, ReadNotificationMutationVariables>;\nexport const ReadNotificationsDocument = gql`\n    mutation ReadNotifications($input: ReadNotificationsMutationInput!) {\n  readNotifications(input: $input)\n}\n    `;\nexport type ReadNotificationsMutationFn = Apollo.MutationFunction<ReadNotificationsMutation, ReadNotificationsMutationVariables>;\n\n/**\n * __useReadNotificationsMutation__\n *\n * To run a mutation, you first call `useReadNotificationsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useReadNotificationsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [readNotificationsMutation, { data, loading, error }] = useReadNotificationsMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useReadNotificationsMutation(baseOptions?: Apollo.MutationHookOptions<ReadNotificationsMutation, ReadNotificationsMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<ReadNotificationsMutation, ReadNotificationsMutationVariables>(ReadNotificationsDocument, options);\n      }\nexport type ReadNotificationsMutationHookResult = ReturnType<typeof useReadNotificationsMutation>;\nexport type ReadNotificationsMutationResult = Apollo.MutationResult<ReadNotificationsMutation>;\nexport type ReadNotificationsMutationOptions = Apollo.BaseMutationOptions<ReadNotificationsMutation, ReadNotificationsMutationVariables>;\nexport const SwitchLocaleDocument = gql`\n    mutation SwitchLocale($input: SwitchLocaleMutationInput!) {\n  switchLocale(input: $input)\n}\n    `;\nexport type SwitchLocaleMutationFn = Apollo.MutationFunction<SwitchLocaleMutation, SwitchLocaleMutationVariables>;\n\n/**\n * __useSwitchLocaleMutation__\n *\n * To run a mutation, you first call `useSwitchLocaleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSwitchLocaleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [switchLocaleMutation, { data, loading, error }] = useSwitchLocaleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useSwitchLocaleMutation(baseOptions?: Apollo.MutationHookOptions<SwitchLocaleMutation, SwitchLocaleMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<SwitchLocaleMutation, SwitchLocaleMutationVariables>(SwitchLocaleDocument, options);\n      }\nexport type SwitchLocaleMutationHookResult = ReturnType<typeof useSwitchLocaleMutation>;\nexport type SwitchLocaleMutationResult = Apollo.MutationResult<SwitchLocaleMutation>;\nexport type SwitchLocaleMutationOptions = Apollo.BaseMutationOptions<SwitchLocaleMutation, SwitchLocaleMutationVariables>;\nexport const UpdateArticleDocument = gql`\n    mutation UpdateArticle($input: UpdateArticleMutationInput!) {\n  updateArticle(input: $input) {\n    error\n  }\n}\n    `;\nexport type UpdateArticleMutationFn = Apollo.MutationFunction<UpdateArticleMutation, UpdateArticleMutationVariables>;\n\n/**\n * __useUpdateArticleMutation__\n *\n * To run a mutation, you first call `useUpdateArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateArticleMutation, { data, loading, error }] = useUpdateArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateArticleMutation(baseOptions?: Apollo.MutationHookOptions<UpdateArticleMutation, UpdateArticleMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateArticleMutation, UpdateArticleMutationVariables>(UpdateArticleDocument, options);\n      }\nexport type UpdateArticleMutationHookResult = ReturnType<typeof useUpdateArticleMutation>;\nexport type UpdateArticleMutationResult = Apollo.MutationResult<UpdateArticleMutation>;\nexport type UpdateArticleMutationOptions = Apollo.BaseMutationOptions<UpdateArticleMutation, UpdateArticleMutationVariables>;\nexport const UpdateNotificationSettingDocument = gql`\n    mutation UpdateNotificationSetting($input: UpdateNotificationSettingMutationInput!) {\n  updateNotificationSetting(input: $input) {\n    id\n    webhookUrl\n    articlePublishedWeb\n    articlePublishedMixinBot\n    articlePublishedWebhook\n    articleBoughtWeb\n    articleBoughtMixinBot\n    articleBoughtWebhook\n    articleRewardedWeb\n    articleRewardedMixinBot\n    articleRewardedWebhook\n    commentCreatedWeb\n    commentCreatedMixinBot\n    commentCreatedWebhook\n    taggingCreatedWeb\n    taggingCreatedMixinBot\n    taggingCreatedWebhook\n    transferProcessedWeb\n    transferProcessedMixinBot\n    transferProcessedWebhook\n  }\n}\n    `;\nexport type UpdateNotificationSettingMutationFn = Apollo.MutationFunction<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>;\n\n/**\n * __useUpdateNotificationSettingMutation__\n *\n * To run a mutation, you first call `useUpdateNotificationSettingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateNotificationSettingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateNotificationSettingMutation, { data, loading, error }] = useUpdateNotificationSettingMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateNotificationSettingMutation(baseOptions?: Apollo.MutationHookOptions<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>(UpdateNotificationSettingDocument, options);\n      }\nexport type UpdateNotificationSettingMutationHookResult = ReturnType<typeof useUpdateNotificationSettingMutation>;\nexport type UpdateNotificationSettingMutationResult = Apollo.MutationResult<UpdateNotificationSettingMutation>;\nexport type UpdateNotificationSettingMutationOptions = Apollo.BaseMutationOptions<UpdateNotificationSettingMutation, UpdateNotificationSettingMutationVariables>;\nexport const MyAccessTokenConnectionDocument = gql`\n    query MyAccessTokenConnection($after: String) {\n  myAccessTokenConnection(after: $after) {\n    nodes {\n      id\n      memo\n      desensitizedValue\n      lastRequestAt\n      lastRequestIp\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyAccessTokenConnectionQuery__\n *\n * To run a query within a React component, call `useMyAccessTokenConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyAccessTokenConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyAccessTokenConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyAccessTokenConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>(MyAccessTokenConnectionDocument, options);\n      }\nexport function useMyAccessTokenConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>(MyAccessTokenConnectionDocument, options);\n        }\nexport type MyAccessTokenConnectionQueryHookResult = ReturnType<typeof useMyAccessTokenConnectionQuery>;\nexport type MyAccessTokenConnectionLazyQueryHookResult = ReturnType<typeof useMyAccessTokenConnectionLazyQuery>;\nexport type MyAccessTokenConnectionQueryResult = Apollo.QueryResult<MyAccessTokenConnectionQuery, MyAccessTokenConnectionQueryVariables>;\nexport const MyArticleConnectionDocument = gql`\n    query MyArticleConnection($type: String!, $state: String, $after: String) {\n  myArticleConnection(type: $type, state: $state, after: $after) {\n    nodes {\n      uuid\n      title\n      intro\n      price\n      revenue\n      ordersCount\n      state\n      author {\n        name\n        avatarUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyArticleConnectionQuery__\n *\n * To run a query within a React component, call `useMyArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyArticleConnectionQuery({\n *   variables: {\n *      type: // value for 'type'\n *      state: // value for 'state'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>(MyArticleConnectionDocument, options);\n      }\nexport function useMyArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>(MyArticleConnectionDocument, options);\n        }\nexport type MyArticleConnectionQueryHookResult = ReturnType<typeof useMyArticleConnectionQuery>;\nexport type MyArticleConnectionLazyQueryHookResult = ReturnType<typeof useMyArticleConnectionLazyQuery>;\nexport type MyArticleConnectionQueryResult = Apollo.QueryResult<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>;\nexport const MyArticleOrderConnectionDocument = gql`\n    query MyArticleOrderConnection($uuid: ID!, $orderType: String!, $after: String) {\n  myArticleOrderConnection(uuid: $uuid, orderType: $orderType, after: $after) {\n    nodes {\n      traceId\n      buyer {\n        avatarUrl\n        name\n      }\n      orderType\n      state\n      total\n      currency {\n        assetId\n        symbol\n        iconUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyArticleOrderConnectionQuery__\n *\n * To run a query within a React component, call `useMyArticleOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyArticleOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyArticleOrderConnectionQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *      orderType: // value for 'orderType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyArticleOrderConnectionQuery(baseOptions: Apollo.QueryHookOptions<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>(MyArticleOrderConnectionDocument, options);\n      }\nexport function useMyArticleOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>(MyArticleOrderConnectionDocument, options);\n        }\nexport type MyArticleOrderConnectionQueryHookResult = ReturnType<typeof useMyArticleOrderConnectionQuery>;\nexport type MyArticleOrderConnectionLazyQueryHookResult = ReturnType<typeof useMyArticleOrderConnectionLazyQuery>;\nexport type MyArticleOrderConnectionQueryResult = Apollo.QueryResult<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>;\nexport const MyArticleDocument = gql`\n    query MyArticle($uuid: ID!) {\n  myArticle(uuid: $uuid) {\n    id\n    uuid\n    title\n    intro\n    content\n    state\n    price\n    assetId\n    ordersCount\n    commentsCount\n    revenue\n    authorRevenueTotal\n    readerRevenueTotal\n    commentingSubscribed\n    upvotesCount\n    downvotesCount\n    wordsCount\n    tagsCount\n    tagNames\n    createdAt\n    updatedAt\n    buyers {\n      totalCount\n    }\n    buyOrders {\n      totalCount\n    }\n    rewarders {\n      totalCount\n    }\n    rewardOrders {\n      totalCount\n    }\n    comments {\n      totalCount\n    }\n    currency {\n      assetId\n      symbol\n      iconUrl\n      priceUsd\n      priceBtc\n    }\n  }\n}\n    `;\n\n/**\n * __useMyArticleQuery__\n *\n * To run a query within a React component, call `useMyArticleQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyArticleQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useMyArticleQuery(baseOptions: Apollo.QueryHookOptions<MyArticleQuery, MyArticleQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyArticleQuery, MyArticleQueryVariables>(MyArticleDocument, options);\n      }\nexport function useMyArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleQuery, MyArticleQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyArticleQuery, MyArticleQueryVariables>(MyArticleDocument, options);\n        }\nexport type MyArticleQueryHookResult = ReturnType<typeof useMyArticleQuery>;\nexport type MyArticleLazyQueryHookResult = ReturnType<typeof useMyArticleLazyQuery>;\nexport type MyArticleQueryResult = Apollo.QueryResult<MyArticleQuery, MyArticleQueryVariables>;\nexport const MyAuthoringSubscriptionConnectionDocument = gql`\n    query MyAuthoringSubscriptionConnection($after: String) {\n  myAuthoringSubscriptionConnection(after: $after) {\n    nodes {\n      id\n      mixinId\n      name\n      avatarUrl\n      bio\n      statistics {\n        articlesCount\n        authorRevenueTotalUsd\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyAuthoringSubscriptionConnectionQuery__\n *\n * To run a query within a React component, call `useMyAuthoringSubscriptionConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyAuthoringSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyAuthoringSubscriptionConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyAuthoringSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>(MyAuthoringSubscriptionConnectionDocument, options);\n      }\nexport function useMyAuthoringSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>(MyAuthoringSubscriptionConnectionDocument, options);\n        }\nexport type MyAuthoringSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyAuthoringSubscriptionConnectionQuery>;\nexport type MyAuthoringSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyAuthoringSubscriptionConnectionLazyQuery>;\nexport type MyAuthoringSubscriptionConnectionQueryResult = Apollo.QueryResult<MyAuthoringSubscriptionConnectionQuery, MyAuthoringSubscriptionConnectionQueryVariables>;\nexport const MyCommentingSubscriptionConnectionDocument = gql`\n    query MyCommentingSubscriptionConnection($after: String) {\n  myCommentingSubscriptionConnection(after: $after) {\n    nodes {\n      id\n      uuid\n      title\n      revenue\n      intro\n      commentsCount\n      author {\n        name\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyCommentingSubscriptionConnectionQuery__\n *\n * To run a query within a React component, call `useMyCommentingSubscriptionConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyCommentingSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyCommentingSubscriptionConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyCommentingSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>(MyCommentingSubscriptionConnectionDocument, options);\n      }\nexport function useMyCommentingSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>(MyCommentingSubscriptionConnectionDocument, options);\n        }\nexport type MyCommentingSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyCommentingSubscriptionConnectionQuery>;\nexport type MyCommentingSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyCommentingSubscriptionConnectionLazyQuery>;\nexport type MyCommentingSubscriptionConnectionQueryResult = Apollo.QueryResult<MyCommentingSubscriptionConnectionQuery, MyCommentingSubscriptionConnectionQueryVariables>;\nexport const MyNotificationConnectionDocument = gql`\n    query MyNotificationConnection($after: String, $type: String) {\n  myNotificationConnection(after: $after, type: $type) {\n    nodes {\n      id\n      type\n      message\n      url\n      readAt\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyNotificationConnectionQuery__\n *\n * To run a query within a React component, call `useMyNotificationConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyNotificationConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyNotificationConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *      type: // value for 'type'\n *   },\n * });\n */\nexport function useMyNotificationConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>(MyNotificationConnectionDocument, options);\n      }\nexport function useMyNotificationConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>(MyNotificationConnectionDocument, options);\n        }\nexport type MyNotificationConnectionQueryHookResult = ReturnType<typeof useMyNotificationConnectionQuery>;\nexport type MyNotificationConnectionLazyQueryHookResult = ReturnType<typeof useMyNotificationConnectionLazyQuery>;\nexport type MyNotificationConnectionQueryResult = Apollo.QueryResult<MyNotificationConnectionQuery, MyNotificationConnectionQueryVariables>;\nexport const MyNotificationSettingDocument = gql`\n    query MyNotificationSetting {\n  myNotificationSetting {\n    id\n    webhookUrl\n    articlePublishedWeb\n    articlePublishedMixinBot\n    articlePublishedWebhook\n    articleBoughtWeb\n    articleBoughtMixinBot\n    articleBoughtWebhook\n    articleRewardedWeb\n    articleRewardedMixinBot\n    articleRewardedWebhook\n    commentCreatedWeb\n    commentCreatedMixinBot\n    commentCreatedWebhook\n    taggingCreatedWeb\n    taggingCreatedMixinBot\n    taggingCreatedWebhook\n    transferProcessedWeb\n    transferProcessedMixinBot\n    transferProcessedWebhook\n  }\n}\n    `;\n\n/**\n * __useMyNotificationSettingQuery__\n *\n * To run a query within a React component, call `useMyNotificationSettingQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyNotificationSettingQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyNotificationSettingQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyNotificationSettingQuery(baseOptions?: Apollo.QueryHookOptions<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>(MyNotificationSettingDocument, options);\n      }\nexport function useMyNotificationSettingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>(MyNotificationSettingDocument, options);\n        }\nexport type MyNotificationSettingQueryHookResult = ReturnType<typeof useMyNotificationSettingQuery>;\nexport type MyNotificationSettingLazyQueryHookResult = ReturnType<typeof useMyNotificationSettingLazyQuery>;\nexport type MyNotificationSettingQueryResult = Apollo.QueryResult<MyNotificationSettingQuery, MyNotificationSettingQueryVariables>;\nexport const MyPaymentConnectionDocument = gql`\n    query MyPaymentConnection($after: String) {\n  myPaymentConnection(after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      assetId\n      state\n      createdAt\n      order {\n        item {\n          ... on Article {\n            title\n            uuid\n          }\n        }\n      }\n      currency {\n        assetId\n        iconUrl\n        symbol\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyPaymentConnectionQuery__\n *\n * To run a query within a React component, call `useMyPaymentConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyPaymentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyPaymentConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyPaymentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>(MyPaymentConnectionDocument, options);\n      }\nexport function useMyPaymentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>(MyPaymentConnectionDocument, options);\n        }\nexport type MyPaymentConnectionQueryHookResult = ReturnType<typeof useMyPaymentConnectionQuery>;\nexport type MyPaymentConnectionLazyQueryHookResult = ReturnType<typeof useMyPaymentConnectionLazyQuery>;\nexport type MyPaymentConnectionQueryResult = Apollo.QueryResult<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>;\nexport const MyReadingSubscriptionConnectionDocument = gql`\n    query MyReadingSubscriptionConnection($after: String) {\n  myReadingSubscriptionConnection(after: $after) {\n    nodes {\n      id\n      mixinId\n      name\n      avatarUrl\n      bio\n      statistics {\n        boughtArticlesCount\n        readerRevenueTotalUsd\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyReadingSubscriptionConnectionQuery__\n *\n * To run a query within a React component, call `useMyReadingSubscriptionConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyReadingSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyReadingSubscriptionConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyReadingSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>(MyReadingSubscriptionConnectionDocument, options);\n      }\nexport function useMyReadingSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>(MyReadingSubscriptionConnectionDocument, options);\n        }\nexport type MyReadingSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyReadingSubscriptionConnectionQuery>;\nexport type MyReadingSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyReadingSubscriptionConnectionLazyQuery>;\nexport type MyReadingSubscriptionConnectionQueryResult = Apollo.QueryResult<MyReadingSubscriptionConnectionQuery, MyReadingSubscriptionConnectionQueryVariables>;\nexport const MyStatisticsDocument = gql`\n    query MyStatistics {\n  myStatistics {\n    articlesCount\n    boughtArticlesCount\n    authorRevenueTotalPrs\n    readerRevenueTotalPrs\n    authorRevenueTotalBtc\n    readerRevenueTotalBtc\n    authorRevenueTotalUsd\n    readerRevenueTotalUsd\n    paymentTotalUsd\n  }\n}\n    `;\n\n/**\n * __useMyStatisticsQuery__\n *\n * To run a query within a React component, call `useMyStatisticsQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyStatisticsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyStatisticsQuery(baseOptions?: Apollo.QueryHookOptions<MyStatisticsQuery, MyStatisticsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyStatisticsQuery, MyStatisticsQueryVariables>(MyStatisticsDocument, options);\n      }\nexport function useMyStatisticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyStatisticsQuery, MyStatisticsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyStatisticsQuery, MyStatisticsQueryVariables>(MyStatisticsDocument, options);\n        }\nexport type MyStatisticsQueryHookResult = ReturnType<typeof useMyStatisticsQuery>;\nexport type MyStatisticsLazyQueryHookResult = ReturnType<typeof useMyStatisticsLazyQuery>;\nexport type MyStatisticsQueryResult = Apollo.QueryResult<MyStatisticsQuery, MyStatisticsQueryVariables>;\nexport const MySwapOrderConnectionDocument = gql`\n    query MySwapOrderConnection($after: String) {\n  mySwapOrderConnection(after: $after) {\n    nodes {\n      id\n      traceId\n      state\n      funds\n      amount\n      minAmount\n      fillAssetId\n      payAssetId\n      article {\n        uuid\n        title\n        price\n      }\n      payAsset {\n        assetId\n        iconUrl\n        symbol\n      }\n      fillAsset {\n        assetId\n        iconUrl\n        symbol\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMySwapOrderConnectionQuery__\n *\n * To run a query within a React component, call `useMySwapOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMySwapOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMySwapOrderConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMySwapOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>(MySwapOrderConnectionDocument, options);\n      }\nexport function useMySwapOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>(MySwapOrderConnectionDocument, options);\n        }\nexport type MySwapOrderConnectionQueryHookResult = ReturnType<typeof useMySwapOrderConnectionQuery>;\nexport type MySwapOrderConnectionLazyQueryHookResult = ReturnType<typeof useMySwapOrderConnectionLazyQuery>;\nexport type MySwapOrderConnectionQueryResult = Apollo.QueryResult<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>;\nexport const MyTagSubscriptionConnectionDocument = gql`\n    query MyTagSubscriptionConnection($after: String) {\n  myTagSubscriptionConnection(after: $after) {\n    nodes {\n      id\n      name\n      color\n      articlesCount\n      subscribersCount\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyTagSubscriptionConnectionQuery__\n *\n * To run a query within a React component, call `useMyTagSubscriptionConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyTagSubscriptionConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyTagSubscriptionConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyTagSubscriptionConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>(MyTagSubscriptionConnectionDocument, options);\n      }\nexport function useMyTagSubscriptionConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>(MyTagSubscriptionConnectionDocument, options);\n        }\nexport type MyTagSubscriptionConnectionQueryHookResult = ReturnType<typeof useMyTagSubscriptionConnectionQuery>;\nexport type MyTagSubscriptionConnectionLazyQueryHookResult = ReturnType<typeof useMyTagSubscriptionConnectionLazyQuery>;\nexport type MyTagSubscriptionConnectionQueryResult = Apollo.QueryResult<MyTagSubscriptionConnectionQuery, MyTagSubscriptionConnectionQueryVariables>;\nexport const MyTransferConnectionDocument = gql`\n    query MyTransferConnection($transferType: String, $after: String) {\n  myTransferConnection(transferType: $transferType, after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      assetId\n      transferType\n      createdAt\n      article {\n        uuid\n        title\n      }\n      currency {\n        assetId\n        iconUrl\n        symbol\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyTransferConnectionQuery__\n *\n * To run a query within a React component, call `useMyTransferConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyTransferConnectionQuery({\n *   variables: {\n *      transferType: // value for 'transferType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>(MyTransferConnectionDocument, options);\n      }\nexport function useMyTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>(MyTransferConnectionDocument, options);\n        }\nexport type MyTransferConnectionQueryHookResult = ReturnType<typeof useMyTransferConnectionQuery>;\nexport type MyTransferConnectionLazyQueryHookResult = ReturnType<typeof useMyTransferConnectionLazyQuery>;\nexport type MyTransferConnectionQueryResult = Apollo.QueryResult<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>;\nexport const PricableCurrenciesDocument = gql`\n    query PricableCurrencies {\n  pricableCurrencies {\n    id\n    assetId\n    name\n    symbol\n    iconUrl\n    priceUsd\n    priceBtc\n  }\n}\n    `;\n\n/**\n * __usePricableCurrenciesQuery__\n *\n * To run a query within a React component, call `usePricableCurrenciesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePricableCurrenciesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePricableCurrenciesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePricableCurrenciesQuery(baseOptions?: Apollo.QueryHookOptions<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>(PricableCurrenciesDocument, options);\n      }\nexport function usePricableCurrenciesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>(PricableCurrenciesDocument, options);\n        }\nexport type PricableCurrenciesQueryHookResult = ReturnType<typeof usePricableCurrenciesQuery>;\nexport type PricableCurrenciesLazyQueryHookResult = ReturnType<typeof usePricableCurrenciesLazyQuery>;\nexport type PricableCurrenciesQueryResult = Apollo.QueryResult<PricableCurrenciesQuery, PricableCurrenciesQueryVariables>;","var map = {\n\t\"./locale\": 89234,\n\t\"./locale.js\": 89234\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 11748;"],"sourceRoot":""}