{"version":3,"sources":["webpack://prsdigg/./app/packs/apps/admin/Menus.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/LoginPage/LoginPage.tsx","webpack://prsdigg/./app/packs/apps/admin/components/LoadingComponent/LoadingComponent.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/AnnouncementsPage/AnnouncementsPage.tsx","webpack://prsdigg/./app/packs/apps/admin/components/ArticleSnapshotsComponent/ArticleSnapshotsComponent.tsx","webpack://prsdigg/./app/packs/apps/admin/components/CommentsComponent/CommentsComponent.tsx","webpack://prsdigg/./app/packs/apps/admin/shared/contexts/CurrentAdminContext.tsx","webpack://prsdigg/./app/packs/apps/admin/shared/contexts/PrsdiggContext.tsx","webpack://prsdigg/./app/packs/apps/admin/components/MixinNetworkSnapshotsComponent/MixinNetworkSnapshotComponent.tsx","webpack://prsdigg/./app/packs/apps/admin/components/OrdersComponent/OrdersComponent.tsx","webpack://prsdigg/./app/packs/apps/admin/components/TransfersComponent/TransfersComponent.tsx","webpack://prsdigg/./app/packs/apps/admin/components/WalletBalanceComponent/WalletBalanceComponent.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/ArticlePage/ArticlePage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/ArticleSnapshotsPage/ArticleSnapshotsPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/ArticlesPage/ArticlesPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/BalancePage/BalancePage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/BonusesPage/components/BonusFormModalComponent.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/BonusesPage/BonusesPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/CommentsPage/CommentsPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/MixinMessagesPage/MixinMessagesPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/MixinNetworkSnapshotsPage/MixinNetworkSnapshotsPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/OverviewPage/OverviewPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/PaymentsPage/PaymentsPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/PrsAccountsPage/PrsAccountsPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/PrsTransactionsPage/PrsTransactionsPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/SwapOrdersPage/SwapOrdersPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/TransfersPage/TransfersPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/UserPage/UserPage.tsx","webpack://prsdigg/./app/packs/apps/admin/pages/UsersPage/UsersPage.tsx","webpack://prsdigg/./app/packs/apps/admin/Routes.tsx","webpack://prsdigg/./app/packs/entrypoints/admin.js","webpack://prsdigg/./app/packs/apps/admin/App.tsx"],"names":["Menus","theme","mode","style","height","margin","lineHeight","textAlign","to","DashboardOutlined","UserOutlined","key","icon","FileTextOutlined","title","LinkOutlined","CommentOutlined","PayCircleOutlined","SwapOutlined","TransactionOutlined","NotificationOutlined","MessageOutlined","TableOutlined","TrophyOutlined","WalletOutlined","href","LogoutOutlined","Content","LoginPage","login","useAdminLoginMutation","update","_","error","data","adminLogin","message","location","replace","className","display","minHeight","onFinish","values","variables","input","width","name","rules","required","prefix","color","placeholder","ClockCircleOutlined","type","loading","htmlType","LoadingComponent","padding","AnnouncementsPage","useAdminAnnouncementConnectionQuery","fetchMore","refetch","useState","content","setContent","messageType","setMessageType","editing","setEditing","modalVisible","setModalVisible","createAnnouncement","useAdminCreateAnouncementMutation","adminCreateAnnouncement","updateAnnouncement","useAdminUpdateAnouncementMutation","adminUpdateAnnouncement","deleteAnnouncement","useAdminDeleteAnouncementMutation","adminDeleteAnnouncement","deliverAnnouncement","useAdminDeliverAnouncementMutation","adminDeliverAnnouncement","previewAnnouncement","useAdminPreviewAnouncementMutation","adminPreviewAnnouncement","adminAnnouncementConnection","announcements","nodes","pageInfo","hasNextPage","endCursor","columns","dataIndex","render","deliveredAt","announcement","onConfirm","id","onClick","marginBottom","closable","visible","onCancel","onOk","value","onChange","e","currentTarget","autoSize","minRows","maxRows","target","scroll","x","dataSource","rowKey","pagination","disabled","after","ArticleSnapshotsComponent","props","articleUuid","useAdminArticleSnapshotConnectionQuery","useAdminSignArticleSnapshotMutation","signArticleSnapshot","signing","adminArticleSnapshotConnection","snapshots","snapshot","article","author","text","signatureUrl","state","size","CommentsComponent","commentableId","commentableType","authorMixinId","useCommentConnectionQuery","useAdminDeleteCommentMutation","err","deleteComment","deleting","useAdminRecoverCommentMutation","recover","recovering","commentConnection","comments","comment","src","avatarUrl","maxWidth","slice","commentable","uuid","deletedAt","CurrentAdminContext","React","PrsdiggContext","usePrsdigg","useContext","MixinNetworkSnapshotsComponent","appId","userId","filter","useAdminMixinNetworkSnapshotConnectionQuery","adminMixinNetworkSnapshotConnection","FOXSWAP_APP_ID","opponent","mixinId","opponentId","amount","currency","iconUrl","OrdersComponent","itemId","itemType","useAdminOrderConnectionQuery","adminOrderConnection","orders","order","buyer","TransfersComponent","sourceId","sourceType","useAdminTransferConnectionQuery","adminTransferConnection","transfers","transfer","recipient","processedAt","snapshotId","WalletBalanceComponent","useAdminWalletBalanceQuery","fetchPolicy","assets","adminWalletBalance","record","symbol","parseFloat","balance","pageSize","ArticlePage","useParams","history","useHistory","useAdminArticleQuery","adminArticle","onBack","goBack","bordered","label","price","ordersCount","revenue","commentsCount","createdAt","defaultActiveKey","tab","walletId","ArticleSnapshotsPage","ArticlesPage","query","setQuery","setState","debouncedQuery","useDebounce","wait","gutter","ArticlesComponent","useAdminArticleConnectionQuery","useAdminBlockArticleMutation","block","blocking","useAdminUnblockArticleMutation","unblock","unblocking","adminArticleConnection","articles","BalancePage","BonusesFormModalComponent","editingBonus","refetchBonuses","bonusForm","useAdminUserConnectionQuery","notifyOnNetworkStatusChange","createBonus","useAdminCreateBonusMutation","adminCreateBonus","resetFields","updateBonus","useAdminUpdateBonusMutation","adminUpdateBonus","useEffect","setFieldsValue","user","description","users","adminUserConnection","submit","labelCol","span","form","showSearch","filterOption","notFoundContent","onSearch","map","min","precision","BonusesPage","useAdminBonusConnectionQuery","deliverBonus","useAdminDeliverBonusMutation","adminDeliverBonus","adminBonusConnection","bonuses","bonus","CommentsPage","MixinMessagesPage","useAdminMixinMessageConnectionQuery","adminMixinMessageConnection","messages","MixinNetworkSnapshotsPage","setFilter","OverviewPage","useStatisticsQuery","statistics","usersCount","articlesCount","authorRevenueTotal","readerRevenueTotal","justify","toFixed","UserChart","ArticleChart","RevenueChart","useUserChartQuery","userChart","JSON","parse","AreaChartComponent","useArticleChartQuery","articleChart","useRevenueChartQuery","revenueChart","ResponsiveContainer","AreaChart","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","XAxis","dataKey","YAxis","CartesianGrid","strokeDasharray","Tooltip","Area","stroke","fillOpacity","fill","PaymentsPage","useAdminPaymentConnectionQuery","adminPaymentConnection","payments","payment","payer","orderType","PrsAccountsPage","status","setStatus","PrsAccountsComponent","useAdminPrsAccountConnectionQuery","adminPrsAccountConnection","accounts","account","PrsTransactionsPage","setType","PrsTransactionsComponent","useAdminPrsTransactionConnectionQuery","adminPrsTransactionConnection","transactions","transition","userAddress","transaction","prsAccount","SwapOrdersPage","useAdminSwapOrderConnectionQuery","adminSwapOrderConnection","swapOrders","swapOrder","funds","payAsset","fillAsset","minAmount","TransfersPage","UserPage","useAdminUserQuery","adminUser","authorRevenueTotalUsd","readerRevenueTotalUsd","UsersPage","orderBy","setOrderBy","UsersComponent","adminBanUser","useAdminBanUserMutation","adminUnbanUser","useAdminUnbanUserMutation","mixinUuid","revenueTotalUsd","paymentTotalUsd","bannedAt","Routes","path","exact","subTitle","extra","ReactOnRails","AdminApp","csrfToken","currentAdmin","prsdigg","ApolloProvider","client","apolloClient","Provider","basename","collapsible","background"],"mappings":"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","file":"js/admin-4823672336ff7b72cac1.js","sourcesContent":["import {\n  CommentOutlined,\n  DashboardOutlined,\n  FileTextOutlined,\n  LinkOutlined,\n  LogoutOutlined,\n  MessageOutlined,\n  NotificationOutlined,\n  PayCircleOutlined,\n  SwapOutlined,\n  TableOutlined,\n  TransactionOutlined,\n  TrophyOutlined,\n  UserOutlined,\n  WalletOutlined,\n} from '@ant-design/icons';\nimport { Menu } from 'antd';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Menus() {\n  return (\n    <Menu theme='dark' mode='inline'>\n      <div\n        style={{\n          height: '2rem',\n          margin: '1rem',\n          lineHeight: '2rem',\n          textAlign: 'center',\n        }}\n      >\n        Admin\n      </div>\n      <Menu.Item>\n        <Link to='/'>\n          <DashboardOutlined />\n          <span>Dashboard</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/users'>\n          <UserOutlined />\n          <span>Users</span>\n        </Link>\n      </Menu.Item>\n      <Menu.SubMenu key='article' icon={<FileTextOutlined />} title='Article'>\n        <Menu.Item>\n          <Link to='/articles'>\n            <span>Articles</span>\n          </Link>\n        </Menu.Item>\n        <Menu.Item>\n          <Link to='/article_snapshots'>\n            <span>Article Snapshots</span>\n          </Link>\n        </Menu.Item>\n      </Menu.SubMenu>\n      <Menu.SubMenu key='pressone' icon={<LinkOutlined />} title='PRESSOne'>\n        <Menu.Item>\n          <Link to='/prs_accounts'>\n            <span>Accounts</span>\n          </Link>\n        </Menu.Item>\n        <Menu.Item>\n          <Link to='/prs_transactions'>\n            <span>Transactions</span>\n          </Link>\n        </Menu.Item>\n      </Menu.SubMenu>\n      <Menu.Item>\n        <Link to='/comments'>\n          <CommentOutlined />\n          <span>Comments</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/payments'>\n          <PayCircleOutlined />\n          <span>Payments</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/swap_orders'>\n          <SwapOutlined />\n          <span>Swap Orders</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/transfers'>\n          <TransactionOutlined />\n          <span>Transfers</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/announcements'>\n          <NotificationOutlined />\n          <span>Announcements</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/mixin_messages'>\n          <MessageOutlined />\n          <span>Messages</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/mixin_network_snapshots'>\n          <TableOutlined />\n          <span>Snapshots</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/bonuses'>\n          <TrophyOutlined />\n          <span>Bonuses</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/balance'>\n          <WalletOutlined />\n          <span>Balance</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <a href='/admin/logout'>\n          <LogoutOutlined />\n          <span>Logout</span>\n        </a>\n      </Menu.Item>\n    </Menu>\n  );\n}\n","import { ClockCircleOutlined, UserOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, Layout, message } from 'antd';\nimport { useAdminLoginMutation } from 'graphqlTypes';\nimport React from 'react';\n\nconst { Content } = Layout;\n\nexport default function LoginPage() {\n  const [login] = useAdminLoginMutation({\n    update(\n      _,\n      {\n        data: {\n          adminLogin: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        location.replace('/admin');\n      }\n    },\n  });\n\n  return (\n    <Layout className='layout'>\n      <Content style={{ display: 'flex', minHeight: '100vh' }}>\n        <Form\n          onFinish={(values: any) => {\n            login({ variables: { input: values } });\n          }}\n          style={{ width: 300, margin: 'auto' }}\n        >\n          <Form.Item\n            name='name'\n            rules={[{ required: true, message: 'Username' }]}\n          >\n            <Input\n              prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder='Username'\n            />\n          </Form.Item>\n          <Form.Item\n            name='password'\n            rules={[{ required: true, message: 'Password' }]}\n          >\n            <Input\n              prefix={\n                <ClockCircleOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\n              }\n              type='password'\n              placeholder='Password'\n            />\n          </Form.Item>\n          <Form.Item>\n            <Button\n              loading={false}\n              type='primary'\n              htmlType='submit'\n              className='login-form-button'\n            >\n              Log in\n            </Button>\n          </Form.Item>\n        </Form>\n      </Content>\n    </Layout>\n  );\n}\n","import { Spin } from 'antd';\nimport React from 'react';\n\nexport default function LoadingComponent() {\n  return (\n    <div style={{ width: '100%', padding: '2rem', textAlign: 'center' }}>\n      <Spin />\n    </div>\n  );\n}\n","import {\n  Button,\n  Divider,\n  Input,\n  message,\n  Modal,\n  PageHeader,\n  Popconfirm,\n  Radio,\n  Table,\n} from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport {\n  Announcement,\n  useAdminAnnouncementConnectionQuery,\n  useAdminCreateAnouncementMutation,\n  useAdminDeleteAnouncementMutation,\n  useAdminDeliverAnouncementMutation,\n  useAdminPreviewAnouncementMutation,\n  useAdminUpdateAnouncementMutation,\n} from 'graphqlTypes';\nimport React, { useState } from 'react';\n\nexport default function AnnouncementsPage() {\n  const { data, loading, fetchMore, refetch } =\n    useAdminAnnouncementConnectionQuery();\n  const [content, setContent] = useState('');\n  const [messageType, setMessageType] =\n    useState<'PLAIN_TEXT' | 'PLAIN_POST' | string>('PLAIN_TEXT');\n  const [editing, setEditing] = useState(null);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [createAnnouncement] = useAdminCreateAnouncementMutation({\n    update(\n      _,\n      {\n        data: {\n          adminCreateAnnouncement: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        setModalVisible(false);\n        message.success('Created!');\n        refetch();\n      }\n    },\n  });\n  const [updateAnnouncement] = useAdminUpdateAnouncementMutation({\n    update(\n      _,\n      {\n        data: {\n          adminUpdateAnnouncement: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        setModalVisible(false);\n        message.success('updated!');\n        refetch();\n      }\n    },\n  });\n  const [deleteAnnouncement] = useAdminDeleteAnouncementMutation({\n    update(\n      _,\n      {\n        data: {\n          adminDeleteAnnouncement: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        message.success('deleted!');\n        refetch();\n      }\n    },\n  });\n  const [deliverAnnouncement] = useAdminDeliverAnouncementMutation({\n    update(\n      _,\n      {\n        data: {\n          adminDeliverAnnouncement: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        message.success('delivered!');\n        refetch();\n      }\n    },\n  });\n  const [previewAnnouncement] = useAdminPreviewAnouncementMutation({\n    update(\n      _,\n      {\n        data: {\n          adminPreviewAnnouncement: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        message.success('Check it in admin group!');\n        refetch();\n      }\n    },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n  const {\n    adminAnnouncementConnection: {\n      nodes: announcements,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<Announcement>> = [\n    {\n      dataIndex: 'id',\n      key: 'id',\n      title: 'ID',\n    },\n    {\n      dataIndex: 'messageType',\n      key: 'messageType',\n      title: 'messageType',\n    },\n    {\n      dataIndex: 'content',\n      key: 'content',\n      render: (content) => <div>{content}</div>,\n      title: 'content',\n    },\n    {\n      dataIndex: 'state',\n      key: 'state',\n      title: 'state',\n    },\n    {\n      dataIndex: 'deliveredAt',\n      key: 'deliveredAt',\n      render: (deliveredAt) => deliveredAt || '-',\n      title: 'deliveredAt',\n    },\n    {\n      dataIndex: 'actions',\n      key: 'actions',\n      render: (_, announcement) => (\n        <span>\n          <Popconfirm\n            title='Are you sure to deliver message to all users?'\n            onConfirm={() =>\n              deliverAnnouncement({\n                variables: { input: { id: announcement.id } },\n              })\n            }\n          >\n            <a>Deliver</a>\n          </Popconfirm>\n          <Divider type='vertical' />\n          <Popconfirm\n            title='Are you sure to deliver message to admin group for preview?'\n            onConfirm={() =>\n              previewAnnouncement({\n                variables: { input: { id: announcement.id } },\n              })\n            }\n          >\n            <a>Preview</a>\n          </Popconfirm>\n          <Divider type='vertical' />\n          <Popconfirm\n            title='Are you sure to delete?'\n            onConfirm={() =>\n              deleteAnnouncement({\n                variables: { input: { id: announcement.id } },\n              })\n            }\n          >\n            <a>Delete</a>\n          </Popconfirm>\n          <Divider type='vertical' />\n          <a\n            onClick={() => {\n              setEditing(announcement);\n              setContent(announcement.content);\n              setMessageType(announcement.messageType);\n              setModalVisible(true);\n            }}\n          >\n            Edit\n          </a>\n        </span>\n      ),\n      title: 'Actions',\n    },\n  ];\n\n  return (\n    <div>\n      <PageHeader title='Announcements' />\n      <div style={{ marginBottom: '1rem' }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            setContent('');\n            setMessageType('PLAIN_TEXT');\n            setEditing(null);\n            setModalVisible(true);\n          }}\n        >\n          New\n        </Button>\n        <Modal\n          title={editing ? 'Edit' : 'New'}\n          closable={false}\n          visible={modalVisible}\n          onCancel={() => setModalVisible(false)}\n          onOk={() => {\n            if (editing) {\n              updateAnnouncement({\n                variables: {\n                  input: {\n                    id: editing.id,\n                    content,\n                    messageType,\n                  },\n                },\n              });\n            } else {\n              createAnnouncement({\n                variables: {\n                  input: {\n                    content,\n                    messageType,\n                  },\n                },\n              });\n            }\n          }}\n        >\n          <div>\n            <Input.TextArea\n              value={content}\n              onChange={(e) => setContent(e.currentTarget.value)}\n              autoSize={{ minRows: 3, maxRows: 10 }}\n            />\n          </div>\n          <div>\n            <Radio.Group\n              value={messageType}\n              onChange={(e) => setMessageType(e.target.value)}\n            >\n              <Radio value='PLAIN_TEXT'>Text</Radio>\n              <Radio value='PLAIN_POST'>Post</Radio>\n            </Radio.Group>\n          </div>\n        </Modal>\n      </div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={announcements}\n        rowKey='id'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { Button, Popconfirm, Popover, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport {\n  ArticleSnapshot,\n  useAdminArticleSnapshotConnectionQuery,\n  useAdminSignArticleSnapshotMutation,\n} from 'graphqlTypes';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function ArticleSnapshotsComponent(props: {\n  articleUuid?: string;\n}) {\n  const { articleUuid } = props;\n  const { loading, data, fetchMore } = useAdminArticleSnapshotConnectionQuery({\n    variables: { articleUuid },\n  });\n  const [signArticleSnapshot, { loading: signing }] =\n    useAdminSignArticleSnapshotMutation();\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminArticleSnapshotConnection: {\n      nodes: snapshots,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n  const columns: Array<ColumnProps<ArticleSnapshot>> = [\n    {\n      dataIndex: 'id',\n      key: 'id',\n      title: 'ID',\n    },\n    {\n      dataIndex: 'article',\n      key: 'article',\n      render: (_, snapshot) => (\n        <span>\n          {snapshot.article.author.name}:{' '}\n          <Link to={`/articles/${snapshot.articleUuid}`}>\n            {snapshot.article.title}\n          </Link>\n        </span>\n      ),\n      title: 'Article',\n    },\n    {\n      dataIndex: 'state',\n      key: 'state',\n      title: 'State',\n    },\n    {\n      dataIndex: 'fileHash',\n      key: 'fileHash',\n      render: (text) =>\n        text ? (\n          <Popover content={text} className='w-14 line-clamp-1'>\n            {text}\n          </Popover>\n        ) : (\n          '-'\n        ),\n      title: 'File Hash',\n    },\n    {\n      dataIndex: 'txId',\n      key: 'txId',\n      render: (text) =>\n        text ? (\n          <Popover content={text} className='w-14 line-clamp-1'>\n            {text}\n          </Popover>\n        ) : (\n          '-'\n        ),\n      title: 'Tx ID',\n    },\n    {\n      dataIndex: 'signature',\n      key: 'signature',\n      render: (_, snapshot) =>\n        snapshot?.signatureUrl ? (\n          <a href={snapshot.signatureUrl} target='_blank'>\n            Link\n          </a>\n        ) : (\n          '-'\n        ),\n      title: 'signature',\n    },\n    {\n      dataIndex: 'requestedAt',\n      key: 'requestedAt',\n      render: (text) => text || '-',\n      title: 'requestedAt',\n    },\n    {\n      dataIndex: 'signedAt',\n      key: 'signedAt',\n      render: (text) => text || '-',\n      title: 'signedAt',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'CreatedAt',\n    },\n    {\n      dataIndex: 'actions',\n      key: 'actions',\n      render: (_, snapshot) => (\n        <Popconfirm\n          title='Are you sure to sign this snapshot?'\n          disabled={snapshot.state !== 'drafted' || signing}\n          onConfirm={() =>\n            signArticleSnapshot({ variables: { input: { id: snapshot.id } } })\n          }\n        >\n          <span\n            className={\n              snapshot.state === 'drafted' || signing\n                ? 'cursor-pointer'\n                : 'cursor-not-allowed text-gray-500'\n            }\n          >\n            Sign\n          </span>\n        </Popconfirm>\n      ),\n      title: 'Actions',\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={snapshots}\n        size='small'\n        rowKey='id'\n        pagination={false}\n      />\n      <div className='mb-4 text-center'>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { Avatar, Button, message, Popconfirm, Popover, Space } from 'antd';\nimport Table, { ColumnProps } from 'antd/lib/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport {\n  Comment as IComment,\n  useAdminDeleteCommentMutation,\n  useAdminRecoverCommentMutation,\n  useCommentConnectionQuery,\n} from 'graphqlTypes';\nimport React from 'react';\n\nexport default function CommentsComponent(props: {\n  commentableId?: string;\n  commentableType?: string;\n  authorMixinId?: string;\n}) {\n  const { commentableId, commentableType, authorMixinId } = props;\n  const { data, loading, fetchMore, refetch } = useCommentConnectionQuery({\n    variables: { commentableId, commentableType, authorMixinId },\n  });\n  const [deleteComment, { loading: deleting }] = useAdminDeleteCommentMutation({\n    update(_, { data: { error: err } }) {\n      if (err) {\n        message.error(err);\n      } else {\n        message.success('Successfully deleted!');\n        refetch();\n      }\n    },\n  });\n  const [recover, { loading: recovering }] = useAdminRecoverCommentMutation({\n    update(_, { data: { error: err } }) {\n      if (err) {\n        message.error(err);\n      } else {\n        message.success('Successfully recovered!');\n        refetch();\n      }\n    },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    commentConnection: {\n      nodes: comments,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<IComment>> = [\n    {\n      dataIndex: 'id',\n      key: 'id',\n      title: 'ID',\n    },\n    {\n      dataIndex: 'author',\n      key: 'author',\n      render: (_, comment) => (\n        <Space>\n          <Avatar src={comment.author.avatarUrl} />\n          {comment.author.name}\n        </Space>\n      ),\n      title: 'Author',\n    },\n    {\n      dataIndex: 'content',\n      key: 'content',\n      render: (content) => (\n        <Popover content={content}>\n          <div style={{ maxWidth: '100%' }}>\n            {content ? content.slice(0, 140) : '-'}\n          </div>\n        </Popover>\n      ),\n      title: 'content',\n    },\n    {\n      dataIndex: 'article',\n      key: 'article',\n      render: (_, comment) => (\n        <a href={`/articles/${comment.commentable.uuid}`} target='_blank'>\n          {comment.commentable.title}\n        </a>\n      ),\n      title: 'article',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'CreatedAt',\n    },\n    {\n      dataIndex: 'deletedAt',\n      key: 'deletedAt',\n      render: (deletedAt) => <span>{deletedAt || '-'}</span>,\n      title: 'deletedAt',\n    },\n    {\n      dataIndex: 'actions',\n      key: 'actions',\n      render: (_, comment) => (\n        <span>\n          {comment.deletedAt ? (\n            <Popconfirm\n              title='Are you sure to recover this comment?'\n              onConfirm={() =>\n                recover({ variables: { input: { id: comment.id } } })\n              }\n            >\n              <Button type='link' disabled={recovering}>\n                Recover\n              </Button>\n            </Popconfirm>\n          ) : (\n            <Popconfirm\n              title='Are you sure to delete this comment?'\n              onConfirm={() =>\n                deleteComment({ variables: { input: { id: comment.id } } })\n              }\n            >\n              <Button type='link' disabled={deleting}>\n                Delete\n              </Button>\n            </Popconfirm>\n          )}\n        </span>\n      ),\n      title: 'Actions',\n    },\n  ];\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={comments}\n        rowKey='id'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import React, { useContext } from 'react';\n\nexport const CurrentAdminContext = React.createContext(null);\nexport function useCurrentAdmin() {\n  return useContext(CurrentAdminContext);\n}\n","import React, { useContext } from 'react';\n\nexport const PrsdiggContext = React.createContext(null);\nexport function usePrsdigg() {\n  return useContext(PrsdiggContext);\n}\n","import { Avatar, Button, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/lib/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport { usePrsdigg } from 'apps/admin/shared';\nimport { FOXSWAP_APP_ID } from 'apps/shared';\nimport {\n  MixinNetworkSnapshot,\n  useAdminMixinNetworkSnapshotConnectionQuery,\n} from 'graphqlTypes';\nimport React from 'react';\n\nexport default function MixinNetworkSnapshotsComponent(props: {\n  filter?: 'input' | 'output' | 'prsdigg' | 'all';\n  userId?: string;\n}) {\n  const { appId } = usePrsdigg();\n  const { userId, filter = 'all' } = props;\n  const { data, loading, fetchMore } =\n    useAdminMixinNetworkSnapshotConnectionQuery({\n      variables: { filter, userId },\n    });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminMixinNetworkSnapshotConnection: {\n      nodes: snapshots,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n  const columns: Array<ColumnProps<MixinNetworkSnapshot>> = [\n    {\n      dataIndex: 'traceId',\n      key: 'traceId',\n      title: 'traceId',\n    },\n    {\n      dataIndex: 'wallet',\n      key: 'wallet',\n      render: (_, snapshot) =>\n        snapshot.article ? (\n          <a\n            href={`https://prsdigg.com/articles/${snapshot.article.uuid}`}\n            target='_blank'\n          >\n            {snapshot.article.title}\n          </a>\n        ) : snapshot.userId === appId ? (\n          'PRSDigg'\n        ) : snapshot.userId === FOXSWAP_APP_ID ? (\n          '4swap'\n        ) : (\n          snapshot.userId\n        ),\n      title: 'Wallet',\n    },\n    {\n      dataIndex: 'opponent',\n      key: 'opponent',\n      render: (_, snapshot) =>\n        snapshot.opponent ? (\n          <Space>\n            <Avatar src={snapshot.opponent.avatarUrl} />\n            {snapshot.opponent.name}\n            {snapshot.opponent.mixinId}\n          </Space>\n        ) : snapshot.opponentId === appId ? (\n          'PRSDigg'\n        ) : snapshot.opponentId === FOXSWAP_APP_ID ? (\n          '4swap'\n        ) : (\n          snapshot.opponentId || 'MTG'\n        ),\n      title: 'Opponent',\n    },\n    {\n      dataIndex: 'amount',\n      key: 'amount',\n      render: (amount, snapshot) => (\n        <Space>\n          <Avatar src={snapshot.currency?.iconUrl} />\n          <span>{amount}</span>\n        </Space>\n      ),\n      title: 'amount',\n    },\n    {\n      dataIndex: 'processedAt',\n      key: 'processedAt',\n      title: 'processedAt',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'createdAt',\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={snapshots}\n        rowKey='traceId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { Avatar, Button, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport { Order, useAdminOrderConnectionQuery } from 'graphqlTypes';\nimport React from 'react';\n\nexport default function OrdersComponent(props: {\n  itemId?: string;\n  itemType?: string;\n}) {\n  const { itemId, itemType } = props;\n  const { loading, data, fetchMore } = useAdminOrderConnectionQuery({\n    variables: { itemId, itemType },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminOrderConnection: {\n      nodes: orders,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n  const columns: Array<ColumnProps<Order>> = [\n    {\n      dataIndex: 'traceId',\n      key: 'traceId',\n      title: 'traceId',\n    },\n    {\n      dataIndex: 'orderType',\n      key: 'orderType',\n      title: 'orderType',\n    },\n    {\n      dataIndex: 'buyer',\n      key: 'buyer',\n      render: (_, order) => (\n        <Space>\n          <Avatar src={order.buyer.avatarUrl} />\n          {order.buyer.name}\n        </Space>\n      ),\n      title: 'Buyer',\n    },\n    {\n      dataIndex: 'total',\n      key: 'total',\n      title: 'Total',\n    },\n    {\n      dataIndex: 'state',\n      key: 'state',\n      title: 'state',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'CreatedAt',\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={orders}\n        rowKey='traceId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { Avatar, Button, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport { usePrsdigg } from 'apps/admin/shared';\nimport {\n  AdminTransferConnectionQueryHookResult,\n  Transfer as ITransfer,\n  useAdminTransferConnectionQuery,\n} from 'graphqlTypes';\nimport React from 'react';\n\nexport default function TransfersComponent(props: {\n  itemId?: string;\n  itemType?: string;\n  sourceId?: string;\n  sourceType?: string;\n}) {\n  const { appId } = usePrsdigg();\n  const { itemId, itemType, sourceId, sourceType } = props;\n  const { data, loading, fetchMore }: AdminTransferConnectionQueryHookResult =\n    useAdminTransferConnectionQuery({\n      variables: { itemId, itemType, sourceId, sourceType },\n    });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n  const {\n    adminTransferConnection: {\n      nodes: transfers,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n  const columns: Array<ColumnProps<ITransfer>> = [\n    {\n      dataIndex: 'traceId',\n      key: 'traceId',\n      title: 'Trace ID',\n    },\n    {\n      dataIndex: 'recipient',\n      key: 'recipient',\n      render: (_, transfer) =>\n        transfer.recipient ? (\n          <Space>\n            <Avatar src={transfer.recipient.avatarUrl} />\n            <span>\n              {transfer.recipient.name}({transfer.recipient.mixinId})\n            </span>\n          </Space>\n        ) : transfer.opponentId === appId ? (\n          'PRSDigg'\n        ) : (\n          transfer.opponentId\n        ),\n      title: 'Recipient',\n    },\n    {\n      dataIndex: 'amount',\n      key: 'amount',\n      render: (amount, transfer) => (\n        <Space>\n          <Avatar src={transfer.currency?.iconUrl} />\n          <span>{amount}</span>\n        </Space>\n      ),\n      title: 'Amount',\n    },\n    {\n      dataIndex: 'transferType',\n      key: 'transferType',\n      title: 'transferType',\n    },\n    {\n      dataIndex: 'processedAt',\n      key: 'processedAt',\n      render: (processedAt) => <span>{processedAt || '-'}</span>,\n      title: 'Processed At',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'Created At',\n    },\n    {\n      dataIndex: 'snapshotId',\n      key: 'snapshotId',\n      render: (snapshotId) => (\n        <span>\n          {snapshotId ? (\n            <a\n              href={`https://mixin.one/snapshots/${snapshotId}`}\n              target='_blank'\n            >\n              View\n            </a>\n          ) : (\n            'processing'\n          )}\n        </span>\n      ),\n      title: 'Snapshot',\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={transfers}\n        rowKey='traceId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { Avatar, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport { Asset, useAdminWalletBalanceQuery } from 'graphqlTypes';\nimport React from 'react';\nimport LoadingComponent from '../LoadingComponent/LoadingComponent';\n\nexport default function WalletBalanceComponent(props: { userId?: string }) {\n  const { userId } = props;\n  const { loading, data } = useAdminWalletBalanceQuery({\n    fetchPolicy: 'network-only',\n    variables: { userId },\n  });\n  if (loading) {\n    return <LoadingComponent />;\n  }\n  const { adminWalletBalance: assets } = data;\n\n  const columns: Array<ColumnProps<Asset>> = [\n    { title: 'asset ID', dataIndex: 'assetId', key: 'assetId' },\n    {\n      dataIndex: 'iconUrl',\n      key: 'iconUrl',\n      render: (text, record) => <Avatar src={text}>{record.symbol[0]}</Avatar>,\n      title: 'icon',\n    },\n    { title: 'Symbol', dataIndex: 'symbol', key: 'symbol' },\n    { title: 'Balance', dataIndex: 'balance', key: 'balance' },\n    {\n      dataIndex: 'priceUsd',\n      key: 'priceUsd',\n      render: (text, record) => {\n        return parseFloat(record.balance) > 0\n          ? `$ ${parseFloat(text) * parseFloat(record.balance)}`\n          : 0;\n      },\n      title: 'Value',\n    },\n  ];\n  return (\n    <Table\n      scroll={{ x: true }}\n      columns={columns}\n      dataSource={assets}\n      rowKey='assetId'\n      loading={loading}\n      pagination={{ pageSize: 50 }}\n    />\n  );\n}\n","import { Avatar, Descriptions, Empty, PageHeader, Space, Tabs } from 'antd';\nimport ArticleSnapshotsComponent from 'apps/admin/components/ArticleSnapshotsComponent/ArticleSnapshotsComponent';\nimport CommentsComponent from 'apps/admin/components/CommentsComponent/CommentsComponent';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport MixinNetworkSnapshotsComponent from 'apps/admin/components/MixinNetworkSnapshotsComponent/MixinNetworkSnapshotComponent';\nimport OrdersComponent from 'apps/admin/components/OrdersComponent/OrdersComponent';\nimport TransfersComponent from 'apps/admin/components/TransfersComponent/TransfersComponent';\nimport WalletBalanceComponent from 'apps/admin/components/WalletBalanceComponent/WalletBalanceComponent';\nimport { useAdminArticleQuery } from 'graphqlTypes';\nimport React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nexport default function ArticlePage() {\n  const { uuid } = useParams<{ uuid: string }>();\n  const history = useHistory();\n  const { loading, data } = useAdminArticleQuery({\n    variables: { uuid },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const { adminArticle: article } = data;\n\n  return (\n    <div>\n      <PageHeader title={article.title} onBack={() => history.goBack()} />\n      <Descriptions bordered size='small'>\n        <Descriptions.Item label='Title'>{article.title}</Descriptions.Item>\n        <Descriptions.Item label='Author'>\n          <Space>\n            <Avatar src={article.author.avatarUrl}>\n              {article.author.name[0]}\n            </Avatar>\n            {article.author.name}\n          </Space>\n        </Descriptions.Item>\n        <Descriptions.Item label='State'>{article.state}</Descriptions.Item>\n        <Descriptions.Item label='Price'>{article.price}</Descriptions.Item>\n        <Descriptions.Item label='OrdersCount'>\n          {article.ordersCount}\n        </Descriptions.Item>\n        <Descriptions.Item label='Revenue'>{article.revenue}</Descriptions.Item>\n        <Descriptions.Item label='Comments'>\n          {article.commentsCount}\n        </Descriptions.Item>\n        <Descriptions.Item label='createdAt'>\n          {article.createdAt}\n        </Descriptions.Item>\n      </Descriptions>\n      <Tabs defaultActiveKey='orders'>\n        <Tabs.TabPane tab='Orders' key='orders'>\n          <OrdersComponent itemId={article.id} itemType='Article' />\n        </Tabs.TabPane>\n        <Tabs.TabPane tab='Comments' key='comments'>\n          <CommentsComponent\n            commentableId={article.id}\n            commentableType='Article'\n          />\n        </Tabs.TabPane>\n        <Tabs.TabPane tab='Snapshots' key='snapshot'>\n          <ArticleSnapshotsComponent articleUuid={article.uuid} />\n        </Tabs.TabPane>\n        <Tabs.TabPane tab='Transfers' key='transfers'>\n          <TransfersComponent itemId={article.id} itemType='Article' />\n        </Tabs.TabPane>\n        <Tabs.TabPane tab='Wallet Balance' key='wallet_balance'>\n          {article.walletId ? (\n            <WalletBalanceComponent userId={article.walletId} />\n          ) : (\n            <Empty />\n          )}\n        </Tabs.TabPane>\n        <Tabs.TabPane tab='Wallet Snapshots' key='wallet_snapshots'>\n          {article.walletId ? (\n            <MixinNetworkSnapshotsComponent userId={article.walletId} />\n          ) : (\n            <Empty />\n          )}\n        </Tabs.TabPane>\n      </Tabs>\n    </div>\n  );\n}\n","import { PageHeader } from 'antd';\nimport ArticleSnapshotsComponent from 'apps/admin/components/ArticleSnapshotsComponent/ArticleSnapshotsComponent';\nimport React from 'react';\n\nexport default function ArticleSnapshotsPage() {\n  return (\n    <>\n      <PageHeader title='Article Snapshots' />\n      <ArticleSnapshotsComponent />\n    </>\n  );\n}\n","import { useDebounce } from 'ahooks';\nimport {\n  Avatar,\n  Button,\n  Col,\n  Divider,\n  Input,\n  PageHeader,\n  Popconfirm,\n  Row,\n  Select,\n  Space,\n  Table,\n} from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport {\n  AdminArticleConnectionQueryHookResult,\n  Article as IArticle,\n  useAdminArticleConnectionQuery,\n  useAdminBlockArticleMutation,\n  useAdminUnblockArticleMutation,\n} from 'graphqlTypes';\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function ArticlesPage() {\n  const [query, setQuery] = useState('');\n  const [state, setState] = useState('published');\n  const debouncedQuery = useDebounce(query, { wait: 500 });\n  return (\n    <div>\n      <PageHeader title='Articles' />\n      <Row gutter={16} style={{ marginBottom: '1rem' }}>\n        <Col>\n          <Select\n            style={{ width: 200 }}\n            value={state}\n            onChange={(value) => setState(value)}\n          >\n            <Select.Option value='published'>Published</Select.Option>\n            <Select.Option value='hidden'>Hidden</Select.Option>\n            <Select.Option value='blocked'>Blocked</Select.Option>\n            <Select.Option value='all'>All</Select.Option>\n          </Select>\n        </Col>\n        <Col>\n          <Input\n            value={query}\n            placeholder='Query article'\n            onChange={(e) => setQuery(e.currentTarget.value)}\n          />\n        </Col>\n      </Row>\n      <ArticlesComponent query={debouncedQuery} state={state} />\n    </div>\n  );\n}\n\nfunction ArticlesComponent(props: { query?: string; state?: string }) {\n  const { query, state } = props;\n  const { data, loading, fetchMore }: AdminArticleConnectionQueryHookResult =\n    useAdminArticleConnectionQuery({\n      variables: { query, state },\n    });\n  const [block, { loading: blocking }] = useAdminBlockArticleMutation();\n  const [unblock, { loading: unblocking }] = useAdminUnblockArticleMutation();\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminArticleConnection: {\n      nodes: articles,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<IArticle>> = [\n    {\n      dataIndex: 'uuid',\n      key: 'uuid',\n      title: 'UUID',\n    },\n    {\n      dataIndex: 'author',\n      key: 'author',\n      render: (_, article) => (\n        <Space>\n          <Avatar src={article.author.avatarUrl} />\n          {article.author.name}\n        </Space>\n      ),\n      title: 'Author',\n    },\n    {\n      dataIndex: 'title',\n      key: 'title',\n      title: 'Title',\n    },\n    {\n      dataIndex: 'state',\n      key: 'state',\n      title: 'State',\n    },\n    {\n      dataIndex: 'revenue',\n      key: 'revenue',\n      title: 'Revenue',\n    },\n    {\n      dataIndex: 'commentsCount',\n      key: 'commentsCount',\n      title: 'Comments',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'CreatedAt',\n    },\n    {\n      dataIndex: 'actions',\n      key: 'actions',\n      render: (_, article) => (\n        <span>\n          {article.state === 'blocked' ? (\n            <Popconfirm\n              title='Are you sure to unblock this article?'\n              onConfirm={() =>\n                unblock({ variables: { input: { uuid: article.uuid } } })\n              }\n            >\n              <a\n                className={unblocking ? 'cursor-not-allowed' : 'cursor-pointer'}\n              >\n                UnBlock\n              </a>\n            </Popconfirm>\n          ) : (\n            <Popconfirm\n              title='Are you sure to block this article?'\n              onConfirm={() =>\n                block({ variables: { input: { uuid: article.uuid } } })\n              }\n            >\n              <a className={blocking ? 'cursor-not-allowed' : 'cursor-pointer'}>\n                Block\n              </a>\n            </Popconfirm>\n          )}\n          <Divider type='vertical' />\n          <Link to={`/articles/${article.uuid}`}>Detail</Link>\n          <Divider type='vertical' />\n          <a href={`/articles/${article.uuid}`} target='_blank'>\n            View\n          </a>\n        </span>\n      ),\n      title: 'Actions',\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={articles}\n        rowKey='uuid'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n                query,\n                state,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { PageHeader } from 'antd';\nimport WalletBalanceComponent from 'apps/admin/components/WalletBalanceComponent/WalletBalanceComponent';\nimport React from 'react';\n\nexport default function BalancePage() {\n  return (\n    <div>\n      <PageHeader title='Balance' />\n      <WalletBalanceComponent />\n    </div>\n  );\n}\n","import { useDebounce } from 'ahooks';\nimport {\n  Form,\n  Input,\n  InputNumber,\n  message,\n  Modal,\n  Select,\n  Space,\n  Spin,\n} from 'antd';\nimport {\n  Bonus,\n  useAdminCreateBonusMutation,\n  useAdminUpdateBonusMutation,\n  useAdminUserConnectionQuery,\n  User,\n} from 'graphqlTypes';\nimport React, { useEffect, useState } from 'react';\n\nexport default function BonusesFormModalComponent(props: {\n  visible: boolean;\n  onCancel: () => any;\n  editingBonus?: Partial<Bonus>;\n  refetchBonuses?: () => any;\n}) {\n  const { visible, onCancel, editingBonus, refetchBonuses } = props;\n  const [query, setQuery] = useState(null);\n  const [bonusForm] = Form.useForm();\n  const debouncedQuery = useDebounce(query, { wait: 500 });\n  const { data, loading } = useAdminUserConnectionQuery({\n    notifyOnNetworkStatusChange: true,\n    variables: { query: debouncedQuery },\n  });\n  const [createBonus] = useAdminCreateBonusMutation({\n    update(\n      _,\n      {\n        data: {\n          adminCreateBonus: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        message.success('success');\n        bonusForm.resetFields();\n        refetchBonuses();\n        onCancel();\n      }\n    },\n  });\n  const [updateBonus] = useAdminUpdateBonusMutation({\n    update(\n      _,\n      {\n        data: {\n          adminUpdateBonus: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        message.success('success');\n        bonusForm.resetFields();\n        refetchBonuses();\n        onCancel();\n      }\n    },\n  });\n  useEffect(() => {\n    if (editingBonus) {\n      bonusForm.setFieldsValue({\n        userId: editingBonus.user.id,\n        title: editingBonus.title,\n        description: editingBonus.description,\n        amount: editingBonus.amount,\n      });\n    } else {\n      bonusForm.resetFields();\n    }\n  }, [editingBonus]);\n\n  const users = (data && data.adminUserConnection.nodes) || [];\n\n  return (\n    <Modal\n      title={editingBonus ? 'Edit' : 'New'}\n      visible={visible}\n      onCancel={onCancel}\n      onOk={() => bonusForm.submit()}\n    >\n      <Form\n        labelCol={{ span: 6 }}\n        form={bonusForm}\n        onFinish={(values) => {\n          if (editingBonus) {\n            updateBonus({\n              variables: { input: { ...values, id: editingBonus.id } },\n            });\n          } else {\n            createBonus({ variables: { input: values } });\n          }\n        }}\n      >\n        <Form.Item name='userId' label='User' rules={[{ required: true }]}>\n          <Select\n            showSearch\n            placeholder='Search user name/mixinId'\n            filterOption={false}\n            notFoundContent={loading ? <Spin size='small' /> : null}\n            onSearch={(value) => setQuery(value)}\n          >\n            {users.map((user: Partial<User>) => (\n              <Select.Option key={user.id} value={user.id}>\n                <Space>\n                  <span>{user.name}</span>\n                  <span>{user.mixinId}</span>\n                </Space>\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item name='amount' label='Amount' rules={[{ required: true }]}>\n          <InputNumber min={1} precision={4} placeholder='0.0' />\n        </Form.Item>\n        <Form.Item name='title' label='Title' rules={[{ required: true }]}>\n          <Input />\n        </Form.Item>\n        <Form.Item name='description' label='Description'>\n          <Input.TextArea />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n","import {\n  Avatar,\n  Button,\n  Divider,\n  message,\n  PageHeader,\n  Popconfirm,\n  Space,\n  Table,\n} from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport {\n  Bonus,\n  useAdminBonusConnectionQuery,\n  useAdminDeliverBonusMutation,\n} from 'graphqlTypes';\nimport React, { useState } from 'react';\nimport BonusesFormModalComponent from './components/BonusFormModalComponent';\n\nexport default function BonusesPage() {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [editing, setEditing] = useState(null);\n\n  const { data, loading, fetchMore, refetch } = useAdminBonusConnectionQuery();\n  const [deliverBonus] = useAdminDeliverBonusMutation({\n    update(\n      _,\n      {\n        data: {\n          adminDeliverBonus: { state },\n        },\n      },\n    ) {\n      if (state !== 'drafted') {\n        message.success('Delivered!');\n      }\n    },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminBonusConnection: {\n      nodes: bonuses,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<Bonus>> = [\n    { dataIndex: 'id', key: 'id', title: 'ID' },\n    {\n      dataIndex: 'user',\n      key: 'user',\n      render: (_, bonus) => (\n        <Space>\n          <Avatar src={bonus.user.avatarUrl} />\n          <span>{bonus.user.name}</span>\n        </Space>\n      ),\n      title: 'User',\n    },\n    { dataIndex: 'title', key: 'title', title: 'Title' },\n    {\n      dataIndex: 'description',\n      key: 'description',\n      render: (description) => <div>{description || '-'}</div>,\n      title: 'Description',\n    },\n    { dataIndex: 'amount', key: 'amount', title: 'Amount' },\n    { dataIndex: 'state', key: 'state', title: 'state' },\n    { dataIndex: 'createdAt', key: 'createdAt', title: 'createdAt' },\n    {\n      dataIndex: 'snapshotId',\n      key: 'snapshotId',\n      render: (_, bonus) =>\n        bonus.transfer && bonus.transfer.snapshotId ? (\n          <a\n            href={`https://mixin/one/snapshots/${bonus.transfer.snapshotId}`}\n            target='_blank'\n          >\n            SnapshotId\n          </a>\n        ) : (\n          '-'\n        ),\n      title: 'snapshotId',\n    },\n    {\n      dataIndex: 'actions',\n      key: 'actions',\n      render: (_, bonus) => (\n        <span>\n          <Popconfirm\n            disabled={bonus.state !== 'drafted'}\n            title='Are you sure to deliver bonus to user?'\n            onConfirm={() =>\n              deliverBonus({ variables: { input: { id: bonus.id } } })\n            }\n          >\n            <Button\n              type='link'\n              disabled={bonus.state !== 'drafted'}\n              size='small'\n            >\n              Deliver\n            </Button>\n          </Popconfirm>\n          <Divider type='vertical' />\n          <Button\n            disabled={bonus.state !== 'drafted'}\n            onClick={() => {\n              setEditing(bonus);\n              setModalVisible(true);\n            }}\n            type='link'\n            size='small'\n          >\n            Edit\n          </Button>\n        </span>\n      ),\n      title: 'Actions',\n    },\n  ];\n  return (\n    <div>\n      <PageHeader title='Bonuses' />\n      <div style={{ marginBottom: '1rem' }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            setEditing(null);\n            setModalVisible(true);\n          }}\n        >\n          New\n        </Button>\n        <BonusesFormModalComponent\n          visible={modalVisible}\n          editingBonus={editing}\n          onCancel={() => setModalVisible(false)}\n          refetchBonuses={refetch}\n        />\n      </div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={bonuses}\n        rowKey='id'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { PageHeader } from 'antd';\nimport CommentsComponent from 'apps/admin/components/CommentsComponent/CommentsComponent';\nimport React from 'react';\n\nexport default function CommentsPage() {\n  return (\n    <div>\n      <PageHeader title='Comments' />\n      <CommentsComponent />\n    </div>\n  );\n}\n","import { Avatar, Button, PageHeader, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport {\n  MixinMessage,\n  useAdminMixinMessageConnectionQuery,\n} from 'graphqlTypes';\nimport React from 'react';\n\nexport default function MixinMessagesPage() {\n  const { data, loading, fetchMore } = useAdminMixinMessageConnectionQuery();\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminMixinMessageConnection: {\n      nodes: messages,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<MixinMessage>> = [\n    {\n      dataIndex: 'action',\n      key: 'action',\n      title: 'Action',\n    },\n    {\n      dataIndex: 'category',\n      key: 'category',\n      title: 'category',\n    },\n    {\n      dataIndex: 'user',\n      key: 'user',\n      render: (_, message) =>\n        message.user ? (\n          <Space>\n            <Avatar src={message.user.avatarUrl} />\n            {message.user.name}\n            {message.user.mixinId}\n          </Space>\n        ) : (\n          message.userId\n        ),\n      title: 'User',\n    },\n    {\n      dataIndex: 'content',\n      key: 'content',\n      render: (content) => <div style={{ maxWidth: '100%' }}>{content}</div>,\n      title: 'content',\n    },\n    {\n      dataIndex: 'processedAt',\n      key: 'processedAt',\n      title: 'processedAt',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'createdAt',\n    },\n  ];\n\n  return (\n    <div>\n      <PageHeader title='Mixin Messages' />\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={messages}\n        rowKey='id'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { Col, PageHeader, Row, Select } from 'antd';\nimport MixinNetworkSnapshotsComponent from 'apps/admin/components/MixinNetworkSnapshotsComponent/MixinNetworkSnapshotComponent';\nimport React, { useState } from 'react';\n\nexport default function MixinNetworkSnapshotsPage() {\n  const [filter, setFilter] =\n    useState<'input' | 'output' | 'prsdigg' | 'all'>('input');\n  return (\n    <div>\n      <PageHeader title='Mixin Network Snapshot' />\n      <Row gutter={16} style={{ marginBottom: '1rem' }}>\n        <Col>\n          <Select\n            style={{ width: 200 }}\n            value={filter}\n            onChange={(value) => setFilter(value)}\n          >\n            <Select.Option value='input'>Input</Select.Option>\n            <Select.Option value='output'>Output</Select.Option>\n            <Select.Option value='prsdigg'>PRSDigg</Select.Option>\n            <Select.Option value='4swap'>4swap</Select.Option>\n            <Select.Option value='all'>All</Select.Option>\n          </Select>\n        </Col>\n      </Row>\n      <MixinNetworkSnapshotsComponent filter={filter} />\n    </div>\n  );\n}\n","import { Col, PageHeader, Row, Statistic } from 'antd';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport {\n  useArticleChartQuery,\n  useRevenueChartQuery,\n  useStatisticsQuery,\n  useUserChartQuery,\n} from 'graphqlTypes';\nimport React from 'react';\nimport {\n  Area,\n  AreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nexport default function OverviewPage() {\n  const { data, loading } = useStatisticsQuery();\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    statistics: {\n      usersCount,\n      articlesCount,\n      authorRevenueTotal,\n      readerRevenueTotal,\n    },\n  } = data;\n\n  return (\n    <div>\n      <PageHeader title='Dashboard' />\n      <Row\n        style={{ padding: 20, textAlign: 'center' }}\n        gutter={16}\n        justify='space-around'\n      >\n        <Col span={12}>\n          <Statistic title='用户总量' value={usersCount} />\n        </Col>\n        <Col span={12}>\n          <Statistic title='文章总数' value={articlesCount} />\n        </Col>\n        <Col span={12}>\n          <Statistic\n            title='作者收益(USD)'\n            value={authorRevenueTotal.toFixed(2)}\n          />\n        </Col>\n        <Col span={12}>\n          <Statistic\n            title='读者收益(USD)'\n            value={readerRevenueTotal.toFixed(2)}\n          />\n        </Col>\n      </Row>\n      <UserChart />\n      <ArticleChart />\n      <RevenueChart />\n    </div>\n  );\n}\n\nfunction UserChart() {\n  const { loading, data } = useUserChartQuery();\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  let { userChart } = data;\n  try {\n    userChart = JSON.parse(userChart);\n  } catch {\n    userChart = [];\n  }\n\n  return (\n    <div>\n      <h3>User Increasing Chart</h3>\n      <AreaChartComponent data={userChart} />\n    </div>\n  );\n}\n\nfunction ArticleChart() {\n  const { loading, data } = useArticleChartQuery();\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  let { articleChart } = data;\n  try {\n    articleChart = JSON.parse(articleChart);\n  } catch {\n    articleChart = [];\n  }\n\n  return (\n    <div>\n      <h3>Article Increasing Chart</h3>\n      <AreaChartComponent data={articleChart} />\n    </div>\n  );\n}\n\nfunction RevenueChart() {\n  const { loading, data } = useRevenueChartQuery();\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  let { revenueChart } = data;\n  try {\n    revenueChart = JSON.parse(revenueChart);\n  } catch {\n    revenueChart = [];\n  }\n\n  return (\n    <div>\n      <h3>Revenue Chart</h3>\n      <AreaChartComponent data={revenueChart} />\n    </div>\n  );\n}\n\nfunction AreaChartComponent(props: { data: any }) {\n  return (\n    <ResponsiveContainer height={250}>\n      <AreaChart\n        data={props.data}\n        margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n      >\n        <defs>\n          <linearGradient id='colorUser' x1='0' y1='0' x2='0' y2='1'>\n            <stop offset='5%' stopColor='#8884d8' stopOpacity={0.8} />\n            <stop offset='95%' stopColor='#8884d8' stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis dataKey='name' />\n        <YAxis />\n        <CartesianGrid strokeDasharray='3 3' />\n        <Tooltip />\n        <Area\n          type='monotone'\n          dataKey='value'\n          stroke='#8884d8'\n          fillOpacity={1}\n          fill='url(#colorUser)'\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n}\n","import { Avatar, Button, PageHeader, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport {\n  Payment as IPayment,\n  useAdminPaymentConnectionQuery,\n} from 'graphqlTypes';\nimport React from 'react';\n\nexport default function PaymentsPage() {\n  const { data, loading, fetchMore } = useAdminPaymentConnectionQuery();\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminPaymentConnection: {\n      nodes: payments,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n  const columns: Array<ColumnProps<IPayment>> = [\n    {\n      dataIndex: 'traceId',\n      key: 'traceId',\n      title: 'Trace ID',\n    },\n    {\n      dataIndex: 'payer',\n      key: 'payer',\n      render: (_, payment) => (\n        <Space>\n          <Avatar src={payment.payer.avatarUrl} />\n          <span>\n            {payment.payer.name}({payment.payer.mixinId})\n          </span>\n        </Space>\n      ),\n      title: 'Author',\n    },\n    {\n      dataIndex: 'amount',\n      key: 'amount',\n      render: (amount, payment) => (\n        <Space>\n          <Avatar src={payment.currency.iconUrl} />\n          <span>{amount}</span>\n        </Space>\n      ),\n      title: 'Amount',\n    },\n    {\n      dataIndex: 'state',\n      key: 'state',\n      title: 'state',\n    },\n    {\n      dataIndex: 'orderType',\n      key: 'orderType',\n      render: (_, payment) => (\n        <span>{payment.order ? payment.order.orderType : '-'}</span>\n      ),\n      title: 'orderType',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'Created At',\n    },\n    {\n      dataIndex: 'snapshotId',\n      key: 'snapshotId',\n      render: (snapshotId) => (\n        <a href={`https://mixin.one/snapshots/${snapshotId}`} target='_blank'>\n          View\n        </a>\n      ),\n      title: 'Snapshot',\n    },\n  ];\n\n  return (\n    <div>\n      <PageHeader title='Payments' />\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={payments}\n        rowKey='traceId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { useDebounce } from 'ahooks';\nimport { Avatar, Button, Input, PageHeader, Select, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/lib/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport { PrsAccount, useAdminPrsAccountConnectionQuery } from 'graphqlTypes';\nimport React, { useState } from 'react';\n\nexport default function PrsAccountsPage() {\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState('all');\n  const debouncedQuery = useDebounce(query, { wait: 500 });\n  return (\n    <>\n      <PageHeader title='Prs Accounts' />\n      <div className='flex mb-4 space-x-4'>\n        <Select\n          className='w-72'\n          value={status}\n          onChange={(value) => setStatus(value)}\n        >\n          <Select.Option value='all'>All</Select.Option>\n          <Select.Option value='created'>Created</Select.Option>\n          <Select.Option value='registered'>Registered</Select.Option>\n          <Select.Option value='allowing'>Allowing</Select.Option>\n          <Select.Option value='allowed'>Allowed</Select.Option>\n          <Select.Option value='denying'>Denying</Select.Option>\n          <Select.Option value='denied'>Denied</Select.Option>\n        </Select>\n        <Input\n          className='w-72'\n          value={query}\n          placeholder='account/name/mixinId'\n          onChange={(e) => setQuery(e.currentTarget.value)}\n        />\n      </div>\n      <PrsAccountsComponent query={debouncedQuery} status={status} />\n    </>\n  );\n}\n\nexport function PrsAccountsComponent(props: {\n  query?: string;\n  status?: string;\n}) {\n  const { query, status } = props;\n  const { data, loading, fetchMore } = useAdminPrsAccountConnectionQuery({\n    variables: { query, status },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminPrsAccountConnection: {\n      nodes: accounts,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<PrsAccount>> = [\n    {\n      dataIndex: 'id',\n      key: 'id',\n      title: 'ID',\n    },\n    {\n      dataIndex: 'account',\n      key: 'account',\n      render: (text) => text || '-',\n      title: 'Account',\n    },\n    {\n      dataIndex: 'user',\n      key: 'user',\n      render: (_, account) => (\n        <Space>\n          <Avatar src={account.user.avatarUrl} />\n          <span>\n            {account.user.name}({account.user.mixinId})\n          </span>\n        </Space>\n      ),\n      title: 'User',\n    },\n    {\n      dataIndex: 'status',\n      key: 'status',\n      title: 'Status',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'Created At',\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={accounts}\n        rowKey='id'\n        pagination={false}\n        size='small'\n      />\n      <div className='mb-4 text-center'>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                status,\n                query,\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { Avatar, Button, PageHeader, Select, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/lib/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport {\n  PrsTransaction,\n  useAdminPrsTransactionConnectionQuery,\n} from 'graphqlTypes';\nimport React, { useState } from 'react';\n\nexport default function PrsTransactionsPage() {\n  const [type, setType] = useState('all');\n  return (\n    <>\n      <PageHeader title='Prs Transactions' />\n      <div className='flex mb-4 space-x-4'>\n        <Select\n          className='w-72'\n          value={type}\n          onChange={(value) => setType(value)}\n        >\n          <Select.Option value='all'>All</Select.Option>\n          <Select.Option value='ArticleSnapshotPrsTransaction'>\n            Article\n          </Select.Option>\n          <Select.Option value='PrsAccountAuthorizationTransaction'>\n            Authorization\n          </Select.Option>\n        </Select>\n      </div>\n      <PrsTransactionsComponent type={type} />\n    </>\n  );\n}\n\nexport function PrsTransactionsComponent(props: { type?: string }) {\n  const { type } = props;\n  const { data, loading, fetchMore } = useAdminPrsTransactionConnectionQuery({\n    variables: { type },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminPrsTransactionConnection: {\n      nodes: transactions,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<PrsTransaction>> = [\n    {\n      dataIndex: 'id',\n      key: 'id',\n      title: 'ID',\n    },\n    {\n      dataIndex: 'type',\n      key: 'type',\n      title: 'type',\n    },\n    {\n      dataIndex: 'userAddress',\n      key: 'userAddress',\n      render: (_, transition) => transition.userAddress || '-',\n      title: 'userAddress',\n    },\n    {\n      dataIndex: 'user',\n      key: 'user',\n      render: (_, transaction) => (\n        <>\n          {transaction.prsAccount ? (\n            <span>\n              {transaction.prsAccount.user.name}(\n              {transaction.prsAccount.user.mixinId})\n            </span>\n          ) : (\n            '-'\n          )}\n        </>\n      ),\n      title: 'User',\n    },\n    {\n      dataIndex: 'data',\n      key: 'data',\n      title: 'data',\n    },\n    {\n      dataIndex: 'processedAt',\n      key: 'processedAt',\n      title: 'Processed At',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'Created At',\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={transactions}\n        rowKey='id'\n        pagination={false}\n        size='small'\n      />\n      <div className='mb-4 text-center'>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                type,\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport { SwapOrder, useAdminSwapOrderConnectionQuery } from 'graphqlTypes';\nimport { Avatar, Button, PageHeader, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport React from 'react';\n\nexport default function SwapOrdersPage() {\n  const { data, loading, fetchMore } = useAdminSwapOrderConnectionQuery();\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminSwapOrderConnection: {\n      nodes: swapOrders,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<SwapOrder>> = [\n    { dataIndex: 'traceId', key: 'traceId', title: 'Trace ID' },\n    {\n      dataIndex: 'payer',\n      key: 'payer',\n      render: (_, swapOrder) => (\n        <Space>\n          <Avatar src={swapOrder.payer.avatarUrl} />\n          <span>{swapOrder.payer.name}</span>\n          <span>({swapOrder.payer.mixinId})</span>\n        </Space>\n      ),\n      title: 'Payer',\n    },\n    { dataIndex: 'state', key: 'state', title: 'State' },\n    {\n      dataIndex: 'funds',\n      key: 'funds',\n      render: (funds, swapOrder) => (\n        <Space>\n          <Avatar src={swapOrder.payAsset.iconUrl} />\n          <span>{funds}</span>\n        </Space>\n      ),\n      title: 'funds',\n    },\n    {\n      dataIndex: 'amount',\n      key: 'amount',\n      render: (amount, swapOrder) => (\n        <Space>\n          <Avatar src={swapOrder.fillAsset.iconUrl} />\n          <span>{amount || '-'}</span>\n        </Space>\n      ),\n      title: 'amount',\n    },\n    {\n      dataIndex: 'minAmount',\n      key: 'minAmount',\n      render: (minAmount) => minAmount || '-',\n      title: 'minAmount',\n    },\n    { dataIndex: 'createdAt', key: 'createdAt', title: 'createdAt' },\n  ];\n\n  return (\n    <div>\n      <PageHeader title='Swap Orders' />\n      <Table\n        scroll={{ x: true }}\n        dataSource={swapOrders}\n        columns={columns}\n        rowKey='traceId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { PageHeader } from 'antd';\nimport TransfersComponent from 'apps/admin/components/TransfersComponent/TransfersComponent';\nimport React from 'react';\n\nexport default function TransfersPage() {\n  return (\n    <div>\n      <PageHeader title='Transfers' />\n      <TransfersComponent />\n    </div>\n  );\n}\n","import { Avatar, Descriptions, Empty, PageHeader, Space, Tabs } from 'antd';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport MixinNetworkSnapshotsComponent from 'apps/admin/components/MixinNetworkSnapshotsComponent/MixinNetworkSnapshotComponent';\nimport WalletBalanceComponent from 'apps/admin/components/WalletBalanceComponent/WalletBalanceComponent';\nimport { useAdminUserQuery } from 'graphqlTypes';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\nexport default function UserPage() {\n  const { mixinId } = useParams<{ mixinId: string }>();\n  const { loading, data } = useAdminUserQuery({ variables: { mixinId } });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const { adminUser: user } = data;\n  return (\n    <div>\n      <PageHeader title='Users' />\n      <Descriptions bordered size='small'>\n        <Descriptions.Item label='Name'>\n          <Space>\n            <Avatar src={user.avatarUrl} />\n            {user.name}\n          </Space>\n        </Descriptions.Item>\n        <Descriptions.Item label='MixinId'>{user.mixinId}</Descriptions.Item>\n        <Descriptions.Item label='Articles Count'>\n          {user.statistics.articlesCount}\n        </Descriptions.Item>\n        <Descriptions.Item label='Author Revenue Amount(USD)'>\n          {user.statistics.authorRevenueTotalUsd}\n        </Descriptions.Item>\n        <Descriptions.Item label='Reader Revenue Amount(USD)'>\n          {user.statistics.readerRevenueTotalUsd}\n        </Descriptions.Item>\n      </Descriptions>\n      <Tabs defaultActiveKey='wallet_balance'>\n        <Tabs.TabPane tab='Wallet Balance' key='wallet_balance'>\n          {user.walletId ? (\n            <WalletBalanceComponent userId={user.walletId} />\n          ) : (\n            <Empty />\n          )}\n        </Tabs.TabPane>\n        <Tabs.TabPane tab='Wallet Snapshots' key='wallet_snapshots'>\n          {user.walletId ? (\n            <MixinNetworkSnapshotsComponent userId={user.walletId} />\n          ) : (\n            <Empty />\n          )}\n        </Tabs.TabPane>\n      </Tabs>\n    </div>\n  );\n}\n","import { useDebounce } from 'ahooks';\nimport {\n  Avatar,\n  Button,\n  Col,\n  Divider,\n  Input,\n  PageHeader,\n  Popconfirm,\n  Popover,\n  Row,\n  Select,\n  Space,\n  Table,\n} from 'antd';\nimport { ColumnProps } from 'antd/lib/table';\nimport LoadingComponent from 'apps/admin/components/LoadingComponent/LoadingComponent';\nimport {\n  AdminUserConnectionQueryHookResult,\n  useAdminBanUserMutation,\n  useAdminUnbanUserMutation,\n  useAdminUserConnectionQuery,\n  User as IUser,\n} from 'graphqlTypes';\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function UsersPage() {\n  const [query, setQuery] = useState('');\n  const [orderBy, setOrderBy] = useState('default');\n  const [filter, setFilter] = useState('without_banned');\n  const debouncedQuery = useDebounce(query, { wait: 500 });\n  return (\n    <div>\n      <PageHeader title='Users' />\n      <Row gutter={16} style={{ marginBottom: '1rem' }}>\n        <Col>\n          <Select\n            style={{ width: 200 }}\n            value={orderBy}\n            onChange={(value) => setOrderBy(value)}\n          >\n            <Select.Option value='default'>Default Order</Select.Option>\n            <Select.Option value='revenue_total'>\n              Revenue Total DESC\n            </Select.Option>\n            <Select.Option value='payment_total'>\n              Payment Total DESC\n            </Select.Option>\n            <Select.Option value='articles_count'>\n              Articles Count DESC\n            </Select.Option>\n            <Select.Option value='comments_count'>\n              Comments Count DESC\n            </Select.Option>\n          </Select>\n        </Col>\n        <Col>\n          <Select\n            style={{ width: 200 }}\n            value={filter}\n            onChange={(value) => setFilter(value)}\n          >\n            <Select.Option value='without_banned'>Without Banned</Select.Option>\n            <Select.Option value='only_banned'>Only Banned</Select.Option>\n            <Select.Option value='all'>All</Select.Option>\n          </Select>\n        </Col>\n        <Col>\n          <Input\n            value={query}\n            placeholder='Query user name/mixinId'\n            onChange={(e) => setQuery(e.currentTarget.value)}\n          />\n        </Col>\n      </Row>\n      <UsersComponent\n        orderBy={orderBy}\n        query={debouncedQuery}\n        filter={filter}\n      />\n    </div>\n  );\n}\n\nexport function UsersComponent(props: {\n  query?: string;\n  orderBy?: string;\n  filter?: string;\n}) {\n  const { query, orderBy, filter } = props;\n  const { data, loading, fetchMore }: AdminUserConnectionQueryHookResult =\n    useAdminUserConnectionQuery({\n      variables: { query, orderBy, filter },\n    });\n  const [adminBanUser] = useAdminBanUserMutation();\n  const [adminUnbanUser] = useAdminUnbanUserMutation();\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminUserConnection: {\n      nodes: users,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<IUser>> = [\n    {\n      dataIndex: 'mixinId',\n      key: 'mixinId',\n      render: (mixinId, user) => (\n        <Popover title='mixin UUID' content={user.mixinUuid}>\n          {mixinId}\n        </Popover>\n      ),\n      title: 'Mixin ID',\n    },\n    {\n      dataIndex: 'name',\n      key: 'name',\n      render: (name, user) => (\n        <Space>\n          <Avatar src={user.avatarUrl} />\n          {name}\n        </Space>\n      ),\n      title: 'Name',\n    },\n    {\n      dataIndex: 'articlesCount',\n      key: 'articlesCount',\n      render: (_, user) => user.statistics.articlesCount,\n      title: 'Articles',\n    },\n    {\n      dataIndex: 'commentsCount',\n      key: 'commentsCount',\n      render: (_, user) => user.statistics.commentsCount,\n      title: 'Comments',\n    },\n    {\n      dataIndex: 'revenueTotal',\n      key: 'revenueTotal',\n      render: (_, user) => user.statistics.revenueTotalUsd.toFixed(2),\n      title: 'Revenue Total',\n    },\n    {\n      dataIndex: 'paymentTotal',\n      key: 'paymentTotal',\n      render: (_, user) => user.statistics.paymentTotalUsd.toFixed(2),\n      title: 'Payment Total',\n    },\n    {\n      dataIndex: 'bannedAt',\n      key: 'bannedAt',\n      render: (bannedAt) => bannedAt || '-',\n      title: 'Banned At',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'Created At',\n    },\n    {\n      dataIndex: 'Actions',\n      key: 'actions',\n      render: (_, user) => (\n        <span>\n          <Link to={`/users/${user.mixinId}`}>Detail</Link>\n          <Divider type='vertical' />\n          <span>\n            {user.bannedAt ? (\n              <Popconfirm\n                title='Are you sure to unBan this user?'\n                onConfirm={() =>\n                  adminUnbanUser({\n                    variables: { input: { id: user.id } },\n                  })\n                }\n              >\n                <Button type='link'>unBan</Button>\n              </Popconfirm>\n            ) : (\n              <Popconfirm\n                title='Are you sure to BAN this user?'\n                onConfirm={() =>\n                  adminBanUser({\n                    variables: { input: { id: user.id } },\n                  })\n                }\n              >\n                <Button type='link'>Ban</Button>\n              </Popconfirm>\n            )}\n          </span>\n        </span>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={users}\n        rowKey='mixinId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                filter,\n                query,\n                orderBy,\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { Button, Result } from 'antd';\nimport React from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport AnnouncementsPage from './pages/AnnouncementsPage/AnnouncementsPage';\nimport ArticlePage from './pages/ArticlePage/ArticlePage';\nimport ArticleSnapshotsPage from './pages/ArticleSnapshotsPage/ArticleSnapshotsPage';\nimport ArticlesPage from './pages/ArticlesPage/ArticlesPage';\nimport BalancePage from './pages/BalancePage/BalancePage';\nimport BonusesPage from './pages/BonusesPage/BonusesPage';\nimport CommentsPage from './pages/CommentsPage/CommentsPage';\nimport MixinMessagesPage from './pages/MixinMessagesPage/MixinMessagesPage';\nimport MixinNetworkSnapshotsPage from './pages/MixinNetworkSnapshotsPage/MixinNetworkSnapshotsPage';\nimport OverviewPage from './pages/OverviewPage/OverviewPage';\nimport PaymentsPage from './pages/PaymentsPage/PaymentsPage';\nimport PrsAccountsPage from './pages/PrsAccountsPage/PrsAccountsPage';\nimport PrsTransactionsPage from './pages/PrsTransactionsPage/PrsTransactionsPage';\nimport SwapOrdersPage from './pages/SwapOrdersPage/SwapOrdersPage';\nimport TransfersPage from './pages/TransfersPage/TransfersPage';\nimport UserPage from './pages/UserPage/UserPage';\nimport UsersPage from './pages/UsersPage/UsersPage';\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path='/' exact>\n        <OverviewPage />\n      </Route>\n      <Route path='/users' exact>\n        <UsersPage />\n      </Route>\n      <Route path='/users/:mixinId' exact>\n        <UserPage />\n      </Route>\n      <Route path='/articles' exact>\n        <ArticlesPage />\n      </Route>\n      <Route path='/article_snapshots' exact>\n        <ArticleSnapshotsPage />\n      </Route>\n      <Route path='/articles/:uuid' exact>\n        <ArticlePage />\n      </Route>\n      <Route path='/comments' exact>\n        <CommentsPage />\n      </Route>\n      <Route path='/payments' exact>\n        <PaymentsPage />\n      </Route>\n      <Route path='/swap_orders' exact>\n        <SwapOrdersPage />\n      </Route>\n      <Route path='/transfers' exact>\n        <TransfersPage />\n      </Route>\n      <Route path='/mixin_messages' exact>\n        <MixinMessagesPage />\n      </Route>\n      <Route path='/mixin_network_snapshots' exact>\n        <MixinNetworkSnapshotsPage />\n      </Route>\n      <Route path='/announcements' exact>\n        <AnnouncementsPage />\n      </Route>\n      <Route path='/prs_accounts' exact>\n        <PrsAccountsPage />\n      </Route>\n      <Route path='/prs_transactions' exact>\n        <PrsTransactionsPage />\n      </Route>\n      <Route path='/bonuses' exact>\n        <BonusesPage />\n      </Route>\n      <Route path='/balance' exact>\n        <BalancePage />\n      </Route>\n      <Route>\n        <Result\n          status='404'\n          title='404'\n          subTitle='Sorry, the page you visited does not exist.'\n          extra={\n            <Link to='/'>\n              <Button type='primary'>Back Home</Button>\n            </Link>\n          }\n        />\n      </Route>\n    </Switch>\n  );\n}\n","import ReactOnRails from 'react-on-rails';\nimport AdminApp from '../apps/admin/App';\nimport '../stylesheets/admin.css';\n\n// This is how react_on_rails can see the HelloWorld in the browser.\nReactOnRails.register({\n  AdminApp,\n});\n","import { ApolloProvider } from '@apollo/client';\nimport { Layout } from 'antd';\nimport { apolloClient } from 'apps/shared';\nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Menus from './Menus';\nimport LoginPage from './pages/LoginPage/LoginPage';\nimport Routes from './Routes';\nimport { CurrentAdminContext, PrsdiggContext } from './shared';\n\nexport default function App(props: {\n  csrfToken: string;\n  currentAdmin?: { name: String };\n  prsdigg: { appId: String };\n}) {\n  const { csrfToken, currentAdmin, prsdigg } = props;\n  return (\n    <ApolloProvider client={apolloClient('/graphql', csrfToken)}>\n      {currentAdmin ? (\n        <PrsdiggContext.Provider value={prsdigg}>\n          <CurrentAdminContext.Provider value={currentAdmin}>\n            <Router basename='/admin'>\n              <Layout style={{ minHeight: '100vh' }}>\n                <Layout.Sider collapsible>\n                  <Menus />\n                </Layout.Sider>\n                <Layout.Content\n                  style={{ padding: '0 1rem', background: '#fff' }}\n                >\n                  <Routes />\n                </Layout.Content>\n              </Layout>\n            </Router>\n          </CurrentAdminContext.Provider>\n        </PrsdiggContext.Provider>\n      ) : (\n        <LoginPage />\n      )}\n    </ApolloProvider>\n  );\n}\n"],"sourceRoot":""}